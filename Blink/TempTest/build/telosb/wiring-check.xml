<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="9:TempTestAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f27da635640"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f27da64bdc0"/></to>
    </wire>
    <wire loc="72:../../../tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f27da64bdc0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f27da43e590"/></to>
    </wire>
    <wire loc="10:TempTestAppC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f27da61c8d0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f27da5fe590"/></to>
    </wire>
    <wire loc="51:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f27da5fe590"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f27da421020"/></to>
    </wire>
    <wire loc="11:TempTestAppC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f27da62b770"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f27da00e370"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f27da00e370"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f27da1af610"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="16:TempTestAppC.nc">
      <from><interface-ref name="TempRead" scoped="" ref="0x7f27da61b1b0"/></from>
      <to><interface-ref name="Temperature" scoped="" ref="0x7f27d9ac9310"/></to>
    </wire>
    <wire loc="54:../../../tos/platforms/telosa/chips/sht11/SensirionSht11C.nc">
      <from><interface-ref name="Temperature" scoped="" ref="0x7f27d9ac9310"/></from>
      <to><interface-ref name="Temperature" scoped="" ref="0x7f27d90918d0"/></to>
    </wire>
    <wire loc="18:TempTestAppC.nc">
      <from><interface-ref name="LightRead" scoped="" ref="0x7f27da61aa30"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x7f27d9ac0750"/></to>
    </wire>
    <wire loc="47:../../../tos/platforms/telosa/chips/s10871/HamamatsuS10871TsrC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x7f27d9ac0750"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x7f27d8fa5bd0"/></to>
    </wire>
    <wire loc="20:TempTestAppC.nc">
      <from><interface-ref name="HumidityRead" scoped="" ref="0x7f27da616300"/></from>
      <to><interface-ref name="Humidity" scoped="" ref="0x7f27d9ac7240"/></to>
    </wire>
    <wire loc="56:../../../tos/platforms/telosa/chips/sht11/SensirionSht11C.nc">
      <from><interface-ref name="Humidity" scoped="" ref="0x7f27d9ac7240"/></from>
      <to><interface-ref name="Humidity" scoped="" ref="0x7f27d908f790"/></to>
    </wire>
    <wire loc="37:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f27da5f9320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f27d978e150"/></to>
    </wire>
    <wire loc="96:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f27da5f9320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f27d8f70060"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f27da5f9320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f27d9a14c60"/></to>
    </wire>
    <wire loc="103:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f27da5f9320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f27d8ff81b0"/></to>
    </wire>
    <wire loc="49:../../../tos/lib/printf/PutcharC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f27da5f9320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f27d9d45cd0"/></to>
    </wire>
    <wire loc="103:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f27da5f9320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f27d90d4020"/></to>
    </wire>
    <wire loc="45:../../../tos/lib/printf/SerialPrintfC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f27da5f9320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f27d9fffe10"/></to>
    </wire>
    <wire loc="53:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f27da5f9320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f27da1a7400"/></to>
    </wire>
    <wire loc="67:../../../tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f27da43ec00"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f27daad93a0"/></to>
    </wire>
    <wire loc="53:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f27daad93a0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f27da684140"/></to>
    </wire>
    <wire loc="68:../../../tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f27da4316c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f27da5f81e0"/></to>
    </wire>
    <wire loc="48:../../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f27da5f81e0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f27da5f53c0"/></to>
    </wire>
    <wire loc="71:../../../tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f27da431dc0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7f27da5f9320"/></to>
    </wire>
    <wire loc="49:../../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7f27da5f5ad0"/></from>
      <to><interface-ref name="MoteClockInit" scoped="" ref="0x7f27da5f7900"/></to>
    </wire>
    <wire loc="46:../../../tos/platforms/telosb/MoteClockC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7f27da5f7900"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f27da5d6840"/></to>
    </wire>
    <wire loc="50:../../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7f27da5f41f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f27da5ee510"/></to>
    </wire>
    <wire loc="56:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="LedsInit" scoped="" ref="0x7f27da5f48d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f27da3f9c40"/></to>
    </wire>
    <wire loc="46:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f27da5d6840"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f27da5be3c0"/></to>
    </wire>
    <wire loc="47:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f27da5cede0"/></from>
      <to><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f27da5bea70"/></to>
    </wire>
    <wire loc="48:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x7f27da75c4c0"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x7f27da5bccc0"/></to>
    </wire>
    <wire loc="113:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA2" scoped="" ref="0x7f27da57fd70"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f27da4b66d0"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB0" scoped="" ref="0x7f27da5668c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f27da4aeb30"/></to>
    </wire>
    <wire loc="108:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA1" scoped="" ref="0x7f27da56e020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f27da4bb160"/></to>
    </wire>
    <wire loc="149:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB3" scoped="" ref="0x7f27da552020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f27da495cb0"/></to>
    </wire>
    <wire loc="107:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA1" scoped="" ref="0x7f27da575250"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f27da4bc480"/></to>
    </wire>
    <wire loc="148:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB3" scoped="" ref="0x7f27da55a700"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f27da495020"/></to>
    </wire>
    <wire loc="170:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB6" scoped="" ref="0x7f27da54f020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f27da47dcb0"/></to>
    </wire>
    <wire loc="154:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB4" scoped="" ref="0x7f27da561d70"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f27da48f220"/></to>
    </wire>
    <wire loc="99:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA0" scoped="" ref="0x7f27da578380"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f27da50b9d0"/></to>
    </wire>
    <wire loc="135:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB1" scoped="" ref="0x7f27da555160"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f27da4a42f0"/></to>
    </wire>
    <wire loc="134:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB1" scoped="" ref="0x7f27da55ca20"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f27da4a5610"/></to>
    </wire>
    <wire loc="133:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB1" scoped="" ref="0x7f27da565d70"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f27da4a6220"/></to>
    </wire>
    <wire loc="115:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA2" scoped="" ref="0x7f27da568020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f27da4b47a0"/></to>
    </wire>
    <wire loc="156:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB4" scoped="" ref="0x7f27da551020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f27da48c2f0"/></to>
    </wire>
    <wire loc="140:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB2" scoped="" ref="0x7f27da563410"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f27da49e6d0"/></to>
    </wire>
    <wire loc="114:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA2" scoped="" ref="0x7f27da574020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f27da4b5ac0"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerA" scoped="" ref="0x7f27da581970"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f27da519540"/></to>
    </wire>
    <wire loc="155:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB4" scoped="" ref="0x7f27da559570"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f27da48d610"/></to>
    </wire>
    <wire loc="106:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA1" scoped="" ref="0x7f27da5808c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f27da4bd020"/></to>
    </wire>
    <wire loc="161:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB5" scoped="" ref="0x7f27da55f220"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f27da4876d0"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA0" scoped="" ref="0x7f27da56f020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f27da4c4a90"/></to>
    </wire>
    <wire loc="142:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB2" scoped="" ref="0x7f27da5530c0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f27da49c7a0"/></to>
    </wire>
    <wire loc="100:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA0" scoped="" ref="0x7f27da570480"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f27da4c5de0"/></to>
    </wire>
    <wire loc="141:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB2" scoped="" ref="0x7f27da55b890"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f27da49dac0"/></to>
    </wire>
    <wire loc="163:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB5" scoped="" ref="0x7f27da550020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f27da4857a0"/></to>
    </wire>
    <wire loc="147:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB3" scoped="" ref="0x7f27da5628c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f27da497b30"/></to>
    </wire>
    <wire loc="120:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerB" scoped="" ref="0x7f27da567020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f27da5123e0"/></to>
    </wire>
    <wire loc="162:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB5" scoped="" ref="0x7f27da5583e0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f27da486ac0"/></to>
    </wire>
    <wire loc="128:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB0" scoped="" ref="0x7f27da5561f0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f27da4accb0"/></to>
    </wire>
    <wire loc="169:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB6" scoped="" ref="0x7f27da5571f0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f27da47d020"/></to>
    </wire>
    <wire loc="127:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB0" scoped="" ref="0x7f27da55dbb0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f27da4ac020"/></to>
    </wire>
    <wire loc="168:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB6" scoped="" ref="0x7f27da55e730"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f27da480b30"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f27da517450"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f27da518d80"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="95:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7f27da517aa0"/></from>
      <to><interface-ref name="VectorTimerA0" scoped="" ref="0x7f27da478a90"/></to>
    </wire>
    <wire loc="96:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7f27da516120"/></from>
      <to><interface-ref name="VectorTimerA1" scoped="" ref="0x7f27da475260"/></to>
    </wire>
    <wire loc="102:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f27da4c3930"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f27da519540"/></to>
    </wire>
    <wire loc="103:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f27da4c1020"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f27da518d80"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="109:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f27da4ba020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f27da519540"/></to>
    </wire>
    <wire loc="110:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f27da4b97a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f27da518d80"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="116:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f27da4b3610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f27da519540"/></to>
    </wire>
    <wire loc="117:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f27da4b2c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f27da518d80"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="121:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f27da5102f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f27da511bf0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="122:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7f27da510940"/></from>
      <to><interface-ref name="VectorTimerB0" scoped="" ref="0x7f27da4759f0"/></to>
    </wire>
    <wire loc="123:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7f27da50f020"/></from>
      <to><interface-ref name="VectorTimerB1" scoped="" ref="0x7f27da474240"/></to>
    </wire>
    <wire loc="129:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f27da4abb40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f27da5123e0"/></to>
    </wire>
    <wire loc="130:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f27da4a92f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f27da511bf0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f27da4a3160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f27da5123e0"/></to>
    </wire>
    <wire loc="137:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f27da4a27a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f27da511bf0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f27da49b610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f27da5123e0"/></to>
    </wire>
    <wire loc="144:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f27da49ac50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f27da511bf0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f27da494b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f27da5123e0"/></to>
    </wire>
    <wire loc="151:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f27da4922f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f27da511bf0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f27da48b160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f27da5123e0"/></to>
    </wire>
    <wire loc="158:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f27da48a7a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f27da511bf0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f27da484610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f27da5123e0"/></to>
    </wire>
    <wire loc="165:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f27da483c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f27da511bf0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f27da47cb40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f27da5123e0"/></to>
    </wire>
    <wire loc="172:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f27da47a2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f27da511bf0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x7f27dab48410"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f27da682040"/></to>
    </wire>
    <wire loc="55:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x7f27da67e490"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x7f27daa703b0"/></to>
    </wire>
    <wire loc="53:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f27da3f9c40"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f27da4248d0"/></to>
    </wire>
    <wire loc="54:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f27da4197b0"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x7f27da3fc360"/></to>
    </wire>
    <wire loc="58:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f27da3fc360"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f27da1e1020"/></to>
    </wire>
    <wire loc="55:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f27da41f980"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x7f27da3fb6a0"/></to>
    </wire>
    <wire loc="61:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f27da3fb6a0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f27da1cdb90"/></to>
    </wire>
    <wire loc="56:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f27da41eca0"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x7f27da3fa9c0"/></to>
    </wire>
    <wire loc="64:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f27da3fa9c0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f27da1c8710"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f27da1d02f0"/></from>
      <to><interface-ref name="Port54" scoped="" ref="0x7f27da3a1200"/></to>
    </wire>
    <wire loc="486:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port54" scoped="" ref="0x7f27da3a1200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da27e740"/></to>
    </wire>
    <wire loc="62:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f27da1ccde0"/></from>
      <to><interface-ref name="Port55" scoped="" ref="0x7f27da39f200"/></to>
    </wire>
    <wire loc="487:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port55" scoped="" ref="0x7f27da39f200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da279100"/></to>
    </wire>
    <wire loc="65:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f27da1c7930"/></from>
      <to><interface-ref name="Port56" scoped="" ref="0x7f27da39d200"/></to>
    </wire>
    <wire loc="488:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port56" scoped="" ref="0x7f27da39d200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da275d10"/></to>
    </wire>
    <wire loc="442:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x7f27da3e3020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da317100"/></to>
    </wire>
    <wire loc="455:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x7f27da3ce020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da2e8d10"/></to>
    </wire>
    <wire loc="531:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SDA" scoped="" ref="0x7f27da385560"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da2d9d10"/></to>
    </wire>
    <wire loc="551:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC6" scoped="" ref="0x7f27da360570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da24e100"/></to>
    </wire>
    <wire loc="532:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI0" scoped="" ref="0x7f27da383580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da2d4740"/></to>
    </wire>
    <wire loc="460:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port30" scoped="" ref="0x7f27da3ca020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da2dd100"/></to>
    </wire>
    <wire loc="473:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port42" scoped="" ref="0x7f27da3b6200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da2aee00"/></to>
    </wire>
    <wire loc="497:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port64" scoped="" ref="0x7f27da391200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da258d10"/></to>
    </wire>
    <wire loc="535:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD0" scoped="" ref="0x7f27da37d580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da2cbd10"/></to>
    </wire>
    <wire loc="545:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC0" scoped="" ref="0x7f27da36c570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da26a100"/></to>
    </wire>
    <wire loc="557:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSIN" scoped="" ref="0x7f27da358580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da249d10"/></to>
    </wire>
    <wire loc="445:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x7f27da3dd020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da309100"/></to>
    </wire>
    <wire loc="536:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD0" scoped="" ref="0x7f27da37b580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da2c6740"/></to>
    </wire>
    <wire loc="450:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x7f27da3d8020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da2ff740"/></to>
    </wire>
    <wire loc="463:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port33" scoped="" ref="0x7f27da3c4020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da2cf100"/></to>
    </wire>
    <wire loc="476:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port45" scoped="" ref="0x7f27da3b0200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da2a0d10"/></to>
    </wire>
    <wire loc="489:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port57" scoped="" ref="0x7f27da39b200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da26f740"/></to>
    </wire>
    <wire loc="500:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port67" scoped="" ref="0x7f27da38b200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da249d10"/></to>
    </wire>
    <wire loc="440:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x7f27da3e7020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da321d10"/></to>
    </wire>
    <wire loc="453:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x7f27da3d2020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da2f1860"/></to>
    </wire>
    <wire loc="466:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port36" scoped="" ref="0x7f27da3be020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da2c1100"/></to>
    </wire>
    <wire loc="530:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO0" scoped="" ref="0x7f27da387580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da2d9d10"/></to>
    </wire>
    <wire loc="548:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC3" scoped="" ref="0x7f27da366570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da25c100"/></to>
    </wire>
    <wire loc="555:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC1" scoped="" ref="0x7f27da35a570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da249d10"/></to>
    </wire>
    <wire loc="541:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK1" scoped="" ref="0x7f27da372580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da283d10"/></to>
    </wire>
    <wire loc="471:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port40" scoped="" ref="0x7f27da3ba020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da2b7a60"/></to>
    </wire>
    <wire loc="484:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port52" scoped="" ref="0x7f27da3a5200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da287100"/></to>
    </wire>
    <wire loc="495:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port62" scoped="" ref="0x7f27da395200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da261740"/></to>
    </wire>
    <wire loc="549:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC4" scoped="" ref="0x7f27da364570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da258d10"/></to>
    </wire>
    <wire loc="538:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE1" scoped="" ref="0x7f27da378570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da291d10"/></to>
    </wire>
    <wire loc="443:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x7f27da3e1020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da313d10"/></to>
    </wire>
    <wire loc="456:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x7f27da3cc020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da2e3740"/></to>
    </wire>
    <wire loc="493:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port60" scoped="" ref="0x7f27da399200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da26a100"/></to>
    </wire>
    <wire loc="461:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port31" scoped="" ref="0x7f27da3c8020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da2d9d10"/></to>
    </wire>
    <wire loc="474:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port43" scoped="" ref="0x7f27da3b4200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da2a9740"/></to>
    </wire>
    <wire loc="498:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port65" scoped="" ref="0x7f27da38f200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da253740"/></to>
    </wire>
    <wire loc="540:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI1" scoped="" ref="0x7f27da374580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da287100"/></to>
    </wire>
    <wire loc="438:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x7f27da3f4020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da32b6d0"/></to>
    </wire>
    <wire loc="451:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x7f27da3d6020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da2fa100"/></to>
    </wire>
    <wire loc="464:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port34" scoped="" ref="0x7f27da3c2020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da2cbd10"/></to>
    </wire>
    <wire loc="477:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port46" scoped="" ref="0x7f27da3ae200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da29b740"/></to>
    </wire>
    <wire loc="542:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD1" scoped="" ref="0x7f27da370580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da2c1100"/></to>
    </wire>
    <wire loc="546:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC1" scoped="" ref="0x7f27da36a570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da266d10"/></to>
    </wire>
    <wire loc="552:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC7" scoped="" ref="0x7f27da35e570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da249d10"/></to>
    </wire>
    <wire loc="482:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port50" scoped="" ref="0x7f27da3a9200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da291d10"/></to>
    </wire>
    <wire loc="543:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD1" scoped="" ref="0x7f27da36e580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da2bdd10"/></to>
    </wire>
    <wire loc="441:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x7f27da3e5020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da31c740"/></to>
    </wire>
    <wire loc="454:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x7f27da3d0020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da2ec270"/></to>
    </wire>
    <wire loc="467:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port37" scoped="" ref="0x7f27da3bc020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da2bdd10"/></to>
    </wire>
    <wire loc="539:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO1" scoped="" ref="0x7f27da376580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da28c740"/></to>
    </wire>
    <wire loc="550:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC5" scoped="" ref="0x7f27da362570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da253740"/></to>
    </wire>
    <wire loc="472:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port41" scoped="" ref="0x7f27da3b8200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da2b2460"/></to>
    </wire>
    <wire loc="485:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port53" scoped="" ref="0x7f27da3a3200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da283d10"/></to>
    </wire>
    <wire loc="496:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port63" scoped="" ref="0x7f27da393200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da25c100"/></to>
    </wire>
    <wire loc="444:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x7f27da3df020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da30e740"/></to>
    </wire>
    <wire loc="494:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port61" scoped="" ref="0x7f27da397200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da266d10"/></to>
    </wire>
    <wire loc="449:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x7f27da3db020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da305d10"/></to>
    </wire>
    <wire loc="462:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port32" scoped="" ref="0x7f27da3c6020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da2d4740"/></to>
    </wire>
    <wire loc="475:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port44" scoped="" ref="0x7f27da3b2200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da2a4100"/></to>
    </wire>
    <wire loc="499:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port66" scoped="" ref="0x7f27da38d200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da24e100"/></to>
    </wire>
    <wire loc="439:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x7f27da3e9020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da325100"/></to>
    </wire>
    <wire loc="452:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x7f27da3d4020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da2f6d10"/></to>
    </wire>
    <wire loc="465:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port35" scoped="" ref="0x7f27da3c0020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da2c6740"/></to>
    </wire>
    <wire loc="478:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port47" scoped="" ref="0x7f27da3ac200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da296100"/></to>
    </wire>
    <wire loc="534:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SCL" scoped="" ref="0x7f27da37f560"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da2cf100"/></to>
    </wire>
    <wire loc="547:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC2" scoped="" ref="0x7f27da368570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da261740"/></to>
    </wire>
    <wire loc="533:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK0" scoped="" ref="0x7f27da381580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da2cf100"/></to>
    </wire>
    <wire loc="483:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port51" scoped="" ref="0x7f27da3a7200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da28c740"/></to>
    </wire>
    <wire loc="554:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC0" scoped="" ref="0x7f27da35c570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da24e100"/></to>
    </wire>
    <wire loc="558:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSOUT" scoped="" ref="0x7f27da356580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da26f740"/></to>
    </wire>
    <wire loc="529:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE0" scoped="" ref="0x7f27da3891f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f27da2dd100"/></to>
    </wire>
    <wire loc="54:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f27da1af610"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f27da1a61d0"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f27da1a61d0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f27da02f150"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f27da1a7400"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f27da0aa020"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f27da19da80"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f27da020790"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f27da0aa020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f27d91f7380"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7f27da029640"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f27da07e2f0"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f27da079850"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f27da0aa870"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f27da0aa870"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f27d91f0020"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f27da016a60"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f27da1238c0"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f27da1238c0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f27da106cf0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f27d91f7380"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f27d91dba30"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7f27d91ea780"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f27d91f7bd0"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f27d91f7bd0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f27d91da340"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f27d91ec3d0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f27da1238c0"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f27d91d74c0"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f27d91e07b0"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f27d91e07b0"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f27da17d8b0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f27d91d5a90"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f27d91dfda0"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f27d91dfda0"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f27da17b560"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f27d91d4da0"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f27d91dd0c0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f27d91dd0c0"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f27da178020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="58:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f27da17d8b0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f27da567020"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f27da17b560"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB0" scoped="" ref="0x7f27da5668c0"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f27da178020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB0" scoped="" ref="0x7f27da55dbb0"/></to>
    </wire>
    <wire loc="66:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f27da17d8b0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f27da567020"/></to>
    </wire>
    <wire loc="67:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f27da17b560"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB2" scoped="" ref="0x7f27da563410"/></to>
    </wire>
    <wire loc="68:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f27da178020"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB2" scoped="" ref="0x7f27da55b890"/></to>
    </wire>
    <wire loc="70:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f27da17d8b0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f27da567020"/></to>
    </wire>
    <wire loc="71:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f27da17b560"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB3" scoped="" ref="0x7f27da5628c0"/></to>
    </wire>
    <wire loc="72:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f27da178020"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB3" scoped="" ref="0x7f27da55a700"/></to>
    </wire>
    <wire loc="74:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f27da17d8b0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f27da567020"/></to>
    </wire>
    <wire loc="75:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f27da17b560"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB4" scoped="" ref="0x7f27da561d70"/></to>
    </wire>
    <wire loc="76:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f27da178020"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB4" scoped="" ref="0x7f27da559570"/></to>
    </wire>
    <wire loc="78:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f27da17d8b0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f27da567020"/></to>
    </wire>
    <wire loc="79:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f27da17b560"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB5" scoped="" ref="0x7f27da55f220"/></to>
    </wire>
    <wire loc="80:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f27da178020"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB5" scoped="" ref="0x7f27da5583e0"/></to>
    </wire>
    <wire loc="82:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f27da17d8b0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f27da567020"/></to>
    </wire>
    <wire loc="83:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f27da17b560"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB6" scoped="" ref="0x7f27da55e730"/></to>
    </wire>
    <wire loc="84:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f27da178020"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB6" scoped="" ref="0x7f27da5571f0"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7f27da0e80f0"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f27da1218e0"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f27da1218e0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f27da11ab80"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f27da10cc50"/></from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f27da567020"/></to>
    </wire>
    <wire loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x7f27da0759c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f27dab48410"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x7f27da024a00"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f27dab48410"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="42:../../../tos/lib/printf/SerialPrintfC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f27da0028b0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f27d9fff680"/></to>
    </wire>
    <wire loc="48:../../../tos/lib/printf/SerialPrintfC.nc">
      <from><interface-ref name="UartControl" scoped="" ref="0x7f27da004a20"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f27da001680"/></to>
    </wire>
    <wire loc="17:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f27da001680"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f27d9d55080"/></to>
    </wire>
    <wire loc="49:../../../tos/lib/printf/SerialPrintfC.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f27d9ffa990"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f27d9febd30"/></to>
    </wire>
    <wire loc="14:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f27d9febd30"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f27d9d5a440"/></to>
    </wire>
    <wire loc="52:../../../tos/lib/printf/SerialPrintfC.nc">
      <from><interface-ref name="Putchar" scoped="" ref="0x7f27d9d46080"/></from>
      <to><interface-ref name="Putchar" scoped="" ref="0x7f27d9ff75f0"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f27d9d5a440"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f27d9f7dd00"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="13:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f27d9fe1d20"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f27d9d5b440"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f27d9d5b440"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f27d9f7e670"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="18:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f27d9d59020"/></from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f27d9d558e0"/></to>
    </wire>
    <wire loc="19:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f27d9d54020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f27d9d5d020"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f27d9d5d020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f27d9f82c80"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f27d9d5dc70"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f27d9154c70"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f27d9154c70"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f27d9e23d50"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f27d9f771d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f27d9d59020"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f27d914dd70"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f27d9f7b8e0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7f27d9f79e50"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f27d9154020"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f27d9154020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f27d9e24a60"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7f27d9f72710"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f27d914d5d0"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f27d914d5d0"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f27d9e27cd0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f27d9f7b8e0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f27d9eeda20"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f27d9f7dd00"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f27d9eeb570"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f27d9f7e670"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f27d9eec3e0"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f27d9f82c80"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f27d9eefb10"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f27d9ee9020"/></from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f27d9f771d0"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7f27d9eea230"/></from>
      <to><interface-ref name="UsartResource" scoped="" ref="0x7f27d9f79e50"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7f27d9ee4290"/></from>
      <to><interface-ref name="UsartInterrupts" scoped="" ref="0x7f27d9f72710"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Usart" scoped="" ref="0x7f27d9ee9690"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f27d9ed4900"/></to>
    </wire>
    <wire loc="88:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f27d9ed4900"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7f27d9ecd020"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f27d9ee4c90"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f27d9e3f110"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f27d9e3f110"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f27da1218e0"/></to>
    </wire>
    <wire loc="70:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f27d9ee2dd0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f27da5fe590"/></to>
    </wire>
    <wire loc="89:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f27d9ed13b0"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f27d9ec9dc0"/></to>
    </wire>
    <wire loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x7f27d9ed40d0"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x7f27d9ed0710"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7f27d9ec86d0"/></from>
      <to><interface-ref name="SIMO1" scoped="" ref="0x7f27da376580"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="SOMI" scoped="" ref="0x7f27d9ec6670"/></from>
      <to><interface-ref name="SOMI1" scoped="" ref="0x7f27da374580"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7f27d9ec4670"/></from>
      <to><interface-ref name="UCLK1" scoped="" ref="0x7f27da372580"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="URXD" scoped="" ref="0x7f27d9ec2670"/></from>
      <to><interface-ref name="URXD1" scoped="" ref="0x7f27da36e580"/></to>
    </wire>
    <wire loc="95:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="UTXD" scoped="" ref="0x7f27d9ec0670"/></from>
      <to><interface-ref name="UTXD1" scoped="" ref="0x7f27da370580"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f27d9152be0"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f27d9ed4900"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f27d9152440"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f27d9e22590"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f27d9e22590"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f27d9d90400"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f27d9e21370"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f27d914dd70"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f27d9e23d50"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f27d9d91020"/></to>
    </wire>
    <wire loc="106:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f27d9d91020"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f27d90d16c0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="Interrupts" scoped="" ref="0x7f27d9e27cd0"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f27d9e1d0d0"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f27d9e24a60"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f27d9d92210"/></to>
    </wire>
    <wire loc="105:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f27d9d92210"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f27d90d2850"/></to>
    </wire>
    <wire loc="108:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f27d9d90400"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f27d90d0a70"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="RawInterrupts" scoped="" ref="0x7f27d9e0c0a0"/></from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f27d9ed13b0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f27d9d90cd0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f27d9e21370"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f27d9e0b020"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f27d9d90400"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f27d9d769d0"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f27d9d917a0"/></to>
    </wire>
    <wire loc="107:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f27d9d917a0"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f27d90d1e40"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x7f27d9d8bb20"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x7f27d9ed40d0"/></to>
    </wire>
    <wire loc="109:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f27d90cf400"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f27d9d90cd0"/></to>
    </wire>
    <wire loc="111:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f27d90cfbc0"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f27d90d4630"/></to>
    </wire>
    <wire loc="75:../../../tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7f27d90ccde0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f27dab48410"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="80:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x7f27d909c470"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x7f27d9d8bb20"/></to>
    </wire>
    <wire loc="82:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="PowerDownCleanup" scoped="" ref="0x7f27d909cbd0"/></from>
      <to><interface-ref name="PowerDownCleanup" scoped="" ref="0x7f27d9d76400"/></to>
    </wire>
    <wire loc="84:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f27d909b270"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f27d9d769d0"/></to>
    </wire>
    <wire loc="85:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f27d909be80"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f27d9d74720"/></to>
    </wire>
    <wire loc="50:../../../tos/lib/printf/PutcharC.nc">
      <from><interface-ref name="Putchar" scoped="" ref="0x7f27d9d42380"/></from>
      <to><interface-ref name="Putchar" scoped="" ref="0x7f27d9d46080"/></to>
    </wire>
    <wire loc="57:../../../tos/platforms/telosa/chips/sht11/SensirionSht11C.nc">
      <from><interface-ref name="HumidityMetadata" scoped="" ref="0x7f27d9ac4900"/></from>
      <to><interface-ref name="HumidityMetadata" scoped="" ref="0x7f27d908f020"/></to>
    </wire>
    <wire loc="55:../../../tos/platforms/telosa/chips/sht11/SensirionSht11C.nc">
      <from><interface-ref name="TemperatureMetadata" scoped="" ref="0x7f27d9ac8aa0"/></from>
      <to><interface-ref name="TemperatureMetadata" scoped="" ref="0x7f27d9091160"/></to>
    </wire>
    <wire loc="64:../../../tos/platforms/telosa/chips/sht11/SensirionSht11C.nc">
      <from><interface-ref name="TempResource" scoped="" ref="0x7f27d908ee30"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f27d9ced020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="65:../../../tos/platforms/telosa/chips/sht11/SensirionSht11C.nc">
      <from><interface-ref name="Sht11Temp" scoped="" ref="0x7f27d908b7b0"/></from>
      <to><interface-ref name="SensirionSht11" scoped="" ref="0x7f27d9cec2c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:../../../tos/platforms/telosa/chips/sht11/SensirionSht11C.nc">
      <from><interface-ref name="HumResource" scoped="" ref="0x7f27d908caf0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f27d9ced020"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="67:../../../tos/platforms/telosa/chips/sht11/SensirionSht11C.nc">
      <from><interface-ref name="Sht11Hum" scoped="" ref="0x7f27d908ac50"/></from>
      <to><interface-ref name="SensirionSht11" scoped="" ref="0x7f27d9cec2c0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="49:../../../tos/platforms/telosa/chips/sht11/HalSensirionSht11C.nc">
      <from><interface-ref name="SensirionSht11" scoped="" ref="0x7f27d9cec2c0"/></from>
      <to><interface-ref name="SensirionSht11" scoped="" ref="0x7f27d9c70c90"/></to>
    </wire>
    <wire loc="52:../../../tos/platforms/telosa/chips/sht11/HalSensirionSht11C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f27d9ced020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f27d9c5d1d0"/></to>
    </wire>
    <wire loc="77:../../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f27d9c5d1d0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f27d9b1ab60"/></to>
    </wire>
    <wire loc="53:../../../tos/platforms/telosa/chips/sht11/HalSensirionSht11C.nc">
      <from><interface-ref name="DATA" scoped="" ref="0x7f27d9c6e2f0"/></from>
      <to><interface-ref name="DATA" scoped="" ref="0x7f27d9c5c020"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="DATA" scoped="" ref="0x7f27d9c5c020"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f27d9c58330"/></to>
    </wire>
    <wire loc="54:../../../tos/platforms/telosa/chips/sht11/HalSensirionSht11C.nc">
      <from><interface-ref name="CLOCK" scoped="" ref="0x7f27d9c6d480"/></from>
      <to><interface-ref name="SCK" scoped="" ref="0x7f27d9c5b370"/></to>
    </wire>
    <wire loc="61:../../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="SCK" scoped="" ref="0x7f27d9c5b370"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f27d9c54d60"/></to>
    </wire>
    <wire loc="55:../../../tos/platforms/telosa/chips/sht11/HalSensirionSht11C.nc">
      <from><interface-ref name="InterruptDATA" scoped="" ref="0x7f27d9c6c610"/></from>
      <to><interface-ref name="InterruptDATA" scoped="" ref="0x7f27d9c5a730"/></to>
    </wire>
    <wire loc="74:../../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="InterruptDATA" scoped="" ref="0x7f27d9c5a730"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0x7f27d9b2ba30"/></to>
    </wire>
    <wire loc="58:../../../tos/platforms/telosa/chips/sht11/HalSensirionSht11C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f27d9c6b240"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f27d9ada1e0"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f27d9ada1e0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f27da1af610"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/platforms/telosa/chips/sht11/HalSensirionSht11C.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f27d9c66450"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f27da5fe590"/></to>
    </wire>
    <wire loc="102:../../../tos/chips/sht11/SensirionSht11LogicP.nc">
      <from><interface-ref name="readSensor" scoped="" ref="0x7f27d9c642f0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f27dab48410"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="103:../../../tos/chips/sht11/SensirionSht11LogicP.nc">
      <from><interface-ref name="signalStatusDone" scoped="" ref="0x7f27d9c65ac0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f27dab48410"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="105:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f27d9b1ab60"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f27d8ff5970"/></to>
    </wire>
    <wire loc="56:../../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f27d9c57490"/></from>
      <to><interface-ref name="Port15" scoped="" ref="0x7f27da3e1020"/></to>
    </wire>
    <wire loc="57:../../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f27d9c52020"/></from>
      <to><interface-ref name="Port16" scoped="" ref="0x7f27da3df020"/></to>
    </wire>
    <wire loc="58:../../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f27d9c4dde0"/></from>
      <to><interface-ref name="Port17" scoped="" ref="0x7f27da3dd020"/></to>
    </wire>
    <wire loc="64:../../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="PWR" scoped="" ref="0x7f27d9c3d6d0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f27d9c4fb60"/></to>
    </wire>
    <wire loc="65:../../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="DATA" scoped="" ref="0x7f27d9c3c9c0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f27d9c58330"/></to>
    </wire>
    <wire loc="66:../../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="SCK" scoped="" ref="0x7f27d9c3bcd0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f27d9c54d60"/></to>
    </wire>
    <wire loc="69:../../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f27d9c452c0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f27d9c2e5a0"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f27d9c2e5a0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f27da1af610"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="73:../../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="HplInterrupt" scoped="" ref="0x7f27d9b2a610"/></from>
      <to><interface-ref name="Port15" scoped="" ref="0x7f27d9c1b710"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x7f27d9c1b710"/></from>
      <to><interface-ref name="Port15" scoped="" ref="0x7f27d9c08710"/></to>
    </wire>
    <wire loc="80:../../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f27d9b13280"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f27d9c41630"/></to>
    </wire>
    <wire loc="81:../../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f27d9ae6020"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f27d9b18e80"/></to>
    </wire>
    <wire loc="108:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f27d9b18e80"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f27d8ff3c30"/></to>
    </wire>
    <wire loc="82:../../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f27d9ae72f0"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f27d9b18270"/></to>
    </wire>
    <wire loc="107:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f27d9b18270"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f27d8ff3020"/></to>
    </wire>
    <wire loc="50:../../../tos/platforms/telosa/chips/sht11/HplSensirionSht11P.nc">
      <from><interface-ref name="stopTask" scoped="" ref="0x7f27d9c38740"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f27dab48410"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x7f27d9c1d710"/></from>
      <to><interface-ref name="Port14" scoped="" ref="0x7f27d9c09710"/></to>
    </wire>
    <wire loc="82:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x7f27d9c128a0"/></from>
      <to><interface-ref name="Port26" scoped="" ref="0x7f27d9bfe8a0"/></to>
    </wire>
    <wire loc="73:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x7f27d9c19710"/></from>
      <to><interface-ref name="Port17" scoped="" ref="0x7f27d9c06710"/></to>
    </wire>
    <wire loc="77:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x7f27d9c17710"/></from>
      <to><interface-ref name="Port21" scoped="" ref="0x7f27d9c04710"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x7f27d9c22710"/></from>
      <to><interface-ref name="Port12" scoped="" ref="0x7f27d9c0b710"/></to>
    </wire>
    <wire loc="80:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x7f27d9c14710"/></from>
      <to><interface-ref name="Port24" scoped="" ref="0x7f27d9c00710"/></to>
    </wire>
    <wire loc="83:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x7f27d9c118a0"/></from>
      <to><interface-ref name="Port27" scoped="" ref="0x7f27d9bfd8a0"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x7f27d9c1f660"/></from>
      <to><interface-ref name="Port10" scoped="" ref="0x7f27d9c0d6b0"/></to>
    </wire>
    <wire loc="78:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x7f27d9c16710"/></from>
      <to><interface-ref name="Port22" scoped="" ref="0x7f27d9c03710"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x7f27d9c1e710"/></from>
      <to><interface-ref name="Port13" scoped="" ref="0x7f27d9c0a710"/></to>
    </wire>
    <wire loc="81:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x7f27d9c138a0"/></from>
      <to><interface-ref name="Port25" scoped="" ref="0x7f27d9bff8a0"/></to>
    </wire>
    <wire loc="72:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x7f27d9c1a710"/></from>
      <to><interface-ref name="Port16" scoped="" ref="0x7f27d9c07710"/></to>
    </wire>
    <wire loc="76:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x7f27d9c18710"/></from>
      <to><interface-ref name="Port20" scoped="" ref="0x7f27d9c05710"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x7f27d9c23710"/></from>
      <to><interface-ref name="Port11" scoped="" ref="0x7f27d9c0c710"/></to>
    </wire>
    <wire loc="79:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x7f27d9c15710"/></from>
      <to><interface-ref name="Port23" scoped="" ref="0x7f27d9c01710"/></to>
    </wire>
    <wire loc="106:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f27d9b199e0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f27d8ff4850"/></to>
    </wire>
    <wire loc="109:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f27d8ff2590"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f27d9b17770"/></to>
    </wire>
    <wire loc="111:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f27d8ff2d50"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f27d8ff87c0"/></to>
    </wire>
    <wire loc="75:../../../tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7f27d8fef020"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f27dab48410"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="79:../../../tos/lib/power/SplitControlPowerManagerC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f27d8fbe0f0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f27d9b13280"/></to>
    </wire>
    <wire loc="81:../../../tos/lib/power/SplitControlPowerManagerC.nc">
      <from><interface-ref name="PowerDownCleanup" scoped="" ref="0x7f27d8fbeb70"/></from>
      <to><interface-ref name="PowerDownCleanup" scoped="" ref="0x7f27d9b13d00"/></to>
    </wire>
    <wire loc="83:../../../tos/lib/power/SplitControlPowerManagerC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f27d8fbd270"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f27d9ae72f0"/></to>
    </wire>
    <wire loc="84:../../../tos/lib/power/SplitControlPowerManagerC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f27d8fbde80"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f27d9ae6020"/></to>
    </wire>
    <wire loc="78:../../../tos/lib/power/PowerManagerP.nc">
      <from><interface-ref name="stopTask" scoped="" ref="0x7f27d8fbc680"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f27dab48410"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="73:../../../tos/lib/power/PowerManagerP.nc">
      <from><interface-ref name="startTask" scoped="" ref="0x7f27d8fbce60"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f27dab48410"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x7f27d8fa5bd0"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x7f27d9a8e390"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:../../../tos/platforms/telosa/chips/s10871/HamamatsuS10871TsrC.nc">
      <from><interface-ref name="ReadStream" scoped="" ref="0x7f27d96c6020"/></from>
      <to><interface-ref name="ReadStream" scoped="" ref="0x7f27d8fa0840"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="ReadStream" scoped="" ref="0x7f27d8fa0840"/></from>
      <to><interface-ref name="ReadStream" scoped="" ref="0x7f27d979a1d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="53:../../../tos/platforms/telosa/chips/s10871/HamamatsuS10871TsrC.nc">
      <from><interface-ref name="DeviceMetadata" scoped="" ref="0x7f27d9ac0020"/></from>
      <to><interface-ref name="DeviceMetadata" scoped="" ref="0x7f27d96d28b0"/></to>
    </wire>
    <wire loc="54:../../../tos/platforms/telosa/chips/s10871/HamamatsuS10871TsrC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f27d8fa34a0"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f27d96cf300"/></to>
    </wire>
    <wire loc="55:../../../tos/platforms/telosa/chips/s10871/HamamatsuS10871TsrC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f27d8f9d5c0"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f27d96cf300"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f27d9a82020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f27d8fa34a0"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="SingleChannel" scoped="" ref="0x7f27d9a7f450"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f27d8f97730"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f27d8f97730"/></from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x7f27d9a181d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="ResourceRead" scoped="" ref="0x7f27d9a85640"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f27d8f98af0"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f27d8f98af0"/></from>
      <to><interface-ref name="ClientResource" scoped="" ref="0x7f27d9882d20"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f27d8f949a0"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f27d8fa34a0"/></to>
    </wire>
    <wire loc="136:../../../tos/chips/msp430/adc12/AdcP.nc">
      <from><interface-ref name="readDone" scoped="" ref="0x7f27d9a54e40"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f27dab48410"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f27d8f95720"/></from>
      <to><interface-ref name="MultiChannel" scoped="" ref="0x7f27d9a17960"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f27d8f94060"/></from>
      <to><interface-ref name="Overflow" scoped="" ref="0x7f27d9a16920"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="AdcResource" scoped="" ref="0x7f27d987e1d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f27d9a25cc0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="ConfUp" scoped="" ref="0x7f27d8f84300"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f27d8f949a0"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f27d987c740"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ConfSub" scoped="" ref="0x7f27d8f85060"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="MultiChannel" scoped="" ref="0x7f27d9a17960"/></from>
      <to><interface-ref name="MultiChannel" scoped="" ref="0x7f27d9a0e1d0"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="DMAExtension" scoped="" ref="0x7f27d9a15760"/></from>
      <to><interface-ref name="DMAExtension" scoped="" ref="0x7f27d9a0c020"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f27d9a16920"/></from>
      <to><interface-ref name="Overflow" scoped="" ref="0x7f27d9a0d1d0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="SingleChannel" scoped="" ref="0x7f27d9a181d0"/></from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x7f27d9a11980"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f27d9a25cc0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f27d989b520"/></to>
    </wire>
    <wire loc="98:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f27d989b520"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f27d8f6d6c0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="ADCArbiterInfo" scoped="" ref="0x7f27d9a0c940"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f27d989ab20"/></to>
    </wire>
    <wire loc="100:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f27d989ab20"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f27d8f6ccb0"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="HplAdc12" scoped="" ref="0x7f27d99fd650"/></from>
      <to><interface-ref name="HplAdc12" scoped="" ref="0x7f27d992a020"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port60" scoped="" ref="0x7f27d99f7140"/></from>
      <to><interface-ref name="Port60" scoped="" ref="0x7f27da399200"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port61" scoped="" ref="0x7f27d99f5200"/></from>
      <to><interface-ref name="Port61" scoped="" ref="0x7f27da397200"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port62" scoped="" ref="0x7f27d99f3200"/></from>
      <to><interface-ref name="Port62" scoped="" ref="0x7f27da395200"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port63" scoped="" ref="0x7f27d99f1200"/></from>
      <to><interface-ref name="Port63" scoped="" ref="0x7f27da393200"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port64" scoped="" ref="0x7f27d99ef200"/></from>
      <to><interface-ref name="Port64" scoped="" ref="0x7f27da391200"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port65" scoped="" ref="0x7f27d99ed200"/></from>
      <to><interface-ref name="Port65" scoped="" ref="0x7f27da38f200"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port66" scoped="" ref="0x7f27d99eb200"/></from>
      <to><interface-ref name="Port66" scoped="" ref="0x7f27da38d200"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port67" scoped="" ref="0x7f27d99e9200"/></from>
      <to><interface-ref name="Port67" scoped="" ref="0x7f27da38b200"/></to>
    </wire>
    <wire loc="74:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="TimerA" scoped="" ref="0x7f27d9a084f0"/></from>
      <to><interface-ref name="TimerA" scoped="" ref="0x7f27da581970"/></to>
    </wire>
    <wire loc="75:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="ControlA0" scoped="" ref="0x7f27d99fcd30"/></from>
      <to><interface-ref name="ControlA0" scoped="" ref="0x7f27da578380"/></to>
    </wire>
    <wire loc="76:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="ControlA1" scoped="" ref="0x7f27d99fa160"/></from>
      <to><interface-ref name="ControlA1" scoped="" ref="0x7f27da5808c0"/></to>
    </wire>
    <wire loc="77:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="CompareA0" scoped="" ref="0x7f27d99f9530"/></from>
      <to><interface-ref name="CompareA0" scoped="" ref="0x7f27da570480"/></to>
    </wire>
    <wire loc="78:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="CompareA1" scoped="" ref="0x7f27d99f83a0"/></from>
      <to><interface-ref name="CompareA1" scoped="" ref="0x7f27da575250"/></to>
    </wire>
    <wire loc="99:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f27d989a3a0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f27d8f6c530"/></to>
    </wire>
    <wire loc="101:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f27d8f6b610"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f27d9899570"/></to>
    </wire>
    <wire loc="103:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f27d8f6bdd0"/></from>
      <to><interface-ref name="RoundRobinQueue" scoped="" ref="0x7f27d8f70670"/></to>
    </wire>
    <wire loc="68:../../../tos/system/SimpleArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7f27d8f6a900"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f27dab48410"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="ClientResource" scoped="" ref="0x7f27d9882d20"/></from>
      <to><interface-ref name="ClientResource" scoped="" ref="0x7f27d9818ca0"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="AdcResource" scoped="" ref="0x7f27d9814030"/></from>
      <to><interface-ref name="AdcResource" scoped="" ref="0x7f27d987e1d0"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f27d9810020"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7f27d987c740"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="RefVolt_1_5V" scoped="" ref="0x7f27d9814d80"/></from>
      <to><interface-ref name="RefVolt_1_5V" scoped="" ref="0x7f27d9878240"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="RefVolt_2_5V" scoped="" ref="0x7f27d98129c0"/></from>
      <to><interface-ref name="RefVolt_2_5V" scoped="" ref="0x7f27d9878e00"/></to>
    </wire>
    <wire loc="70:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="SwitchOnTimer" scoped="" ref="0x7f27d9875a90"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f27d97df4e0"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f27d97df4e0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f27da1af610"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="SwitchOffTimer" scoped="" ref="0x7f27d986f020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f27d97d8020"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f27d97d8020"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f27da1af610"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="SwitchOffSettleTimer" scoped="" ref="0x7f27d986a6c0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f27d97d2b40"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f27d97d2b40"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f27da1af610"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="73:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="HplAdc12" scoped="" ref="0x7f27d98779a0"/></from>
      <to><interface-ref name="HplAdc12" scoped="" ref="0x7f27d992a020"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <from><interface-ref name="switchOff" scoped="" ref="0x7f27d980e7f0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f27dab48410"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f27d8f2e280"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f27d8f9d5c0"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f27d97965e0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f27d8f9d5c0"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f27d9792280"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f27d8f31360"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f27d8f31360"/></from>
      <to><interface-ref name="ClientResource" scoped="" ref="0x7f27d9882d20"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="69:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f27d9795c90"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f27d8f30020"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f27d8f30020"/></from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x7f27d9a181d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="31:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <from><interface-ref name="ReadStream" scoped="" ref="0x7f27d979a1d0"/></from>
      <to><interface-ref name="ReadStream" scoped="" ref="0x7f27d9718cb0"/></to>
    </wire>
    <wire loc="32:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f27d9788b10"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f27d97965e0"/></to>
    </wire>
    <wire loc="33:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f27d96e88f0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f27d9792280"/></to>
    </wire>
    <wire loc="35:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <from><interface-ref name="Service" scoped="" ref="0x7f27d96ecbf0"/></from>
      <to><interface-ref name="ReadStream" scoped="" ref="0x7f27d978ee70"/></to>
    </wire>
    <wire loc="38:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <from><interface-ref name="SingleChannel" scoped="" ref="0x7f27d97891d0"/></from>
      <to><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f27d9795c90"/></to>
    </wire>
    <wire loc="39:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f27d9785020"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f27d9720970"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f27d9720970"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f27d8f1b020"/></to>
    </wire>
    <wire loc="156:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <from><interface-ref name="bufferDone" scoped="" ref="0x7f27d975c380"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f27dab48410"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="119:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <from><interface-ref name="readStreamDone" scoped="" ref="0x7f27d976aaa0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f27dab48410"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <from><interface-ref name="readStreamFail" scoped="" ref="0x7f27d9764100"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f27dab48410"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f27d9720120"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f27d8f21450"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f27d8f21450"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f27d8f06ca0"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7f27d8f15780"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f27d8f21ca0"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f27d8f21ca0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f27d8f055b0"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f27d8f173d0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f27da1238c0"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f27d8f01710"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f27d8f0b880"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f27d8f0b880"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f27da17d8b0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f27d8f00da0"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f27d8f09020"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f27d8f09020"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f27da17b560"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f27d8efe0c0"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f27d8f08440"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f27d8f08440"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f27da178020"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f27d8f2f020"/></from>
      <to><interface-ref name="MultiChannel" scoped="" ref="0x7f27d9a17960"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f27d8f2f910"/></from>
      <to><interface-ref name="Overflow" scoped="" ref="0x7f27d9a16920"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="AdcResource" scoped="" ref="0x7f27d987e1d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f27d9a25cc0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="ConfUp" scoped="" ref="0x7f27d8ebb120"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f27d8f2e280"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f27d987c740"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ConfSub" scoped="" ref="0x7f27d8ebedc0"/></to>
    </wire>
  </wiring>
  <components>
    <component qname="TempTestC" loc="6:TempTestC.nc">
      <module/>
    </component>
    <component qname="MainC" loc="56:../../../tos/system/MainC.nc">
      <documentation loc="45:../../../tos/system/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @date   August 6 2005&#10; @see    TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="40:../../../tos/platforms/telosa/PlatformC.nc">
      <documentation loc="34:../../../tos/platforms/telosa/PlatformC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre and Cory Sharp&#10; @version $Revision: 1.6 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="3:../../../tos/platforms/telosa/PlatformP.nc" safe="">
      <module/>
    </component>
    <component qname="MotePlatformC" loc="1:../../../tos/platforms/telosb/MotePlatformC.nc" safe="">
      <module/>
    </component>
    <component qname="MoteClockC" loc="37:../../../tos/platforms/telosb/MoteClockC.nc">
      <documentation loc="33:../../../tos/platforms/telosb/MoteClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockC" loc="37:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockP" loc="43:../../../tos/chips/msp430/timer/Msp430ClockP.nc" safe="">
      <module/>
    </component>
    <component qname="Msp430TimerC" loc="37:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA" loc="39(Msp430TimerC.Msp430TimerA):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:302">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:368">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:352">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB" loc="39(Msp430TimerC.Msp430TimerB):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:286">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:400">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:384">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA0" loc="39(Msp430TimerC.Msp430TimerA0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:354">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:370">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA1" loc="39(Msp430TimerC.Msp430TimerA1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:356">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:372">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA2" loc="39(Msp430TimerC.Msp430TimerA2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:358">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:374">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB0" loc="39(Msp430TimerC.Msp430TimerB0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:386">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:402">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB1" loc="39(Msp430TimerC.Msp430TimerB1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:388">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:404">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB2" loc="39(Msp430TimerC.Msp430TimerB2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:390">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:406">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB3" loc="39(Msp430TimerC.Msp430TimerB3):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:392">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:408">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB4" loc="39(Msp430TimerC.Msp430TimerB4):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:394">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:410">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB5" loc="39(Msp430TimerC.Msp430TimerB5):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:396">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:412">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB6" loc="39(Msp430TimerC.Msp430TimerB6):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:398">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:414">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerCommonP" loc="2:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="49:../../../tos/chips/msp430/McuSleepC.nc" safe="">
      <documentation loc="33:../../../tos/chips/msp430/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430. Code for low power calculation copied from older&#10; msp430hardware.h by Vlado Handziski, Joe Polastre, and Cory Sharp.&#10;&#10;&#10; @author Philip Levis&#10; @author Vlado Handziski&#10; @author Joe Polastre&#10; @author Cory Sharp&#10; @date   October 26, 2005&#10; @see  Please refer to TEP 112 for more information about this component and its&#10;          intended use.&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MoteClockP" loc="38:../../../tos/platforms/telosb/MoteClockP.nc">
      <documentation loc="33:../../../tos/platforms/telosb/MoteClockP.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="56:../../../tos/system/RealMainP.nc" safe="">
      <documentation loc="49:../../../tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:../../../tos/system/TinySchedulerC.nc">
      <documentation loc="34:../../../tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:../../../tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="LedsC" loc="45:../../../tos/system/LedsC.nc">
      <documentation loc="34:../../../tos/system/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="44:../../../tos/system/LedsP.nc" safe="">
      <documentation loc="35:../../../tos/system/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="40:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <documentation loc="34:../../../tos/platforms/telosa/PlatformLedsC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC" loc="45:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <documentation loc="35:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
        <short>&#10; HPL for the TI MSP430 family of microprocessors.</short>
        <long>&#10; HPL for the TI MSP430 family of microprocessors. This provides an&#10; abstraction for general-purpose I/O.&#10;&#10; @author Joe Polastre&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC.P10" loc="39(HplMsp430GeneralIOC.P10):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P11" loc="39(HplMsp430GeneralIOC.P11):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P12" loc="39(HplMsp430GeneralIOC.P12):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P13" loc="39(HplMsp430GeneralIOC.P13):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P14" loc="39(HplMsp430GeneralIOC.P14):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P15" loc="39(HplMsp430GeneralIOC.P15):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P16" loc="39(HplMsp430GeneralIOC.P16):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P17" loc="39(HplMsp430GeneralIOC.P17):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P20" loc="39(HplMsp430GeneralIOC.P20):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P21" loc="39(HplMsp430GeneralIOC.P21):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P22" loc="39(HplMsp430GeneralIOC.P22):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P23" loc="39(HplMsp430GeneralIOC.P23):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P24" loc="39(HplMsp430GeneralIOC.P24):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P25" loc="39(HplMsp430GeneralIOC.P25):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P26" loc="39(HplMsp430GeneralIOC.P26):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P27" loc="39(HplMsp430GeneralIOC.P27):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P30" loc="39(HplMsp430GeneralIOC.P30):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P31" loc="39(HplMsp430GeneralIOC.P31):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P32" loc="39(HplMsp430GeneralIOC.P32):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P33" loc="39(HplMsp430GeneralIOC.P33):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P34" loc="39(HplMsp430GeneralIOC.P34):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P35" loc="39(HplMsp430GeneralIOC.P35):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P36" loc="39(HplMsp430GeneralIOC.P36):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P37" loc="39(HplMsp430GeneralIOC.P37):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P40" loc="39(HplMsp430GeneralIOC.P40):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P41" loc="39(HplMsp430GeneralIOC.P41):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P42" loc="39(HplMsp430GeneralIOC.P42):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P43" loc="39(HplMsp430GeneralIOC.P43):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P44" loc="39(HplMsp430GeneralIOC.P44):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P45" loc="39(HplMsp430GeneralIOC.P45):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P46" loc="39(HplMsp430GeneralIOC.P46):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P47" loc="39(HplMsp430GeneralIOC.P47):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P50" loc="39(HplMsp430GeneralIOC.P50):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P51" loc="39(HplMsp430GeneralIOC.P51):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P52" loc="39(HplMsp430GeneralIOC.P52):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P53" loc="39(HplMsp430GeneralIOC.P53):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P54" loc="39(HplMsp430GeneralIOC.P54):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P55" loc="39(HplMsp430GeneralIOC.P55):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P56" loc="39(HplMsp430GeneralIOC.P56):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P57" loc="39(HplMsp430GeneralIOC.P57):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P60" loc="39(HplMsp430GeneralIOC.P60):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P61" loc="39(HplMsp430GeneralIOC.P61):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P62" loc="39(HplMsp430GeneralIOC.P62):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P63" loc="39(HplMsp430GeneralIOC.P63):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P64" loc="39(HplMsp430GeneralIOC.P64):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P65" loc="39(HplMsp430GeneralIOC.P65):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P66" loc="39(HplMsp430GeneralIOC.P66):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P67" loc="39(HplMsp430GeneralIOC.P67):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led0Impl" loc="42(PlatformLedsC.Led0Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led1Impl" loc="42(PlatformLedsC.Led1Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led2Impl" loc="42(PlatformLedsC.Led2Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="TempTestAppC.TimerMilliC" loc="44(TempTestAppC.TimerMilliC):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:../../../tos/system/TimerMilliP.nc">
      <documentation loc="34:../../../tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="43:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
        <short>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.</short>
        <long>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.  TimerMilliC in tos/system/ uses this component to&#10; allocate new timers.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C" loc="41(HilTimerMilliC.AlarmMilli32C):../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmMilli32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom" loc="41(HilTimerMilliC.AlarmMilli32C.AlarmFrom):../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer" loc="37(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer):../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzMapC" loc="48:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <documentation loc="34:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
        <short>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.</short>
        <long>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.  &#10;&#10; Platforms based on the MSP430 are * encouraged to copy in and&#10; override this file, presenting only the * hardware timers that are&#10; available for allocation on that platform.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm" loc="43(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm):../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da648290"/>
            <typename><typedef-ref name="T32khz" ref="0x7f27da648600"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C" loc="41:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
        <short>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.</short>
        <long>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC" loc="41:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
        <short>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.</short>
        <long>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC.Counter" loc="42(Msp430Counter32khzC.Counter):../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da648290"/>
            <typename><typedef-ref name="T32khz" ref="0x7f27da648600"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C.Transform" loc="54(CounterMilli32C.Transform):../../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da6496b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f27da649e20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f27db523920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da648290"/>
            <typename><typedef-ref name="T32khz" ref="0x7f27da648600"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f27db523920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.Transform" loc="51(HilTimerMilliC.AlarmMilli32C.Transform):../../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da6496b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f27da649e20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f27db523920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da648290"/>
            <typename><typedef-ref name="T32khz" ref="0x7f27da648600"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):../../../tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da6496b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f27da649e20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="46(HilTimerMilliC.VirtualizeTimerC):../../../tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da6496b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f27da649e20"/></typename>
          </type-tag>
          <value cst="I:6">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da6496b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f27da649e20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialPrintfC" loc="36:../../../tos/lib/printf/SerialPrintfC.nc">
      <documentation loc="32:../../../tos/lib/printf/SerialPrintfC.nc">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10; @author Kevin Klues&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialPrintfP" loc="36:../../../tos/lib/printf/SerialPrintfP.nc">
      <documentation loc="32:../../../tos/lib/printf/SerialPrintfP.nc">
        <short> &#10; </short>
        <long> &#10; @author David Moss&#10; @author Kevin Klues&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformSerialC" loc="2:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <configuration/>
    </component>
    <component qname="PlatformSerialC.UartC" loc="42(PlatformSerialC.UartC):../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <instance number="0">
        <component-ref qname="Msp430Uart1C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Uart1P" loc="39:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Uart1P.UartP" loc="41(Msp430Uart1P.UartP):../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @version $Revision: 1.7 $ $Date: 2008-06-04 05:31:15 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430UartP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430Usart1C" loc="74:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <documentation loc="31:../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430Usart1P" loc="73:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <documentation loc="62:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
        <short>&#10; Implementation of USART1 lowlevel functionality - stateless.</short>
        <long>&#10; Implementation of USART1 lowlevel functionality - stateless.&#10; Setting a mode will by default disable USART-Interrupts.&#10;&#10; @author: Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10; @author: Jonathan Hui &#60;jhui@archedrock.com>&#10; @author: Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author: Joe Polastre&#10; @version $Revision: 1.7 $ $Date: 2010-06-04 22:30:21 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Counter32khz16C" loc="41:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
        <short>&#10; Counter32khz16C provides at 16-bit counter at 32768 ticks per second.</short>
        <long>&#10; Counter32khz16C provides at 16-bit counter at 32768 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformSerialC.UartC.UsartC" loc="40(PlatformSerialC.UartC.UsartC):../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
        <short>&#10; Provides an interface for USART1 on the MSP430.</short>
        <long>&#10; Provides an interface for USART1 on the MSP430.&#10;&#10; @author Vlado Handziski &#60;handisk@tkn.tu-berlin.de>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Usart1C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare1P" loc="38:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.6 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare1P.UsartShareP" loc="37(Msp430UsartShare1P.UsartShareP):../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430UsartShareP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare1P.ArbiterC" loc="89(Msp430UsartShare1P.ArbiterC):../../../tos/system/FcfsArbiterC.nc">
      <documentation loc="69:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="FcfsArbiterC"/>
        <arguments>
          <value cst="S:Msp430Usart1.Resource">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare1P.ArbiterC.Queue" loc="42(Msp430UsartShare1P.ArbiterC.Queue):../../../tos/system/FcfsResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare1P.ArbiterC.Arbiter" loc="52(Msp430UsartShare1P.ArbiterC.Arbiter):../../../tos/system/ArbiterP.nc">
      <documentation loc="30:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare1P.PowerManagerC" loc="67(Msp430UsartShare1P.PowerManagerC):../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <documentation loc="41:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncStdControlPowerManagerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare1P.PowerManagerC.PowerManager" loc="58(Msp430UsartShare1P.PowerManagerC.PowerManager):../../../tos/lib/power/AsyncPowerManagerP.nc">
      <documentation loc="41:../../../tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncPowerManagerP"/>
      </instance>
      <module/>
    </component>
    <component qname="TelosSerialP" loc="1:../../../tos/platforms/telosa/TelosSerialP.nc">
      <module/>
    </component>
    <component qname="PutcharC" loc="42:../../../tos/lib/printf/PutcharC.nc">
      <documentation loc="32:../../../tos/lib/printf/PutcharC.nc">
        <short>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.</short>
        <long>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.  Components that&#10; provide a libc-based printf facility in TinyOS should implement the&#10; Putchar interface and connect it to this module.&#10;&#10; @author Peter A. Bigot &#60;pabigot@users.sourceforge.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PutcharP" loc="93:../../../tos/lib/printf/PutcharP.nc">
      <documentation loc="64:../../../tos/lib/printf/PutcharP.nc">
        <short>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.</short>
        <long>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.  Components that&#10; provide a libc-based printf facility in TinyOS should implement the&#10; Putchar interface and connect it to this module.&#10;&#10; @author Kevin Klues &#60;klueska@cs.stanford.edu>&#10; @author Peter A. Bigot &#60;pabigot@users.sourceforge.net>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TempTestAppC.TempSensor" loc="45(TempTestAppC.TempSensor):../../../tos/platforms/telosa/chips/sht11/SensirionSht11C.nc">
      <documentation loc="32:../../../tos/platforms/telosa/chips/sht11/SensirionSht11C.nc">
        <short>&#10; SensirionSht11C is a top-level access component for the Sensirion&#10; SHT11 model humidity and temperature sensor, available on the&#10; telosb platform.</short>
        <long>&#10; SensirionSht11C is a top-level access component for the Sensirion&#10; SHT11 model humidity and temperature sensor, available on the&#10; telosb platform. Because this component represents one physical&#10; device, simultaneous calls to read temperature and humidity will be&#10; arbitrated and executed in sequential order. Feel free to read both&#10; at the same time, just be aware that they'll come back&#10; sequentially.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2007-04-13 21:46:18 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SensirionSht11C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TempTestAppC.TempSensor.SensirionSht11ReaderP" loc="45(TempTestAppC.TempSensor.SensirionSht11ReaderP):../../../tos/chips/sht11/SensirionSht11ReaderP.nc">
      <instance number="0">
        <component-ref qname="SensirionSht11ReaderP"/>
      </instance>
      <module/>
    </component>
    <component qname="HalSensirionSht11C" loc="43:../../../tos/platforms/telosa/chips/sht11/HalSensirionSht11C.nc">
      <documentation loc="32:../../../tos/platforms/telosa/chips/sht11/HalSensirionSht11C.nc">
        <short>&#10; HalSensirionSht11C is an advanced access component for the&#10; Sensirion SHT11 model humidity and temperature sensor, available on&#10; the telosb platform.</short>
        <long>&#10; HalSensirionSht11C is an advanced access component for the&#10; Sensirion SHT11 model humidity and temperature sensor, available on&#10; the telosb platform. This component provides the SensirionSht11&#10; interface, which offers full control over the device. Please&#10; acquire the Resource before using it.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:45 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HalSensirionSht11C.SensirionSht11LogicP" loc="53(HalSensirionSht11C.SensirionSht11LogicP):../../../tos/chips/sht11/SensirionSht11LogicP.nc">
      <documentation loc="35:../../../tos/chips/sht11/SensirionSht11LogicP.nc">
        <short>&#10; SensirionSht11LogicP contains the actual driver logic needed to&#10; read from the Sensirion SHT11 temperature/humidity sensor.</short>
        <long>&#10; SensirionSht11LogicP contains the actual driver logic needed to&#10; read from the Sensirion SHT11 temperature/humidity sensor. It&#10; depends on 2 underlying GeneralIO interfaces, one for the data pin&#10; and one for the clock pin, and one underlying GpioInterrupt.  It&#10; provides the HAL-level SensirionSht11 interface. It's generic, so&#10; you can instantiate it multiple times if you have more than one&#10; Sensirion SHT11 attached to a node. &#10; &#10; &#60;p>&#10; This code assumes that the MCU clock is less than 10 MHz.  If you&#10; ever run this on a faster MCU, you'll need to insert a lot of&#10; waits to keep the Sensirion happy.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:12 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SensirionSht11LogicP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplSensirionSht11C" loc="43:../../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <documentation loc="32:../../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
        <short>&#10; HplSensirionSht11C is a low-level component, intended to provide&#10; the physical resources used by the Sensirion SHT11 sensor on the&#10; telosb platform so that the chip driver can make use of them.</short>
        <long>&#10; HplSensirionSht11C is a low-level component, intended to provide&#10; the physical resources used by the Sensirion SHT11 sensor on the&#10; telosb platform so that the chip driver can make use of them. You&#10; really shouldn't be wiring to this, unless you're writing a new&#10; Sensirion SHT11 driver.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.6 $ $Date: 2007-02-04 19:56:29 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplSensirionSht11C.DATAM" loc="42(HplSensirionSht11C.DATAM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplSensirionSht11C.SCKM" loc="42(HplSensirionSht11C.SCKM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplSensirionSht11C.PWRM" loc="42(HplSensirionSht11C.PWRM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplSensirionSht11P" loc="42:../../../tos/platforms/telosa/chips/sht11/HplSensirionSht11P.nc">
      <documentation loc="34:../../../tos/platforms/telosa/chips/sht11/HplSensirionSht11P.nc">
        <short>&#10; HplSensirionSht11P is a low-level component that controls power for&#10; the Sensirion SHT11 sensor on the telosb platform.</short>
        <long>&#10; HplSensirionSht11P is a low-level component that controls power for&#10; the Sensirion SHT11 sensor on the telosb platform.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:45 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplSensirionSht11C.TimerMilliC" loc="44(HplSensirionSht11C.TimerMilliC):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HplMsp430InterruptC" loc="39:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
        <short>&#10; HPL for the TI MSP430 family of microprocessors.</short>
        <long>&#10; HPL for the TI MSP430 family of microprocessors. This provides an&#10; abstraction for GPIO interrupts.&#10;&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430InterruptP" loc="36:../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc" safe="">
      <documentation loc="33:../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplSensirionSht11C.InterruptDATAC" loc="43(HplSensirionSht11C.InterruptDATAC):../../../tos/chips/msp430/pins/Msp430InterruptC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430InterruptC.nc">
        <short>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.&#10;&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430InterruptC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplSensirionSht11C.Arbiter" loc="89(HplSensirionSht11C.Arbiter):../../../tos/system/FcfsArbiterC.nc">
      <documentation loc="69:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="FcfsArbiterC"/>
        <arguments>
          <value cst="S:Sht11.Resource">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplSensirionSht11C.Arbiter.Queue" loc="42(HplSensirionSht11C.Arbiter.Queue):../../../tos/system/FcfsResourceQueueC.nc">
      <instance number="1">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplSensirionSht11C.Arbiter.Arbiter" loc="52(HplSensirionSht11C.Arbiter.Arbiter):../../../tos/system/ArbiterP.nc">
      <documentation loc="30:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplSensirionSht11C.SplitControlPowerManagerC" loc="67(HplSensirionSht11C.SplitControlPowerManagerC):../../../tos/lib/power/SplitControlPowerManagerC.nc">
      <documentation loc="41:../../../tos/lib/power/SplitControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component povides a power management policy for managing the power&#10; states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component povides a power management policy for managing the power&#10; states of non-virtualized devices.  Non-virtualized devices are shared&#10; using a parameterized Resource interface, and are powered down according&#10; to some policy whenever there are no more pending requests to that Resource.&#10; The policy implemented by this component is to delay the power down of a&#10; device by some contant factor.  Such a policy is useful whenever a device&#10; has a long wake-up latency.  The cost of waiting for the device to power&#10; up can be avoided if the device is requested again before some predetermined&#10; amount of time.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>SplitControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>AsyncStdControl&#60;/code> or&#10; &#60;code>StdControl&#60;/code> interfaces, please use either the&#10; &#60;code>AsyncStdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SplitControlPowerManagerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HplSensirionSht11C.SplitControlPowerManagerC.PowerManager" loc="58(HplSensirionSht11C.SplitControlPowerManagerC.PowerManager):../../../tos/lib/power/PowerManagerP.nc">
      <documentation loc="41:../../../tos/lib/power/PowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="PowerManagerP"/>
      </instance>
      <module/>
    </component>
    <component qname="HalSensirionSht11C.TimerMilliC" loc="44(HalSensirionSht11C.TimerMilliC):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TempTestAppC.LightSensor" loc="40(TempTestAppC.LightSensor):../../../tos/platforms/telosa/chips/s10871/HamamatsuS10871TsrC.nc">
      <documentation loc="32:../../../tos/platforms/telosa/chips/s10871/HamamatsuS10871TsrC.nc">
        <short>&#10; HamamatsuS10871TsrC is a driver for a total solar radiation sensor&#10; available on the telosb platform.</short>
        <long>&#10; HamamatsuS10871TsrC is a driver for a total solar radiation sensor&#10; available on the telosb platform.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2007-04-13 21:46:18 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HamamatsuS10871TsrC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TempTestAppC.LightSensor.AdcReadClientC" loc="47(TempTestAppC.LightSensor.AdcReadClientC):../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <instance number="0">
        <component-ref qname="AdcReadClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AdcP" loc="36:../../../tos/chips/msp430/adc12/AdcP.nc" safe="">
      <module/>
    </component>
    <component qname="TempTestAppC.LightSensor.AdcReadClientC.Msp430AdcClient" loc="43(TempTestAppC.LightSensor.AdcReadClientC.Msp430AdcClient):../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.&#10; Reference voltage is enabled automatically as required by the configuration.&#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Adc12ClientAutoRVGC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Adc12P" loc="37:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <configuration/>
    </component>
    <component qname="Msp430Adc12ImplP" loc="37:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc" safe="">
      <module/>
    </component>
    <component qname="HplAdc12P" loc="45:../../../tos/chips/msp430/adc12/HplAdc12P.nc">
      <documentation loc="36:../../../tos/chips/msp430/adc12/HplAdc12P.nc">
        <short>&#10; The HplAdc12 interface exports low-level access to the ADC12 registers&#10; of the MSP430 MCU.</short>
        <long>&#10; The HplAdc12 interface exports low-level access to the ADC12 registers&#10; of the MSP430 MCU.&#10;&#10; @author Jan Hauer&#10; @see  Please refer to TEP 101 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Msp430Adc12P.Arbiter" loc="83(Msp430Adc12P.Arbiter):../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <documentation loc="62:../../../tos/system/SimpleRoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleRoundRobinArbiterC"/>
        <arguments>
          <value cst="S:Msp430Adc12C.Resource">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Adc12P.Arbiter.Queue" loc="42(Msp430Adc12P.Arbiter.Queue):../../../tos/system/RoundRobinResourceQueueC.nc">
      <documentation loc="33:../../../tos/system/RoundRobinResourceQueueC.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.7 $&#10; @date $Date: 2010-06-29 22:07:56 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="RoundRobinResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430Adc12P.Arbiter.Arbiter" loc="49(Msp430Adc12P.Arbiter.Arbiter):../../../tos/system/SimpleArbiterP.nc">
      <documentation loc="30:../../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleArbiterP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430RefVoltArbiterP" loc="50:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <documentation loc="36:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
        <short> &#10; This component is meant to intercept requests to the &#60;code>Resource&#60;/code>&#10; interface on their way to the adc arbiter.</short>
        <long> &#10; This component is meant to intercept requests to the &#60;code>Resource&#60;/code>&#10; interface on their way to the adc arbiter. It checks whether the client's&#10; adc configuration requires the internal reference voltage generator of the&#10; MSP430 to be enabled during the conversion by inspecting the client's&#10; configuration data (using the &#60;code>AdcConfigure&#60;/code> interface). If so it&#10; makes sure that Resource.granted() is held back until the reference voltage&#10; is stable. Clients SHOULD NOT wire to &#60;code>Msp430RefVoltArbiterP&#60;/code> but&#10; to the Resource interface provided by&#10; &#60;code>Msp430Adc12ClientAutoRVGC&#60;/code>.&#10; &#10; @author Jan Hauer&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430RefVoltGeneratorP" loc="36:../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <module/>
    </component>
    <component qname="Msp430RefVoltArbiterImplP" loc="36:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <module/>
    </component>
    <component qname="Msp430RefVoltArbiterP.SwitchOnDelayTimer" loc="44(Msp430RefVoltArbiterP.SwitchOnDelayTimer):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430RefVoltArbiterP.SwitchOffDelayTimer" loc="44(Msp430RefVoltArbiterP.SwitchOffDelayTimer):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430RefVoltArbiterP.SwitchOffSettleTimer" loc="44(Msp430RefVoltArbiterP.SwitchOffSettleTimer):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TempTestAppC.LightSensor.AdcReadClientC.Msp430AdcClient.Msp430Adc12ConfAlertC" loc="42(TempTestAppC.LightSensor.AdcReadClientC.Msp430AdcClient.Msp430Adc12ConfAlertC):../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
        <short> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.</short>
        <long> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.&#10; (nesC optimizes all of its code away).&#10;&#10; @author: Jan Hauer&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Adc12ConfAlertC"/>
      </instance>
      <module/>
    </component>
    <component qname="TempTestAppC.LightSensor.AdcReadStreamClientC" loc="47(TempTestAppC.LightSensor.AdcReadStreamClientC):../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <documentation loc="36:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
        <short> &#10; This component virtualizes the HIL of ADC12 on MSP430.</short>
        <long> &#10; This component virtualizes the HIL of ADC12 on MSP430. A client must wire&#10; &#60;code>AdcConfigure&#60;/code> to a component that returns the client's adc&#10; configuration data.&#10;&#10; @author Jan Hauer &#10; @see  Please refer to the README.txt and TEP 101 for more information about &#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AdcReadStreamClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="WireAdcStreamP" loc="19:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <documentation loc="10:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
        <short>&#10; Support component for AdcReadStreamClientC.</short>
        <long>&#10; Support component for AdcReadStreamClientC.&#10;&#10; @author David Gay&#10; @author Jan Hauer &#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AdcStreamP" loc="46:../../../tos/chips/msp430/adc12/AdcStreamP.nc" safe="">
      <documentation loc="39:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
        <short>&#10; Convert MSP430 HAL A/D interface to the HIL interfaces (adapted atmega code).</short>
        <long>&#10; Convert MSP430 HAL A/D interface to the HIL interfaces (adapted atmega code).&#10; @author David Gay&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="WireAdcStreamP.Alarm" loc="41(WireAdcStreamP.Alarm):../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AlarmMilli32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="WireAdcStreamP.Alarm.AlarmFrom" loc="41(WireAdcStreamP.Alarm.AlarmFrom):../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Timer" loc="37(WireAdcStreamP.Alarm.AlarmFrom.Msp430Timer):../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Alarm" loc="43(WireAdcStreamP.Alarm.AlarmFrom.Msp430Alarm):../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da648290"/>
            <typename><typedef-ref name="T32khz" ref="0x7f27da648600"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="WireAdcStreamP.Alarm.Transform" loc="51(WireAdcStreamP.Alarm.Transform):../../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da6496b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f27da649e20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f27db523920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da648290"/>
            <typename><typedef-ref name="T32khz" ref="0x7f27da648600"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="WireAdcStreamP.ArbitrateReadStream" loc="23(WireAdcStreamP.ArbitrateReadStream):../../../tos/system/ArbitratedReadStreamC.nc">
      <documentation loc="10:../../../tos/system/ArbitratedReadStreamC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using&#10; ArbitratedReadStreamC in a safe way.&#10;&#10; @param width_t Width of the underlying ReadStream interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbitratedReadStreamC"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TempTestAppC.LightSensor.AdcReadStreamClientC.Msp430AdcClient" loc="43(TempTestAppC.LightSensor.AdcReadStreamClientC.Msp430AdcClient):../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.&#10; Reference voltage is enabled automatically as required by the configuration.&#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430Adc12ClientAutoRVGC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TempTestAppC.LightSensor.AdcReadStreamClientC.Msp430AdcClient.Msp430Adc12ConfAlertC" loc="42(TempTestAppC.LightSensor.AdcReadStreamClientC.Msp430AdcClient.Msp430Adc12ConfAlertC):../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
        <short> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.</short>
        <long> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.&#10; (nesC optimizes all of its code away).&#10;&#10; @author: Jan Hauer&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430Adc12ConfAlertC"/>
      </instance>
      <module/>
    </component>
    <component qname="HamamatsuS10871TsrP" loc="42:../../../tos/platforms/telosa/chips/s10871/HamamatsuS10871TsrP.nc">
      <documentation loc="34:../../../tos/platforms/telosa/chips/s10871/HamamatsuS10871TsrP.nc">
        <short>&#10; HamamatsuS10871TsrP is a driver for a photosynthetically-active&#10; radiation sensor available on the telosb platform.</short>
        <long>&#10; HamamatsuS10871TsrP is a driver for a photosynthetically-active&#10; radiation sensor available on the telosb platform. &#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2007-04-13 21:46:18 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Msp430TimerP" loc="39:../../../tos/chips/msp430/timer/Msp430TimerP.nc" abstract="" safe="">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxIV_addr" ref="0x7f27da54b890" loc="40:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </constant>
        <constant name="TxR_addr" ref="0x7f27da54bc30" loc="41:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCTL_addr" ref="0x7f27da54a020" loc="42:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIFG" ref="0x7f27da54a3a0" loc="43:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCLR" ref="0x7f27da54a720" loc="44:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIE" ref="0x7f27da54aa90" loc="45:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL0" ref="0x7f27da54ae20" loc="46:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL1" ref="0x7f27da549200" loc="47:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </constant>
        <constant name="isClockSourceAsync" ref="0x7f27da5495d0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430TimerCapComP" loc="39:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxCCTLx_addr" ref="0x7f27da50ee70" loc="40:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCCRx_addr" ref="0x7f27da50a270" loc="41:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOP" loc="39:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc" abstract="" safe="">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_in_addr" ref="0x7f27da3519f0" loc="40:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_out_addr" ref="0x7f27da351da0" loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_dir_addr" ref="0x7f27da3501a0" loc="42:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_sel_addr" ref="0x7f27da350550" loc="43:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="pin" ref="0x7f27da3508c0" loc="44:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430GpioC" loc="42:../../../tos/chips/msp430/pins/Msp430GpioC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:../../../tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmMilli32C" loc="41:../../../tos/chips/msp430/timer/AlarmMilli32C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm32khz16C" loc="41:../../../tos/chips/msp430/timer/Alarm32khz16C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzC" loc="37:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430AlarmC" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f27da15ecb0" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
          <component-ref qname="Msp430AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f27da15ecb0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430CounterC" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f27da11ba40" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
          <component-ref qname="Msp430CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f27da11ba40"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:../../../tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f27da105570" loc="55:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f27da105570"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f27da105d40" loc="56:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f27da105d40"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f27da104160" loc="57:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f27da104160"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f27da104940" loc="58:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f27da104940"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f27da104d10" loc="59:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x7f27da103540" loc="60:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x7f27da103540"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformAlarmC" loc="51:../../../tos/lib/timer/TransformAlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f27da0e46d0" loc="52:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f27da0e46d0"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f27da0e1020" loc="53:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f27da0e1020"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f27da0e1410" loc="54:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f27da0e1410"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f27da0e1bf0" loc="55:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f27da0e1bf0"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f27da0e0020" loc="56:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f27da0a5cc0" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f27da0a5cc0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:../../../tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f27da070230" loc="46:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f27da070230"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7f27da070560" loc="46:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f27da021dd0" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f27da021dd0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Uart1C" loc="42:../../../tos/chips/msp430/usart/Msp430Uart1C.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UartP" loc="41:../../../tos/chips/msp430/usart/Msp430UartP.nc" abstract="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @version $Revision: 1.7 $ $Date: 2008-06-04 05:31:15 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Usart1C" loc="40:../../../tos/chips/msp430/usart/Msp430Usart1C.nc" abstract="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
        <short>&#10; Provides an interface for USART1 on the MSP430.</short>
        <long>&#10; Provides an interface for USART1 on the MSP430.&#10;&#10; @author Vlado Handziski &#60;handisk@tkn.tu-berlin.de>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UsartShareP" loc="37:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc" abstract="" safe="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="FcfsArbiterC" loc="89:../../../tos/system/FcfsArbiterC.nc" abstract="">
      <documentation loc="69:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7f27d9e089b0" loc="89:../../../tos/system/FcfsArbiterC.nc">
          <component-ref qname="FcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="42:../../../tos/system/FcfsResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x7f27d9dfc910" loc="42:../../../tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="52:../../../tos/system/ArbiterP.nc" abstract="" safe="">
      <documentation loc="30:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0x7f27d9dde020" loc="52:../../../tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AsyncStdControlPowerManagerC" loc="67:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc" abstract="">
      <documentation loc="41:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AsyncPowerManagerP" loc="58:../../../tos/lib/power/AsyncPowerManagerP.nc" abstract="" safe="">
      <documentation loc="41:../../../tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SensirionSht11C" loc="45:../../../tos/platforms/telosa/chips/sht11/SensirionSht11C.nc" abstract="">
      <documentation loc="32:../../../tos/platforms/telosa/chips/sht11/SensirionSht11C.nc">
        <short>&#10; SensirionSht11C is a top-level access component for the Sensirion&#10; SHT11 model humidity and temperature sensor, available on the&#10; telosb platform.</short>
        <long>&#10; SensirionSht11C is a top-level access component for the Sensirion&#10; SHT11 model humidity and temperature sensor, available on the&#10; telosb platform. Because this component represents one physical&#10; device, simultaneous calls to read temperature and humidity will be&#10; arbitrated and executed in sequential order. Feel free to read both&#10; at the same time, just be aware that they'll come back&#10; sequentially.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2007-04-13 21:46:18 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="SensirionSht11ReaderP" loc="45:../../../tos/chips/sht11/SensirionSht11ReaderP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SensirionSht11LogicP" loc="53:../../../tos/chips/sht11/SensirionSht11LogicP.nc" abstract="">
      <documentation loc="35:../../../tos/chips/sht11/SensirionSht11LogicP.nc">
        <short>&#10; SensirionSht11LogicP contains the actual driver logic needed to&#10; read from the Sensirion SHT11 temperature/humidity sensor.</short>
        <long>&#10; SensirionSht11LogicP contains the actual driver logic needed to&#10; read from the Sensirion SHT11 temperature/humidity sensor. It&#10; depends on 2 underlying GeneralIO interfaces, one for the data pin&#10; and one for the clock pin, and one underlying GpioInterrupt.  It&#10; provides the HAL-level SensirionSht11 interface. It's generic, so&#10; you can instantiate it multiple times if you have more than one&#10; Sensirion SHT11 attached to a node. &#10; &#10; &#60;p>&#10; This code assumes that the MCU clock is less than 10 MHz.  If you&#10; ever run this on a faster MCU, you'll need to insert a lot of&#10; waits to keep the Sensirion happy.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:12 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430InterruptC" loc="43:../../../tos/chips/msp430/pins/Msp430InterruptC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430InterruptC.nc">
        <short>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.&#10;&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SplitControlPowerManagerC" loc="67:../../../tos/lib/power/SplitControlPowerManagerC.nc" abstract="">
      <documentation loc="41:../../../tos/lib/power/SplitControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component povides a power management policy for managing the power&#10; states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component povides a power management policy for managing the power&#10; states of non-virtualized devices.  Non-virtualized devices are shared&#10; using a parameterized Resource interface, and are powered down according&#10; to some policy whenever there are no more pending requests to that Resource.&#10; The policy implemented by this component is to delay the power down of a&#10; device by some contant factor.  Such a policy is useful whenever a device&#10; has a long wake-up latency.  The cost of waiting for the device to power&#10; up can be avoided if the device is requested again before some predetermined&#10; amount of time.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>SplitControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>AsyncStdControl&#60;/code> or&#10; &#60;code>StdControl&#60;/code> interfaces, please use either the&#10; &#60;code>AsyncStdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="PowerManagerP" loc="58:../../../tos/lib/power/PowerManagerP.nc" abstract="">
      <documentation loc="41:../../../tos/lib/power/PowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="HamamatsuS10871TsrC" loc="40:../../../tos/platforms/telosa/chips/s10871/HamamatsuS10871TsrC.nc" abstract="">
      <documentation loc="32:../../../tos/platforms/telosa/chips/s10871/HamamatsuS10871TsrC.nc">
        <short>&#10; HamamatsuS10871TsrC is a driver for a total solar radiation sensor&#10; available on the telosb platform.</short>
        <long>&#10; HamamatsuS10871TsrC is a driver for a total solar radiation sensor&#10; available on the telosb platform.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2007-04-13 21:46:18 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AdcReadClientC" loc="47:../../../tos/chips/msp430/adc12/AdcReadClientC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Adc12ClientAutoRVGC" loc="43:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.&#10; Reference voltage is enabled automatically as required by the configuration.&#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="SimpleRoundRobinArbiterC" loc="83:../../../tos/system/SimpleRoundRobinArbiterC.nc" abstract="">
      <documentation loc="62:../../../tos/system/SimpleRoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7f27d98f3850" loc="83:../../../tos/system/SimpleRoundRobinArbiterC.nc">
          <component-ref qname="SimpleRoundRobinArbiterC"/>
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="RoundRobinResourceQueueC" loc="42:../../../tos/system/RoundRobinResourceQueueC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/system/RoundRobinResourceQueueC.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.7 $&#10; @date $Date: 2010-06-29 22:07:56 $&#10;</long>
      </documentation>
      <parameters>
        <constant name="size" ref="0x7f27d98eb3b0" loc="42:../../../tos/system/RoundRobinResourceQueueC.nc">
          <component-ref qname="RoundRobinResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SimpleArbiterP" loc="49:../../../tos/system/SimpleArbiterP.nc" abstract="" safe="">
      <documentation loc="30:../../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Adc12ConfAlertC" loc="42:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
        <short> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.</short>
        <long> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.&#10; (nesC optimizes all of its code away).&#10;&#10; @author: Jan Hauer&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="AdcReadStreamClientC" loc="47:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc" abstract="">
      <documentation loc="36:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
        <short> &#10; This component virtualizes the HIL of ADC12 on MSP430.</short>
        <long> &#10; This component virtualizes the HIL of ADC12 on MSP430. A client must wire&#10; &#60;code>AdcConfigure&#60;/code> to a component that returns the client's adc&#10; configuration data.&#10;&#10; @author Jan Hauer &#10; @see  Please refer to the README.txt and TEP 101 for more information about &#10; this component and its intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="ArbitratedReadStreamC" loc="23:../../../tos/system/ArbitratedReadStreamC.nc" abstract="">
      <documentation loc="10:../../../tos/system/ArbitratedReadStreamC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using&#10; ArbitratedReadStreamC in a safe way.&#10;&#10; @param width_t Width of the underlying ReadStream interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <constant name="nClients" ref="0x7f27d971a660" loc="23:../../../tos/system/ArbitratedReadStreamC.nc">
          <component-ref qname="ArbitratedReadStreamC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
          </type-int>
        </constant>
        <typedef name="val_t" ref="0x7f27d971a9b0" loc="23:../../../tos/system/ArbitratedReadStreamC.nc">
          <component-ref qname="ArbitratedReadStreamC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f27d971a9b0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="LightRead" ref="0x7f27da61aa30" loc="14:TempTestC.nc">
      <component-ref qname="TempTestC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LightRead" scoped="" ref="0x7f27da61aa30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f27da617670"/>
        <function-ref name="readDone" scoped="" ref="0x7f27da617af0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f27da635640" loc="8:TempTestC.nc">
      <component-ref qname="TempTestC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f27da635640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f27da6359c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HumidityRead" ref="0x7f27da616300" loc="15:TempTestC.nc">
      <component-ref qname="TempTestC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HumidityRead" scoped="" ref="0x7f27da616300"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f27da614020"/>
        <function-ref name="readDone" scoped="" ref="0x7f27da6144a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f27da61c8d0" loc="10:TempTestC.nc">
      <component-ref qname="TempTestC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f27da61c8d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f27da61cc50"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f27da61cde0"/>
        <function-ref name="led1On" scoped="" ref="0x7f27da627020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f27da6271b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f27da627340"/>
        <function-ref name="get" scoped="" ref="0x7f27da6274d0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f27da627660"/>
        <function-ref name="led2Off" scoped="" ref="0x7f27da627ca0"/>
        <function-ref name="set" scoped="" ref="0x7f27da6277f0"/>
        <function-ref name="led0On" scoped="" ref="0x7f27da627980"/>
        <function-ref name="led2On" scoped="" ref="0x7f27da627b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TempRead" ref="0x7f27da61b1b0" loc="13:TempTestC.nc">
      <component-ref qname="TempTestC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TempRead" scoped="" ref="0x7f27da61b1b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f27da61bda0"/>
        <function-ref name="readDone" scoped="" ref="0x7f27da61a260"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f27da62b770" loc="9:TempTestC.nc">
      <component-ref qname="TempTestC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f27da62b770"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da6496b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f27da649e20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f27da62ac40"/>
        <function-ref name="fired" scoped="" ref="0x7f27da6361e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f27da62a020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f27da636ae0"/>
        <function-ref name="getdt" scoped="" ref="0x7f27da628590"/>
        <function-ref name="gett0" scoped="" ref="0x7f27da628110"/>
        <function-ref name="isRunning" scoped="" ref="0x7f27da636660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f27da637390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f27da62a630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f27da637860"/>
        <function-ref name="stop" scoped="" ref="0x7f27da637d30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7f27da5f9320" loc="58:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7f27da5f9320"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f27da5f96a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f27da64bdc0" loc="57:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f27da64bdc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f27da5fd180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f27da5f81e0" loc="42:../../../tos/platforms/telosa/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f27da5f81e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f27da5f8560"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x7f27da5f41f0" loc="6:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteInit" scoped="" ref="0x7f27da5f41f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f27da5f4570"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f27da5f53c0" loc="4:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f27da5f53c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f27da5f5740"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteClockInit" ref="0x7f27da5f5ad0" loc="5:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7f27da5f5ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f27da5f5e50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LedsInit" ref="0x7f27da5f48d0" loc="7:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LedsInit" scoped="" ref="0x7f27da5f48d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f27da5f4c50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f27da5ee510" loc="2:../../../tos/platforms/telosb/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f27da5ee510"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f27da5ee890"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MoteClockInit" ref="0x7f27da5f7900" loc="39:../../../tos/platforms/telosb/MoteClockC.nc">
      <component-ref qname="MoteClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7f27da5f7900"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f27da5f7c80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7f27da5cede0" loc="40:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f27da5cede0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f27da5d2c70"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f27da5d2310"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f27da5d24a0"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f27da5d2630"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f27da5d2180"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f27da5d27c0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f27da5d2950"/>
        <function-ref name="initClocks" scoped="" ref="0x7f27da5d2ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f27da5d6840" loc="39:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f27da5d6840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f27da5d6bc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7f27da5bea70" loc="46:../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f27da5bea70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f27da5bc980"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f27da5bc020"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f27da5bc1b0"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f27da5bc340"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f27da5bedf0"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f27da5bc4d0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f27da5bc660"/>
        <function-ref name="initClocks" scoped="" ref="0x7f27da5bc7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x7f27da5bccc0" loc="47:../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f27da5bccc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f27da5bb0a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f27da5be3c0" loc="45:../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f27da5be3c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f27da5be740"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA2" ref="0x7f27da57fd70" loc="42:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA2" scoped="" ref="0x7f27da57fd70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f27da577180"/>
        <function-ref name="getControl" scoped="" ref="0x7f27da577310"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27da5774a0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f27da577630"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f27da5777c0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27da577950"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f27da577ae0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f27da577c70"/>
        <function-ref name="setControl" scoped="" ref="0x7f27da577e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB0" ref="0x7f27da5668c0" loc="51:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB0" scoped="" ref="0x7f27da5668c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f27da566c40"/>
        <function-ref name="getControl" scoped="" ref="0x7f27da566dd0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27da565020"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f27da5651b0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f27da565340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27da5654d0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f27da565660"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f27da5657f0"/>
        <function-ref name="setControl" scoped="" ref="0x7f27da565980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA1" ref="0x7f27da56e020" loc="47:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA1" scoped="" ref="0x7f27da56e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da56e3a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f27da56e530"/>
        <function-ref name="captured" scoped="" ref="0x7f27da56e6c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da56e850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da56e9e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f27da56eb70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB3" ref="0x7f27da552020" loc="68:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB3" scoped="" ref="0x7f27da552020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da5523a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f27da552530"/>
        <function-ref name="captured" scoped="" ref="0x7f27da5526c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da552850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da5529e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f27da552b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA1" ref="0x7f27da575250" loc="44:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA1" scoped="" ref="0x7f27da575250"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da5755d0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f27da575760"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f27da5758f0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f27da575a80"/>
        <function-ref name="fired" scoped="" ref="0x7f27da575c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB3" ref="0x7f27da55a700" loc="61:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB3" scoped="" ref="0x7f27da55a700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da55aa80"/>
        <function-ref name="setEvent" scoped="" ref="0x7f27da55ac10"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f27da55ada0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f27da559020"/>
        <function-ref name="fired" scoped="" ref="0x7f27da5591b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB6" ref="0x7f27da54f020" loc="71:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB6" scoped="" ref="0x7f27da54f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da54f3a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f27da54f530"/>
        <function-ref name="captured" scoped="" ref="0x7f27da54f6c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da54f850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da54f9e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f27da54fb70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB4" ref="0x7f27da561d70" loc="55:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB4" scoped="" ref="0x7f27da561d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f27da560180"/>
        <function-ref name="getControl" scoped="" ref="0x7f27da560310"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27da5604a0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f27da560630"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f27da5607c0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27da560950"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f27da560ae0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f27da560c70"/>
        <function-ref name="setControl" scoped="" ref="0x7f27da560e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA0" ref="0x7f27da578380" loc="40:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA0" scoped="" ref="0x7f27da578380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f27da578700"/>
        <function-ref name="getControl" scoped="" ref="0x7f27da578890"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27da578a20"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f27da578bb0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f27da578d40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27da580020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f27da5801b0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f27da580340"/>
        <function-ref name="setControl" scoped="" ref="0x7f27da5804d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB1" ref="0x7f27da555160" loc="66:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB1" scoped="" ref="0x7f27da555160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da5554e0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f27da555670"/>
        <function-ref name="captured" scoped="" ref="0x7f27da555800"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da555990"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da555b20"/>
        <function-ref name="setEdge" scoped="" ref="0x7f27da555cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB1" ref="0x7f27da55ca20" loc="59:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB1" scoped="" ref="0x7f27da55ca20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da55cda0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f27da55b020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f27da55b1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f27da55b340"/>
        <function-ref name="fired" scoped="" ref="0x7f27da55b4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB1" ref="0x7f27da565d70" loc="52:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB1" scoped="" ref="0x7f27da565d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f27da564310"/>
        <function-ref name="getControl" scoped="" ref="0x7f27da5644a0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27da564630"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f27da5647c0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f27da564950"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27da564ae0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f27da564c70"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f27da564e00"/>
        <function-ref name="setControl" scoped="" ref="0x7f27da563020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA2" ref="0x7f27da568020" loc="48:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA2" scoped="" ref="0x7f27da568020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da5683a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f27da568530"/>
        <function-ref name="captured" scoped="" ref="0x7f27da5686c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da568850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da5689e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f27da568b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB4" ref="0x7f27da551020" loc="69:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB4" scoped="" ref="0x7f27da551020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da5513a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f27da551530"/>
        <function-ref name="captured" scoped="" ref="0x7f27da5516c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da551850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da5519e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f27da551b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB2" ref="0x7f27da563410" loc="53:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB2" scoped="" ref="0x7f27da563410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f27da563790"/>
        <function-ref name="getControl" scoped="" ref="0x7f27da563920"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27da563ab0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f27da563c40"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f27da563dd0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27da562020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f27da5621b0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f27da562340"/>
        <function-ref name="setControl" scoped="" ref="0x7f27da5624d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA2" ref="0x7f27da574020" loc="45:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA2" scoped="" ref="0x7f27da574020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da5743a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f27da574530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f27da5746c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f27da574850"/>
        <function-ref name="fired" scoped="" ref="0x7f27da5749e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerA" ref="0x7f27da581970" loc="39:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerA" scoped="" ref="0x7f27da581970"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27da581cf0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f27da581e80"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27da589030"/>
        <function-ref name="get" scoped="" ref="0x7f27da5891c0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27da589350"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da5894e0"/>
        <function-ref name="getMode" scoped="" ref="0x7f27da589670"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da589800"/>
        <function-ref name="overflow" scoped="" ref="0x7f27da589990"/>
        <function-ref name="setMode" scoped="" ref="0x7f27da589b20"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f27da589cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB4" ref="0x7f27da559570" loc="62:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB4" scoped="" ref="0x7f27da559570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da5598f0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f27da559a80"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f27da559c10"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f27da559da0"/>
        <function-ref name="fired" scoped="" ref="0x7f27da558020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA1" ref="0x7f27da5808c0" loc="41:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA1" scoped="" ref="0x7f27da5808c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f27da580c40"/>
        <function-ref name="getControl" scoped="" ref="0x7f27da580dd0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27da57f020"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f27da57f1b0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f27da57f340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27da57f4d0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f27da57f660"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f27da57f7f0"/>
        <function-ref name="setControl" scoped="" ref="0x7f27da57f980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB5" ref="0x7f27da55f220" loc="56:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB5" scoped="" ref="0x7f27da55f220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f27da55f5a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f27da55f730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27da55f8c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f27da55fa50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f27da55fbe0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27da55fd70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f27da55e020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f27da55e1b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f27da55e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA0" ref="0x7f27da56f020" loc="46:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA0" scoped="" ref="0x7f27da56f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da56f3a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f27da56f530"/>
        <function-ref name="captured" scoped="" ref="0x7f27da56f6c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da56f850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da56f9e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f27da56fb70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB2" ref="0x7f27da5530c0" loc="67:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB2" scoped="" ref="0x7f27da5530c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da553440"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f27da5535d0"/>
        <function-ref name="captured" scoped="" ref="0x7f27da553760"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da5538f0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da553a80"/>
        <function-ref name="setEdge" scoped="" ref="0x7f27da553c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA0" ref="0x7f27da570480" loc="43:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA0" scoped="" ref="0x7f27da570480"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da570800"/>
        <function-ref name="setEvent" scoped="" ref="0x7f27da570990"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f27da570b20"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f27da570cb0"/>
        <function-ref name="fired" scoped="" ref="0x7f27da570e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB2" ref="0x7f27da55b890" loc="60:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB2" scoped="" ref="0x7f27da55b890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da55bc10"/>
        <function-ref name="setEvent" scoped="" ref="0x7f27da55bda0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f27da55a020"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f27da55a1b0"/>
        <function-ref name="fired" scoped="" ref="0x7f27da55a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB5" ref="0x7f27da550020" loc="70:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB5" scoped="" ref="0x7f27da550020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da5503a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f27da550530"/>
        <function-ref name="captured" scoped="" ref="0x7f27da5506c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da550850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da5509e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f27da550b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB3" ref="0x7f27da5628c0" loc="54:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB3" scoped="" ref="0x7f27da5628c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f27da562c40"/>
        <function-ref name="getControl" scoped="" ref="0x7f27da562dd0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27da561020"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f27da5611b0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f27da561340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27da5614d0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f27da561660"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f27da5617f0"/>
        <function-ref name="setControl" scoped="" ref="0x7f27da561980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerB" ref="0x7f27da567020" loc="50:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerB" scoped="" ref="0x7f27da567020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27da5673a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f27da567530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27da5676c0"/>
        <function-ref name="get" scoped="" ref="0x7f27da567850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27da5679e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da567b70"/>
        <function-ref name="getMode" scoped="" ref="0x7f27da567d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da566020"/>
        <function-ref name="overflow" scoped="" ref="0x7f27da5661b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f27da566340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f27da5664d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB5" ref="0x7f27da5583e0" loc="63:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB5" scoped="" ref="0x7f27da5583e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da558760"/>
        <function-ref name="setEvent" scoped="" ref="0x7f27da5588f0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f27da558a80"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f27da558c10"/>
        <function-ref name="fired" scoped="" ref="0x7f27da558da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB0" ref="0x7f27da5561f0" loc="65:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB0" scoped="" ref="0x7f27da5561f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da556570"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f27da556700"/>
        <function-ref name="captured" scoped="" ref="0x7f27da556890"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da556a20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da556bb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f27da556d40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB6" ref="0x7f27da5571f0" loc="64:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB6" scoped="" ref="0x7f27da5571f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da557770"/>
        <function-ref name="setEvent" scoped="" ref="0x7f27da557900"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f27da557a90"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f27da557c20"/>
        <function-ref name="fired" scoped="" ref="0x7f27da557db0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB0" ref="0x7f27da55dbb0" loc="58:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB0" scoped="" ref="0x7f27da55dbb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da55c020"/>
        <function-ref name="setEvent" scoped="" ref="0x7f27da55c1b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f27da55c340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f27da55c4d0"/>
        <function-ref name="fired" scoped="" ref="0x7f27da55c660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB6" ref="0x7f27da55e730" loc="57:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB6" scoped="" ref="0x7f27da55e730"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f27da55eab0"/>
        <function-ref name="getControl" scoped="" ref="0x7f27da55ec40"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27da55edd0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f27da55d020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f27da55d1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27da55d340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f27da55d4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f27da55d660"/>
        <function-ref name="setControl" scoped="" ref="0x7f27da55d7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7f27da517aa0" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7f27da517aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f27da517e20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7f27da517450" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f27da517450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f27da5177d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7f27da516120" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7f27da516120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f27da5164a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7f27da518d80" loc="51:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f27da518d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f27da517180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f27da519540" loc="50:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f27da519540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27da5198c0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f27da519a50"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27da519be0"/>
        <function-ref name="get" scoped="" ref="0x7f27da519d70"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27da518020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da5181b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f27da518340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da5184d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f27da518660"/>
        <function-ref name="setMode" scoped="" ref="0x7f27da5187f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f27da518980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7f27da510940" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7f27da510940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f27da510cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7f27da5102f0" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f27da5102f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f27da510670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7f27da50f020" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7f27da50f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f27da50f3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7f27da511bf0" loc="51:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f27da511bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f27da510020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f27da5123e0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f27da5123e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27da512760"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f27da5128f0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27da512a80"/>
        <function-ref name="get" scoped="" ref="0x7f27da512c10"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27da512da0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da511020"/>
        <function-ref name="getMode" scoped="" ref="0x7f27da5111b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da511340"/>
        <function-ref name="overflow" scoped="" ref="0x7f27da5114d0"/>
        <function-ref name="setMode" scoped="" ref="0x7f27da511660"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f27da5117f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f27da4c4a90" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f27da4c4a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da4c4e10"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f27da4c3020"/>
        <function-ref name="captured" scoped="" ref="0x7f27da4c31b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da4c3340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da4c34d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f27da4c3660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f27da50b9d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f27da50b9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f27da50bd50"/>
        <function-ref name="getControl" scoped="" ref="0x7f27da4c5020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27da4c51b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f27da4c5340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f27da4c54d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27da4c5660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f27da4c57f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f27da4c5980"/>
        <function-ref name="setControl" scoped="" ref="0x7f27da4c5b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f27da4c1020" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f27da4c1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f27da4c13a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f27da4c5de0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f27da4c5de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da4c4180"/>
        <function-ref name="setEvent" scoped="" ref="0x7f27da4c4310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f27da4c44a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f27da4c4630"/>
        <function-ref name="fired" scoped="" ref="0x7f27da4c47c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f27da4c3930" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f27da4c3930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27da4c3cb0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f27da4c3e40"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27da4c2020"/>
        <function-ref name="get" scoped="" ref="0x7f27da4c21b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27da4c2340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da4c24d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f27da4c2660"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da4c27f0"/>
        <function-ref name="overflow" scoped="" ref="0x7f27da4c2980"/>
        <function-ref name="setMode" scoped="" ref="0x7f27da4c2b10"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f27da4c2ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f27da4bb160" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f27da4bb160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da4bb4e0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f27da4bb670"/>
        <function-ref name="captured" scoped="" ref="0x7f27da4bb800"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da4bb990"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da4bbb20"/>
        <function-ref name="setEdge" scoped="" ref="0x7f27da4bbcb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f27da4bd020" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f27da4bd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f27da4bd3a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f27da4bd530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27da4bd6c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f27da4bd850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f27da4bd9e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27da4bdb70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f27da4bdd00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f27da4bc020"/>
        <function-ref name="setControl" scoped="" ref="0x7f27da4bc1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f27da4b97a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f27da4b97a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f27da4b9b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f27da4bc480" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f27da4bc480"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da4bc800"/>
        <function-ref name="setEvent" scoped="" ref="0x7f27da4bc990"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f27da4bcb20"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f27da4bccb0"/>
        <function-ref name="fired" scoped="" ref="0x7f27da4bce40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f27da4ba020" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f27da4ba020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27da4ba3a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f27da4ba530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27da4ba6c0"/>
        <function-ref name="get" scoped="" ref="0x7f27da4ba850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27da4ba9e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da4bab70"/>
        <function-ref name="getMode" scoped="" ref="0x7f27da4bad00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da4b9020"/>
        <function-ref name="overflow" scoped="" ref="0x7f27da4b91b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f27da4b9340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f27da4b94d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f27da4b47a0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f27da4b47a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da4b4b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f27da4b4cb0"/>
        <function-ref name="captured" scoped="" ref="0x7f27da4b4e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da4b3020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da4b31b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f27da4b3340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f27da4b66d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f27da4b66d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f27da4b6a50"/>
        <function-ref name="getControl" scoped="" ref="0x7f27da4b6be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27da4b6d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f27da4b5020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f27da4b51b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27da4b5340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f27da4b54d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f27da4b5660"/>
        <function-ref name="setControl" scoped="" ref="0x7f27da4b57f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f27da4b2c50" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f27da4b2c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f27da4b0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f27da4b5ac0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f27da4b5ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da4b5e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f27da4b4020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f27da4b41b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f27da4b4340"/>
        <function-ref name="fired" scoped="" ref="0x7f27da4b44d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f27da4b3610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f27da4b3610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27da4b3990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f27da4b3b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27da4b3cb0"/>
        <function-ref name="get" scoped="" ref="0x7f27da4b3e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27da4b2020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da4b21b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f27da4b2340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da4b24d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f27da4b2660"/>
        <function-ref name="setMode" scoped="" ref="0x7f27da4b27f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f27da4b2980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f27da4accb0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f27da4accb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da4ab0a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f27da4ab230"/>
        <function-ref name="captured" scoped="" ref="0x7f27da4ab3c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da4ab550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da4ab6e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f27da4ab870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f27da4aeb30" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f27da4aeb30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f27da4ad020"/>
        <function-ref name="getControl" scoped="" ref="0x7f27da4ad1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27da4ad340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f27da4ad4d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f27da4ad660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27da4ad7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f27da4ad980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f27da4adb10"/>
        <function-ref name="setControl" scoped="" ref="0x7f27da4adca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f27da4a92f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f27da4a92f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f27da4a9670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f27da4ac020" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f27da4ac020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da4ac3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f27da4ac530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f27da4ac6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f27da4ac850"/>
        <function-ref name="fired" scoped="" ref="0x7f27da4ac9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f27da4abb40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f27da4abb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27da4aa020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f27da4aa1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27da4aa340"/>
        <function-ref name="get" scoped="" ref="0x7f27da4aa4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27da4aa660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da4aa7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f27da4aa980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da4aab10"/>
        <function-ref name="overflow" scoped="" ref="0x7f27da4aaca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f27da4aae30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f27da4a9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f27da4a42f0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f27da4a42f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da4a4670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f27da4a4800"/>
        <function-ref name="captured" scoped="" ref="0x7f27da4a4990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da4a4b20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da4a4cb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f27da4a4e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f27da4a6220" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f27da4a6220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f27da4a65a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f27da4a6730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27da4a68c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f27da4a6a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f27da4a6be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27da4a6d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f27da4a5020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f27da4a51b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f27da4a5340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f27da4a27a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f27da4a27a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f27da4a2b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f27da4a5610" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f27da4a5610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da4a5990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f27da4a5b20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f27da4a5cb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f27da4a5e40"/>
        <function-ref name="fired" scoped="" ref="0x7f27da4a4020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f27da4a3160" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f27da4a3160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27da4a34e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f27da4a3670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27da4a3800"/>
        <function-ref name="get" scoped="" ref="0x7f27da4a3990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27da4a3b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da4a3cb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f27da4a3e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da4a2020"/>
        <function-ref name="overflow" scoped="" ref="0x7f27da4a21b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f27da4a2340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f27da4a24d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f27da49c7a0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f27da49c7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da49cb20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f27da49ccb0"/>
        <function-ref name="captured" scoped="" ref="0x7f27da49ce40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da49b020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da49b1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f27da49b340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f27da49e6d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f27da49e6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f27da49ea50"/>
        <function-ref name="getControl" scoped="" ref="0x7f27da49ebe0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27da49ed70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f27da49d020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f27da49d1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27da49d340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f27da49d4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f27da49d660"/>
        <function-ref name="setControl" scoped="" ref="0x7f27da49d7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f27da49ac50" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f27da49ac50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f27da499020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f27da49dac0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f27da49dac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da49de40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f27da49c020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f27da49c1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f27da49c340"/>
        <function-ref name="fired" scoped="" ref="0x7f27da49c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f27da49b610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f27da49b610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27da49b990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f27da49bb20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27da49bcb0"/>
        <function-ref name="get" scoped="" ref="0x7f27da49be40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27da49a020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da49a1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f27da49a340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da49a4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f27da49a660"/>
        <function-ref name="setMode" scoped="" ref="0x7f27da49a7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f27da49a980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f27da495cb0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f27da495cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da4940a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f27da494230"/>
        <function-ref name="captured" scoped="" ref="0x7f27da4943c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da494550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da4946e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f27da494870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f27da497b30" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f27da497b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f27da496020"/>
        <function-ref name="getControl" scoped="" ref="0x7f27da4961b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27da496340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f27da4964d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f27da496660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27da4967f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f27da496980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f27da496b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f27da496ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f27da4922f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f27da4922f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f27da492670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f27da495020" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f27da495020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da4953a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f27da495530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f27da4956c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f27da495850"/>
        <function-ref name="fired" scoped="" ref="0x7f27da4959e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f27da494b40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f27da494b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27da493020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f27da4931b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27da493340"/>
        <function-ref name="get" scoped="" ref="0x7f27da4934d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27da493660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da4937f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f27da493980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da493b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f27da493ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f27da493e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f27da492020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f27da48c2f0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f27da48c2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da48c670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f27da48c800"/>
        <function-ref name="captured" scoped="" ref="0x7f27da48c990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da48cb20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da48ccb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f27da48ce40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f27da48f220" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f27da48f220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f27da48f5a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f27da48f730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27da48f8c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f27da48fa50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f27da48fbe0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27da48fd70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f27da48d020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f27da48d1b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f27da48d340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f27da48a7a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f27da48a7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f27da48ab20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f27da48d610" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f27da48d610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da48d990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f27da48db20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f27da48dcb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f27da48de40"/>
        <function-ref name="fired" scoped="" ref="0x7f27da48c020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f27da48b160" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f27da48b160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27da48b4e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f27da48b670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27da48b800"/>
        <function-ref name="get" scoped="" ref="0x7f27da48b990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27da48bb20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da48bcb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f27da48be40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da48a020"/>
        <function-ref name="overflow" scoped="" ref="0x7f27da48a1b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f27da48a340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f27da48a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f27da4857a0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f27da4857a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da485b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f27da485cb0"/>
        <function-ref name="captured" scoped="" ref="0x7f27da485e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da484020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da4841b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f27da484340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f27da4876d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f27da4876d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f27da487a50"/>
        <function-ref name="getControl" scoped="" ref="0x7f27da487be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27da487d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f27da486020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f27da4861b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27da486340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f27da4864d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f27da486660"/>
        <function-ref name="setControl" scoped="" ref="0x7f27da4867f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f27da483c50" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f27da483c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f27da482020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f27da486ac0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f27da486ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da486e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f27da485020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f27da4851b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f27da485340"/>
        <function-ref name="fired" scoped="" ref="0x7f27da4854d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f27da484610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f27da484610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27da484990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f27da484b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27da484cb0"/>
        <function-ref name="get" scoped="" ref="0x7f27da484e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27da483020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da4831b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f27da483340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da4834d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f27da483660"/>
        <function-ref name="setMode" scoped="" ref="0x7f27da4837f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f27da483980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f27da47dcb0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f27da47dcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da47c0a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f27da47c230"/>
        <function-ref name="captured" scoped="" ref="0x7f27da47c3c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da47c550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da47c6e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f27da47c870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f27da480b30" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f27da480b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f27da47e020"/>
        <function-ref name="getControl" scoped="" ref="0x7f27da47e1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27da47e340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f27da47e4d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f27da47e660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27da47e7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f27da47e980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f27da47eb10"/>
        <function-ref name="setControl" scoped="" ref="0x7f27da47eca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f27da47a2f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f27da47a2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f27da47a670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f27da47d020" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f27da47d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da47d3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f27da47d530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f27da47d6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f27da47d850"/>
        <function-ref name="fired" scoped="" ref="0x7f27da47d9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f27da47cb40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f27da47cb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27da47b020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f27da47b1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27da47b340"/>
        <function-ref name="get" scoped="" ref="0x7f27da47b4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27da47b660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da47b7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f27da47b980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da47bb10"/>
        <function-ref name="overflow" scoped="" ref="0x7f27da47bca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f27da47be30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f27da47a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB1" ref="0x7f27da474240" loc="7:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB1" scoped="" ref="0x7f27da474240"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f27da4745c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA0" ref="0x7f27da478a90" loc="4:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA0" scoped="" ref="0x7f27da478a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f27da478e10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA1" ref="0x7f27da475260" loc="5:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA1" scoped="" ref="0x7f27da475260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f27da4755e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB0" ref="0x7f27da4759f0" loc="6:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB0" scoped="" ref="0x7f27da4759f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f27da475d70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x7f27da75c4c0" loc="55:../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f27da75c4c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f27da75c840"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x7f27daa703b0" loc="51:../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7f27daa703b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f27daa70730"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f27daa708c0"/>
        <function-ref name="sleep" scoped="" ref="0x7f27daa70a50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x7f27da898bc0" loc="52:../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerState" scoped="" ref="0x7f27da898bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f27da9d4020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430ClockInit" ref="0x7f27da5d4b40" loc="39:../../../tos/platforms/telosb/MoteClockP.nc">
      <component-ref qname="MoteClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f27da5d4b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f27da43db10"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f27da43d1b0"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f27da43d340"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f27da43d4d0"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f27da43d020"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f27da43d660"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f27da43d7f0"/>
        <function-ref name="initClocks" scoped="" ref="0x7f27da43d980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7f27da431dc0" loc="60:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7f27da431dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f27da430180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f27da43e590" loc="57:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f27da43e590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f27da43e910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x7f27da4316c0" loc="59:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PlatformInit" scoped="" ref="0x7f27da4316c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f27da431a40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x7f27da43ec00" loc="58:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f27da43ec00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f27da431020"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f27da4311b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f27da431340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f27dab48410" loc="48:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7f27dab48410"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f27dab48790"/>
        <function-ref name="runTask" scoped="" ref="0x7f27dab48920"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f27daad93a0" loc="47:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f27daad93a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f27daad9720"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f27daad98b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f27daad9a40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f27da682040" loc="56:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7f27da682040"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f27da6823c0"/>
        <function-ref name="runTask" scoped="" ref="0x7f27da682550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x7f27da67e490" loc="57:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7f27da67e490"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f27da67e810"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f27da67e9a0"/>
        <function-ref name="sleep" scoped="" ref="0x7f27da67eb30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f27da684140" loc="55:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f27da684140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f27da6844c0"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f27da684650"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f27da6847e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f27da5fe590" loc="46:../../../tos/system/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f27da5fe590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f27da5fe910"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f27da5feaa0"/>
        <function-ref name="led1On" scoped="" ref="0x7f27da5fec30"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f27da5fedc0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f27da425020"/>
        <function-ref name="get" scoped="" ref="0x7f27da4251b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f27da425340"/>
        <function-ref name="led2Off" scoped="" ref="0x7f27da425980"/>
        <function-ref name="set" scoped="" ref="0x7f27da4254d0"/>
        <function-ref name="led0On" scoped="" ref="0x7f27da425660"/>
        <function-ref name="led2On" scoped="" ref="0x7f27da4257f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x7f27da4197b0" loc="50:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7f27da4197b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da419b30"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da419cc0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da419e50"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da41f020"/>
        <function-ref name="get" scoped="" ref="0x7f27da41f1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da41f340"/>
        <function-ref name="set" scoped="" ref="0x7f27da41f4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f27da41f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f27da4248d0" loc="46:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f27da4248d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f27da424c50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x7f27da41f980" loc="51:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7f27da41f980"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da41fd00"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da41e020"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da41e1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da41e340"/>
        <function-ref name="get" scoped="" ref="0x7f27da41e4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da41e660"/>
        <function-ref name="set" scoped="" ref="0x7f27da41e7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f27da41e980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f27da421020" loc="47:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f27da421020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f27da4213a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f27da421530"/>
        <function-ref name="led1On" scoped="" ref="0x7f27da4216c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f27da421850"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f27da4219e0"/>
        <function-ref name="get" scoped="" ref="0x7f27da421b70"/>
        <function-ref name="led1Off" scoped="" ref="0x7f27da421d00"/>
        <function-ref name="led2Off" scoped="" ref="0x7f27da4204d0"/>
        <function-ref name="set" scoped="" ref="0x7f27da420020"/>
        <function-ref name="led0On" scoped="" ref="0x7f27da4201b0"/>
        <function-ref name="led2On" scoped="" ref="0x7f27da420340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x7f27da41eca0" loc="52:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7f27da41eca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da4180a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da418230"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da4183c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da418550"/>
        <function-ref name="get" scoped="" ref="0x7f27da4186e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da418870"/>
        <function-ref name="set" scoped="" ref="0x7f27da418a00"/>
        <function-ref name="clr" scoped="" ref="0x7f27da418b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x7f27da3fc360" loc="41:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7f27da3fc360"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3fc6e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3fc870"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3fca00"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3fcb90"/>
        <function-ref name="get" scoped="" ref="0x7f27da3fcd20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3fb020"/>
        <function-ref name="set" scoped="" ref="0x7f27da3fb1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3fb340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x7f27da3fb6a0" loc="42:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7f27da3fb6a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3fba20"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3fbbb0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3fbd40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3fa020"/>
        <function-ref name="get" scoped="" ref="0x7f27da3fa1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3fa340"/>
        <function-ref name="set" scoped="" ref="0x7f27da3fa4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3fa660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x7f27da3f9c40" loc="44:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f27da3f9c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f27da3f8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x7f27da3fa9c0" loc="43:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7f27da3fa9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3fad40"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3f9020"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3f91b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3f9340"/>
        <function-ref name="get" scoped="" ref="0x7f27da3f94d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3f9660"/>
        <function-ref name="set" scoped="" ref="0x7f27da3f97f0"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3f9980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7f27da3e3020" loc="53:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7f27da3e3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3e33a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3e3530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3e36c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3e3850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3e39e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3e3b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3e3d00"/>
        <function-ref name="get" scoped="" ref="0x7f27da3e2020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3e21b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3e2340"/>
        <function-ref name="set" scoped="" ref="0x7f27da3e24d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3e2660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3e27f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da3e2a80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3e2c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7f27da3ce020" loc="66:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7f27da3ce020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3ce3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3ce530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3ce6c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3ce850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3ce9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3ceb70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3ced00"/>
        <function-ref name="get" scoped="" ref="0x7f27da3cd020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3cd1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3cd340"/>
        <function-ref name="set" scoped="" ref="0x7f27da3cd4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3cd660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3cd7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da3cda80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3cdc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SDA" ref="0x7f27da385560" loc="145:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SDA" scoped="" ref="0x7f27da385560"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3858e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da385a70"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da385c00"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da385d90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da384020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3841b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da384340"/>
        <function-ref name="get" scoped="" ref="0x7f27da3844d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da384660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3847f0"/>
        <function-ref name="set" scoped="" ref="0x7f27da384980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da384b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da384ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da383020"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3831b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC6" ref="0x7f27da360570" loc="165:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC6" scoped="" ref="0x7f27da360570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3608f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da360a80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da360c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da360da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da35f020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da35f1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da35f340"/>
        <function-ref name="get" scoped="" ref="0x7f27da35f4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da35f660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da35f7f0"/>
        <function-ref name="set" scoped="" ref="0x7f27da35f980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da35fb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da35fca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da35e020"/>
        <function-ref name="clr" scoped="" ref="0x7f27da35e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI0" ref="0x7f27da383580" loc="146:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI0" scoped="" ref="0x7f27da383580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da383900"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da383a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da383c20"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da383db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da382020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3821b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da382340"/>
        <function-ref name="get" scoped="" ref="0x7f27da3824d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da382660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3827f0"/>
        <function-ref name="set" scoped="" ref="0x7f27da382980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da382b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da382ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da381020"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3811b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port30" ref="0x7f27da3ca020" loc="71:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port30" scoped="" ref="0x7f27da3ca020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3ca3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3ca530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3ca6c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3ca850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3ca9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3cab70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3cad00"/>
        <function-ref name="get" scoped="" ref="0x7f27da3c9020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3c91b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3c9340"/>
        <function-ref name="set" scoped="" ref="0x7f27da3c94d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3c9660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3c97f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da3c9a80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3c9c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port42" ref="0x7f27da3b6200" loc="84:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port42" scoped="" ref="0x7f27da3b6200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3b6580"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3b6710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3b68a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3b6a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3b6bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3b6d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3b5020"/>
        <function-ref name="get" scoped="" ref="0x7f27da3b51b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3b5340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3b54d0"/>
        <function-ref name="set" scoped="" ref="0x7f27da3b5660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3b57f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3b5980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da3b5c10"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3b5da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port54" ref="0x7f27da3a1200" loc="97:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port54" scoped="" ref="0x7f27da3a1200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3a1580"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3a1710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3a18a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3a1a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3a1bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3a1d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3a0020"/>
        <function-ref name="get" scoped="" ref="0x7f27da3a01b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3a0340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3a04d0"/>
        <function-ref name="set" scoped="" ref="0x7f27da3a0660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3a07f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3a0980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da3a0c10"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3a0da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port64" ref="0x7f27da391200" loc="108:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port64" scoped="" ref="0x7f27da391200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da391580"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da391710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3918a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da391a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da391bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da391d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da390020"/>
        <function-ref name="get" scoped="" ref="0x7f27da3901b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da390340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3904d0"/>
        <function-ref name="set" scoped="" ref="0x7f27da390660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3907f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da390980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da390c10"/>
        <function-ref name="clr" scoped="" ref="0x7f27da390da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD0" ref="0x7f27da37d580" loc="149:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD0" scoped="" ref="0x7f27da37d580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da37d900"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da37da90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da37dc20"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da37ddb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da37c020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da37c1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da37c340"/>
        <function-ref name="get" scoped="" ref="0x7f27da37c4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da37c660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da37c7f0"/>
        <function-ref name="set" scoped="" ref="0x7f27da37c980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da37cb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da37cca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da37b020"/>
        <function-ref name="clr" scoped="" ref="0x7f27da37b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC0" ref="0x7f27da36c570" loc="159:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC0" scoped="" ref="0x7f27da36c570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da36c8f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da36ca80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da36cc10"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da36cda0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da36b020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da36b1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da36b340"/>
        <function-ref name="get" scoped="" ref="0x7f27da36b4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da36b660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da36b7f0"/>
        <function-ref name="set" scoped="" ref="0x7f27da36b980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da36bb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da36bca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da36a020"/>
        <function-ref name="clr" scoped="" ref="0x7f27da36a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSIN" ref="0x7f27da358580" loc="171:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSIN" scoped="" ref="0x7f27da358580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da358900"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da358a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da358c20"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da358db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da357020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3571b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da357340"/>
        <function-ref name="get" scoped="" ref="0x7f27da3574d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da357660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3577f0"/>
        <function-ref name="set" scoped="" ref="0x7f27da357980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da357b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da357ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da356020"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3561b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7f27da3dd020" loc="56:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7f27da3dd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3dd3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3dd530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3dd6c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3dd850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3dd9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3ddb70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3ddd00"/>
        <function-ref name="get" scoped="" ref="0x7f27da3dc020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3dc1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3dc340"/>
        <function-ref name="set" scoped="" ref="0x7f27da3dc4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3dc660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3dc7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da3dca80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3dcc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD0" ref="0x7f27da37b580" loc="150:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD0" scoped="" ref="0x7f27da37b580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da37b900"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da37ba90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da37bc20"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da37bdb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da379020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3791b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da379340"/>
        <function-ref name="get" scoped="" ref="0x7f27da3794d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da379660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3797f0"/>
        <function-ref name="set" scoped="" ref="0x7f27da379980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da379b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da379ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da378020"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3781b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7f27da3d8020" loc="61:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7f27da3d8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3d83a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3d8530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3d86c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3d8850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3d89e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3d8b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3d8d00"/>
        <function-ref name="get" scoped="" ref="0x7f27da3d7020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3d71b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3d7340"/>
        <function-ref name="set" scoped="" ref="0x7f27da3d74d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3d7660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3d77f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da3d7a80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3d7c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port33" ref="0x7f27da3c4020" loc="74:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port33" scoped="" ref="0x7f27da3c4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3c43a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3c4530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3c46c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3c4850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3c49e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3c4b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3c4d00"/>
        <function-ref name="get" scoped="" ref="0x7f27da3c3020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3c31b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3c3340"/>
        <function-ref name="set" scoped="" ref="0x7f27da3c34d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3c3660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3c37f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da3c3a80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3c3c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port45" ref="0x7f27da3b0200" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port45" scoped="" ref="0x7f27da3b0200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3b0580"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3b0710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3b08a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3b0a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3b0bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3b0d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3af020"/>
        <function-ref name="get" scoped="" ref="0x7f27da3af1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3af340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3af4d0"/>
        <function-ref name="set" scoped="" ref="0x7f27da3af660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3af7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3af980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da3afc10"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3afda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port57" ref="0x7f27da39b200" loc="100:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port57" scoped="" ref="0x7f27da39b200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da39b580"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da39b710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da39b8a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da39ba30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da39bbc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da39bd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da39a020"/>
        <function-ref name="get" scoped="" ref="0x7f27da39a1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da39a340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da39a4d0"/>
        <function-ref name="set" scoped="" ref="0x7f27da39a660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da39a7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da39a980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da39ac10"/>
        <function-ref name="clr" scoped="" ref="0x7f27da39ada0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port67" ref="0x7f27da38b200" loc="111:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port67" scoped="" ref="0x7f27da38b200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da38b580"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da38b710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da38b8a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da38ba30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da38bbc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da38bd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da38a020"/>
        <function-ref name="get" scoped="" ref="0x7f27da38a1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da38a340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da38a4d0"/>
        <function-ref name="set" scoped="" ref="0x7f27da38a660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da38a7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da38a980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da38ac10"/>
        <function-ref name="clr" scoped="" ref="0x7f27da38ada0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7f27da3e7020" loc="51:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7f27da3e7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3e73a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3e7530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3e76c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3e7850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3e79e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3e7b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3e7d00"/>
        <function-ref name="get" scoped="" ref="0x7f27da3e6020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3e61b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3e6340"/>
        <function-ref name="set" scoped="" ref="0x7f27da3e64d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3e6660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3e67f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da3e6a80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3e6c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7f27da3d2020" loc="64:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7f27da3d2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3d24a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3d2630"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3d27c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3d2950"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3d2ae0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3d2c70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3d2e00"/>
        <function-ref name="get" scoped="" ref="0x7f27da3d1020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3d11b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3d1340"/>
        <function-ref name="set" scoped="" ref="0x7f27da3d14d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3d1660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3d17f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da3d1a80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3d1c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port36" ref="0x7f27da3be020" loc="77:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port36" scoped="" ref="0x7f27da3be020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3be3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3be530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3be6c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3be850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3be9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3beb70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3bed00"/>
        <function-ref name="get" scoped="" ref="0x7f27da3bd020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3bd1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3bd340"/>
        <function-ref name="set" scoped="" ref="0x7f27da3bd4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3bd660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3bd7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da3bda80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3bdc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO0" ref="0x7f27da387580" loc="144:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO0" scoped="" ref="0x7f27da387580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da387900"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da387a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da387c20"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da387db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da386020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3861b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da386340"/>
        <function-ref name="get" scoped="" ref="0x7f27da3864d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da386660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3867f0"/>
        <function-ref name="set" scoped="" ref="0x7f27da386980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da386b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da386ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da385020"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3851b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC3" ref="0x7f27da366570" loc="162:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC3" scoped="" ref="0x7f27da366570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3668f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da366a80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da366c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da366da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da365020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3651b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da365340"/>
        <function-ref name="get" scoped="" ref="0x7f27da3654d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da365660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3657f0"/>
        <function-ref name="set" scoped="" ref="0x7f27da365980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da365b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da365ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da364020"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3641b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC1" ref="0x7f27da35a570" loc="169:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC1" scoped="" ref="0x7f27da35a570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da35a8f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da35aa80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da35ac10"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da35ada0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da359020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3591b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da359340"/>
        <function-ref name="get" scoped="" ref="0x7f27da3594d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da359660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3597f0"/>
        <function-ref name="set" scoped="" ref="0x7f27da359980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da359b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da359ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da358020"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3581b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK1" ref="0x7f27da372580" loc="155:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK1" scoped="" ref="0x7f27da372580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da372900"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da372a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da372c20"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da372db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da371020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3711b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da371340"/>
        <function-ref name="get" scoped="" ref="0x7f27da3714d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da371660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3717f0"/>
        <function-ref name="set" scoped="" ref="0x7f27da371980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da371b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da371ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da370020"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3701b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port40" ref="0x7f27da3ba020" loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port40" scoped="" ref="0x7f27da3ba020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3ba5a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3ba730"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3ba8c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3baa50"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3babe0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3bad70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3b9020"/>
        <function-ref name="get" scoped="" ref="0x7f27da3b91b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3b9340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3b94d0"/>
        <function-ref name="set" scoped="" ref="0x7f27da3b9660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3b97f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3b9980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da3b9c10"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3b9da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port52" ref="0x7f27da3a5200" loc="95:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port52" scoped="" ref="0x7f27da3a5200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3a5580"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3a5710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3a58a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3a5a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3a5bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3a5d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3a4020"/>
        <function-ref name="get" scoped="" ref="0x7f27da3a41b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3a4340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3a44d0"/>
        <function-ref name="set" scoped="" ref="0x7f27da3a4660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3a47f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3a4980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da3a4c10"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3a4da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port62" ref="0x7f27da395200" loc="106:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port62" scoped="" ref="0x7f27da395200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da395580"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da395710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3958a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da395a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da395bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da395d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da394020"/>
        <function-ref name="get" scoped="" ref="0x7f27da3941b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da394340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3944d0"/>
        <function-ref name="set" scoped="" ref="0x7f27da394660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3947f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da394980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da394c10"/>
        <function-ref name="clr" scoped="" ref="0x7f27da394da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC4" ref="0x7f27da364570" loc="163:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC4" scoped="" ref="0x7f27da364570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3648f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da364a80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da364c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da364da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da363020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3631b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da363340"/>
        <function-ref name="get" scoped="" ref="0x7f27da3634d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da363660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3637f0"/>
        <function-ref name="set" scoped="" ref="0x7f27da363980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da363b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da363ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da362020"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3621b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE1" ref="0x7f27da378570" loc="152:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE1" scoped="" ref="0x7f27da378570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3788f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da378a80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da378c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da378da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da377020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3771b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da377340"/>
        <function-ref name="get" scoped="" ref="0x7f27da3774d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da377660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3777f0"/>
        <function-ref name="set" scoped="" ref="0x7f27da377980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da377b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da377ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da376020"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3761b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7f27da3e1020" loc="54:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7f27da3e1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3e13a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3e1530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3e16c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3e1850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3e19e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3e1b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3e1d00"/>
        <function-ref name="get" scoped="" ref="0x7f27da3e0020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3e01b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3e0340"/>
        <function-ref name="set" scoped="" ref="0x7f27da3e04d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3e0660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3e07f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da3e0a80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3e0c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7f27da3cc020" loc="67:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7f27da3cc020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3cc3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3cc530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3cc6c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3cc850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3cc9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3ccb70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3ccd00"/>
        <function-ref name="get" scoped="" ref="0x7f27da3cb020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3cb1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3cb340"/>
        <function-ref name="set" scoped="" ref="0x7f27da3cb4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3cb660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3cb7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da3cba80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3cbc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port60" ref="0x7f27da399200" loc="104:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port60" scoped="" ref="0x7f27da399200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da399580"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da399710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3998a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da399a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da399bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da399d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da398020"/>
        <function-ref name="get" scoped="" ref="0x7f27da3981b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da398340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3984d0"/>
        <function-ref name="set" scoped="" ref="0x7f27da398660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3987f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da398980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da398c10"/>
        <function-ref name="clr" scoped="" ref="0x7f27da398da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port31" ref="0x7f27da3c8020" loc="72:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port31" scoped="" ref="0x7f27da3c8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3c83a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3c8530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3c86c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3c8850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3c89e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3c8b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3c8d00"/>
        <function-ref name="get" scoped="" ref="0x7f27da3c7020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3c71b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3c7340"/>
        <function-ref name="set" scoped="" ref="0x7f27da3c74d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3c7660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3c77f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da3c7a80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3c7c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port43" ref="0x7f27da3b4200" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port43" scoped="" ref="0x7f27da3b4200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3b4580"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3b4710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3b48a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3b4a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3b4bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3b4d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3b3020"/>
        <function-ref name="get" scoped="" ref="0x7f27da3b31b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3b3340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3b34d0"/>
        <function-ref name="set" scoped="" ref="0x7f27da3b3660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3b37f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3b3980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da3b3c10"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3b3da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port55" ref="0x7f27da39f200" loc="98:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port55" scoped="" ref="0x7f27da39f200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da39f580"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da39f710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da39f8a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da39fa30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da39fbc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da39fd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da39e020"/>
        <function-ref name="get" scoped="" ref="0x7f27da39e1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da39e340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da39e4d0"/>
        <function-ref name="set" scoped="" ref="0x7f27da39e660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da39e7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da39e980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da39ec10"/>
        <function-ref name="clr" scoped="" ref="0x7f27da39eda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port65" ref="0x7f27da38f200" loc="109:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port65" scoped="" ref="0x7f27da38f200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da38f580"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da38f710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da38f8a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da38fa30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da38fbc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da38fd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da38e020"/>
        <function-ref name="get" scoped="" ref="0x7f27da38e1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da38e340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da38e4d0"/>
        <function-ref name="set" scoped="" ref="0x7f27da38e660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da38e7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da38e980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da38ec10"/>
        <function-ref name="clr" scoped="" ref="0x7f27da38eda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI1" ref="0x7f27da374580" loc="154:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI1" scoped="" ref="0x7f27da374580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da374900"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da374a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da374c20"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da374db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da373020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3731b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da373340"/>
        <function-ref name="get" scoped="" ref="0x7f27da3734d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da373660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3737f0"/>
        <function-ref name="set" scoped="" ref="0x7f27da373980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da373b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da373ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da372020"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3721b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7f27da3f4020" loc="49:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7f27da3f4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3f43a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3f4530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3f46c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3f4850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3f49e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3f4b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3f4d00"/>
        <function-ref name="get" scoped="" ref="0x7f27da3f3020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3f31b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3f3340"/>
        <function-ref name="set" scoped="" ref="0x7f27da3f34d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3f3660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3f37f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da3f3a80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3f3c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7f27da3d6020" loc="62:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7f27da3d6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3d63a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3d6530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3d66c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3d6850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3d69e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3d6b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3d6d00"/>
        <function-ref name="get" scoped="" ref="0x7f27da3d5020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3d51b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3d5340"/>
        <function-ref name="set" scoped="" ref="0x7f27da3d54d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3d5660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3d57f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da3d5a80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3d5c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port34" ref="0x7f27da3c2020" loc="75:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port34" scoped="" ref="0x7f27da3c2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3c23a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3c2530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3c26c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3c2850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3c29e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3c2b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3c2d00"/>
        <function-ref name="get" scoped="" ref="0x7f27da3c1020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3c11b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3c1340"/>
        <function-ref name="set" scoped="" ref="0x7f27da3c14d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3c1660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3c17f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da3c1a80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3c1c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port46" ref="0x7f27da3ae200" loc="88:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port46" scoped="" ref="0x7f27da3ae200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3ae580"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3ae710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3ae8a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3aea30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3aebc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3aed50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3ad020"/>
        <function-ref name="get" scoped="" ref="0x7f27da3ad1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3ad340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3ad4d0"/>
        <function-ref name="set" scoped="" ref="0x7f27da3ad660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3ad7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3ad980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da3adc10"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3adda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD1" ref="0x7f27da370580" loc="156:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD1" scoped="" ref="0x7f27da370580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da370900"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da370a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da370c20"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da370db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da36f020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da36f1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da36f340"/>
        <function-ref name="get" scoped="" ref="0x7f27da36f4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da36f660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da36f7f0"/>
        <function-ref name="set" scoped="" ref="0x7f27da36f980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da36fb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da36fca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da36e020"/>
        <function-ref name="clr" scoped="" ref="0x7f27da36e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC1" ref="0x7f27da36a570" loc="160:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC1" scoped="" ref="0x7f27da36a570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da36a8f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da36aa80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da36ac10"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da36ada0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da369020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3691b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da369340"/>
        <function-ref name="get" scoped="" ref="0x7f27da3694d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da369660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3697f0"/>
        <function-ref name="set" scoped="" ref="0x7f27da369980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da369b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da369ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da368020"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3681b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC7" ref="0x7f27da35e570" loc="166:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC7" scoped="" ref="0x7f27da35e570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da35e8f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da35ea80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da35ec10"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da35eda0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da35d020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da35d1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da35d340"/>
        <function-ref name="get" scoped="" ref="0x7f27da35d4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da35d660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da35d7f0"/>
        <function-ref name="set" scoped="" ref="0x7f27da35d980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da35db10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da35dca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da35c020"/>
        <function-ref name="clr" scoped="" ref="0x7f27da35c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port50" ref="0x7f27da3a9200" loc="93:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port50" scoped="" ref="0x7f27da3a9200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3a9580"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3a9710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3a98a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3a9a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3a9bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3a9d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3a8020"/>
        <function-ref name="get" scoped="" ref="0x7f27da3a81b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3a8340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3a84d0"/>
        <function-ref name="set" scoped="" ref="0x7f27da3a8660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3a87f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3a8980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da3a8c10"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3a8da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD1" ref="0x7f27da36e580" loc="157:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD1" scoped="" ref="0x7f27da36e580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da36e900"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da36ea90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da36ec20"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da36edb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da36d020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da36d1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da36d340"/>
        <function-ref name="get" scoped="" ref="0x7f27da36d4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da36d660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da36d7f0"/>
        <function-ref name="set" scoped="" ref="0x7f27da36d980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da36db10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da36dca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da36c020"/>
        <function-ref name="clr" scoped="" ref="0x7f27da36c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7f27da3e5020" loc="52:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7f27da3e5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3e53a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3e5530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3e56c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3e5850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3e59e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3e5b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3e5d00"/>
        <function-ref name="get" scoped="" ref="0x7f27da3e4020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3e41b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3e4340"/>
        <function-ref name="set" scoped="" ref="0x7f27da3e44d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3e4660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3e47f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da3e4a80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3e4c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7f27da3d0020" loc="65:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7f27da3d0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3d03a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3d0530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3d06c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3d0850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3d09e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3d0b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3d0d00"/>
        <function-ref name="get" scoped="" ref="0x7f27da3cf020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3cf1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3cf340"/>
        <function-ref name="set" scoped="" ref="0x7f27da3cf4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3cf660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3cf7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da3cfa80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3cfc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port37" ref="0x7f27da3bc020" loc="78:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port37" scoped="" ref="0x7f27da3bc020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3bc3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3bc530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3bc6c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3bc850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3bc9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3bcb70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3bcd00"/>
        <function-ref name="get" scoped="" ref="0x7f27da3bb020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3bb1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3bb340"/>
        <function-ref name="set" scoped="" ref="0x7f27da3bb4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3bb660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3bb7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da3bba80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3bbc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO1" ref="0x7f27da376580" loc="153:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO1" scoped="" ref="0x7f27da376580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da376900"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da376a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da376c20"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da376db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da375020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3751b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da375340"/>
        <function-ref name="get" scoped="" ref="0x7f27da3754d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da375660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3757f0"/>
        <function-ref name="set" scoped="" ref="0x7f27da375980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da375b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da375ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da374020"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3741b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC5" ref="0x7f27da362570" loc="164:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC5" scoped="" ref="0x7f27da362570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3628f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da362a80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da362c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da362da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da361020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3611b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da361340"/>
        <function-ref name="get" scoped="" ref="0x7f27da3614d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da361660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3617f0"/>
        <function-ref name="set" scoped="" ref="0x7f27da361980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da361b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da361ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da360020"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3601b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port41" ref="0x7f27da3b8200" loc="83:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port41" scoped="" ref="0x7f27da3b8200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3b8580"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3b8710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3b88a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3b8a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3b8bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3b8d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3b7020"/>
        <function-ref name="get" scoped="" ref="0x7f27da3b71b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3b7340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3b74d0"/>
        <function-ref name="set" scoped="" ref="0x7f27da3b7660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3b77f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3b7980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da3b7c10"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3b7da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port53" ref="0x7f27da3a3200" loc="96:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port53" scoped="" ref="0x7f27da3a3200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3a3580"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3a3710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3a38a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3a3a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3a3bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3a3d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3a2020"/>
        <function-ref name="get" scoped="" ref="0x7f27da3a21b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3a2340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3a24d0"/>
        <function-ref name="set" scoped="" ref="0x7f27da3a2660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3a27f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3a2980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da3a2c10"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3a2da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port63" ref="0x7f27da393200" loc="107:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port63" scoped="" ref="0x7f27da393200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da393580"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da393710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3938a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da393a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da393bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da393d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da392020"/>
        <function-ref name="get" scoped="" ref="0x7f27da3921b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da392340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3924d0"/>
        <function-ref name="set" scoped="" ref="0x7f27da392660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3927f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da392980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da392c10"/>
        <function-ref name="clr" scoped="" ref="0x7f27da392da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7f27da3df020" loc="55:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7f27da3df020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3df3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3df530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3df6c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3df850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3df9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3dfb70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3dfd00"/>
        <function-ref name="get" scoped="" ref="0x7f27da3de020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3de1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3de340"/>
        <function-ref name="set" scoped="" ref="0x7f27da3de4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3de660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3de7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da3dea80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3dec10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port61" ref="0x7f27da397200" loc="105:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port61" scoped="" ref="0x7f27da397200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da397580"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da397710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3978a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da397a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da397bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da397d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da396020"/>
        <function-ref name="get" scoped="" ref="0x7f27da3961b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da396340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3964d0"/>
        <function-ref name="set" scoped="" ref="0x7f27da396660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3967f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da396980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da396c10"/>
        <function-ref name="clr" scoped="" ref="0x7f27da396da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7f27da3db020" loc="60:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7f27da3db020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3db3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3db530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3db6c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3db850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3db9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3dbb70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3dbd00"/>
        <function-ref name="get" scoped="" ref="0x7f27da3da020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3da1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3da340"/>
        <function-ref name="set" scoped="" ref="0x7f27da3da4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3da660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3da7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da3daa80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3dac10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port32" ref="0x7f27da3c6020" loc="73:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port32" scoped="" ref="0x7f27da3c6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3c63a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3c6530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3c66c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3c6850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3c69e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3c6b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3c6d00"/>
        <function-ref name="get" scoped="" ref="0x7f27da3c5020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3c51b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3c5340"/>
        <function-ref name="set" scoped="" ref="0x7f27da3c54d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3c5660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3c57f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da3c5a80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3c5c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port44" ref="0x7f27da3b2200" loc="86:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port44" scoped="" ref="0x7f27da3b2200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3b2580"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3b2710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3b28a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3b2a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3b2bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3b2d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3b1020"/>
        <function-ref name="get" scoped="" ref="0x7f27da3b11b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3b1340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3b14d0"/>
        <function-ref name="set" scoped="" ref="0x7f27da3b1660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3b17f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3b1980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da3b1c10"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3b1da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port56" ref="0x7f27da39d200" loc="99:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port56" scoped="" ref="0x7f27da39d200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da39d580"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da39d710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da39d8a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da39da30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da39dbc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da39dd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da39c020"/>
        <function-ref name="get" scoped="" ref="0x7f27da39c1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da39c340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da39c4d0"/>
        <function-ref name="set" scoped="" ref="0x7f27da39c660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da39c7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da39c980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da39cc10"/>
        <function-ref name="clr" scoped="" ref="0x7f27da39cda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port66" ref="0x7f27da38d200" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port66" scoped="" ref="0x7f27da38d200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da38d580"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da38d710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da38d8a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da38da30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da38dbc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da38dd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da38c020"/>
        <function-ref name="get" scoped="" ref="0x7f27da38c1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da38c340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da38c4d0"/>
        <function-ref name="set" scoped="" ref="0x7f27da38c660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da38c7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da38c980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da38cc10"/>
        <function-ref name="clr" scoped="" ref="0x7f27da38cda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7f27da3e9020" loc="50:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7f27da3e9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3e93a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3e9530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3e96c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3e9850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3e99e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3e9b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3e9d00"/>
        <function-ref name="get" scoped="" ref="0x7f27da3e8020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3e81b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3e8340"/>
        <function-ref name="set" scoped="" ref="0x7f27da3e84d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3e8660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3e87f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da3e8a80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3e8c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7f27da3d4020" loc="63:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7f27da3d4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3d43a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3d4530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3d46c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3d4850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3d49e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3d4b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3d4d00"/>
        <function-ref name="get" scoped="" ref="0x7f27da3d3020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3d31b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3d3340"/>
        <function-ref name="set" scoped="" ref="0x7f27da3d34d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3d3660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3d37f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da3d3a80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3d3c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port35" ref="0x7f27da3c0020" loc="76:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port35" scoped="" ref="0x7f27da3c0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3c03a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3c0530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3c06c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3c0850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3c09e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3c0b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3c0d00"/>
        <function-ref name="get" scoped="" ref="0x7f27da3bf020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3bf1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3bf340"/>
        <function-ref name="set" scoped="" ref="0x7f27da3bf4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3bf660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3bf7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da3bfa80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3bfc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port47" ref="0x7f27da3ac200" loc="89:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port47" scoped="" ref="0x7f27da3ac200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3ac580"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3ac710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3ac8a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3aca30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3acbc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3acd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3ab020"/>
        <function-ref name="get" scoped="" ref="0x7f27da3ab1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3ab340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3ab4d0"/>
        <function-ref name="set" scoped="" ref="0x7f27da3ab660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3ab7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3ab980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da3abc10"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3abda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SCL" ref="0x7f27da37f560" loc="148:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SCL" scoped="" ref="0x7f27da37f560"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da37f8e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da37fa70"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da37fc00"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da37fd90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da37e020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da37e1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da37e340"/>
        <function-ref name="get" scoped="" ref="0x7f27da37e4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da37e660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da37e7f0"/>
        <function-ref name="set" scoped="" ref="0x7f27da37e980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da37eb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da37eca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da37d020"/>
        <function-ref name="clr" scoped="" ref="0x7f27da37d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC2" ref="0x7f27da368570" loc="161:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC2" scoped="" ref="0x7f27da368570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3688f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da368a80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da368c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da368da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da367020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3671b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da367340"/>
        <function-ref name="get" scoped="" ref="0x7f27da3674d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da367660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3677f0"/>
        <function-ref name="set" scoped="" ref="0x7f27da367980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da367b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da367ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da366020"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3661b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK0" ref="0x7f27da381580" loc="147:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK0" scoped="" ref="0x7f27da381580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da381900"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da381a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da381c20"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da381db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da380020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3801b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da380340"/>
        <function-ref name="get" scoped="" ref="0x7f27da3804d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da380660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3807f0"/>
        <function-ref name="set" scoped="" ref="0x7f27da380980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da380b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da380ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da37f020"/>
        <function-ref name="clr" scoped="" ref="0x7f27da37f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port51" ref="0x7f27da3a7200" loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port51" scoped="" ref="0x7f27da3a7200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3a7580"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da3a7710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3a78a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da3a7a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3a7bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3a7d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3a6020"/>
        <function-ref name="get" scoped="" ref="0x7f27da3a61b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3a6340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3a64d0"/>
        <function-ref name="set" scoped="" ref="0x7f27da3a6660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da3a67f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3a6980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da3a6c10"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3a6da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC0" ref="0x7f27da35c570" loc="168:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC0" scoped="" ref="0x7f27da35c570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da35c8f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da35ca80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da35cc10"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da35cda0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da35b020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da35b1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da35b340"/>
        <function-ref name="get" scoped="" ref="0x7f27da35b4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da35b660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da35b7f0"/>
        <function-ref name="set" scoped="" ref="0x7f27da35b980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da35bb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da35bca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da35a020"/>
        <function-ref name="clr" scoped="" ref="0x7f27da35a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSOUT" ref="0x7f27da356580" loc="172:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSOUT" scoped="" ref="0x7f27da356580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da356900"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da356a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da356c20"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da356db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da355020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3551b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da355340"/>
        <function-ref name="get" scoped="" ref="0x7f27da3554d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da355660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3557f0"/>
        <function-ref name="set" scoped="" ref="0x7f27da355980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da355b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da355ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da354020"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3541b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE0" ref="0x7f27da3891f0" loc="143:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE0" scoped="" ref="0x7f27da3891f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da389970"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da389b00"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da389c90"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da389e20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da388020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3881b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da388340"/>
        <function-ref name="get" scoped="" ref="0x7f27da3884d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da388660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da3887f0"/>
        <function-ref name="set" scoped="" ref="0x7f27da388980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da388b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da388ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da387020"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3871b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da32b6d0" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P10"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da32b6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da32ba50"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da32bbe0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da32bd70"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da329020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da3291b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da329340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da3294d0"/>
        <function-ref name="get" scoped="" ref="0x7f27da329660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3297f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da329980"/>
        <function-ref name="set" scoped="" ref="0x7f27da329b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da329ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da329e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da328120"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3282b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da325100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P11"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da325100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da325480"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da325610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3257a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da325930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da325ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da325c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da325de0"/>
        <function-ref name="get" scoped="" ref="0x7f27da324020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3241b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da324340"/>
        <function-ref name="set" scoped="" ref="0x7f27da3244d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da324660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3247f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da324a80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da324c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da321d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P12"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da321d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3200e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da320270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da320400"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da320590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da320720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3208b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da320a40"/>
        <function-ref name="get" scoped="" ref="0x7f27da320bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da320d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da31f020"/>
        <function-ref name="set" scoped="" ref="0x7f27da31f1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da31f340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da31f4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da31f760"/>
        <function-ref name="clr" scoped="" ref="0x7f27da31f8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da31c740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P13"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da31c740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da31cac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da31cc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da31cde0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da31b020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da31b1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da31b340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da31b4d0"/>
        <function-ref name="get" scoped="" ref="0x7f27da31b660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da31b7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da31b980"/>
        <function-ref name="set" scoped="" ref="0x7f27da31bb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da31bca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da31be30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da31a120"/>
        <function-ref name="clr" scoped="" ref="0x7f27da31a2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da317100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P14"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da317100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da317480"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da317610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3177a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da317930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da317ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da317c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da317de0"/>
        <function-ref name="get" scoped="" ref="0x7f27da316020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3161b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da316340"/>
        <function-ref name="set" scoped="" ref="0x7f27da3164d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da316660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3167f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da316a80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da316c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da313d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P15"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da313d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3120e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da312270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da312400"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da312590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da312720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3128b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da312a40"/>
        <function-ref name="get" scoped="" ref="0x7f27da312bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da312d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da311020"/>
        <function-ref name="set" scoped="" ref="0x7f27da3111b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da311340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3114d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da311760"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3118f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da30e740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P16"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da30e740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da30eac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da30ec50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da30ede0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da30d020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da30d1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da30d340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da30d4d0"/>
        <function-ref name="get" scoped="" ref="0x7f27da30d660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da30d7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da30d980"/>
        <function-ref name="set" scoped="" ref="0x7f27da30db10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da30dca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da30de30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da30c120"/>
        <function-ref name="clr" scoped="" ref="0x7f27da30c2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da309100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P17"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da309100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da309480"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da309610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da3097a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da309930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da309ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da309c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da309de0"/>
        <function-ref name="get" scoped="" ref="0x7f27da308020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da3081b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da308340"/>
        <function-ref name="set" scoped="" ref="0x7f27da3084d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da308660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3087f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da308a80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da308c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da305d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P20"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da305d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da3030e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da303270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da303400"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da303590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da303720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da3038b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da303a40"/>
        <function-ref name="get" scoped="" ref="0x7f27da303bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da303d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da302020"/>
        <function-ref name="set" scoped="" ref="0x7f27da3021b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da302340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da3024d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da302760"/>
        <function-ref name="clr" scoped="" ref="0x7f27da3028f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da2ff740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P21"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da2ff740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da2ffac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da2ffc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da2ffde0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da2fe020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da2fe1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da2fe340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da2fe4d0"/>
        <function-ref name="get" scoped="" ref="0x7f27da2fe660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da2fe7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da2fe980"/>
        <function-ref name="set" scoped="" ref="0x7f27da2feb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da2feca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da2fee30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da2fd120"/>
        <function-ref name="clr" scoped="" ref="0x7f27da2fd2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da2fa100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P22"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da2fa100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da2fa480"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da2fa610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da2fa7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da2fa930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da2faac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da2fac50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da2fade0"/>
        <function-ref name="get" scoped="" ref="0x7f27da2f9020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da2f91b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da2f9340"/>
        <function-ref name="set" scoped="" ref="0x7f27da2f94d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da2f9660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da2f97f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da2f9a80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da2f9c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da2f6d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P23"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da2f6d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da2f50e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da2f5270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da2f5400"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da2f5590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da2f5720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da2f58b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da2f5a40"/>
        <function-ref name="get" scoped="" ref="0x7f27da2f5bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da2f5d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da2f4020"/>
        <function-ref name="set" scoped="" ref="0x7f27da2f41b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da2f4340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da2f44d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da2f4760"/>
        <function-ref name="clr" scoped="" ref="0x7f27da2f48f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da2f1860" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P24"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da2f1860"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da2f1be0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da2f1d70"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da2f0020"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da2f01b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da2f0340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da2f04d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da2f0660"/>
        <function-ref name="get" scoped="" ref="0x7f27da2f07f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da2f0980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da2f0b10"/>
        <function-ref name="set" scoped="" ref="0x7f27da2f0ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da2f0e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da2ef020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da2ef2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f27da2ef440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da2ec270" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P25"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da2ec270"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da2ec5f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da2ec780"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da2ec910"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da2ecaa0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da2ecc30"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da2ecdc0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da2eb020"/>
        <function-ref name="get" scoped="" ref="0x7f27da2eb1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da2eb340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da2eb4d0"/>
        <function-ref name="set" scoped="" ref="0x7f27da2eb660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da2eb7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da2eb980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da2ebc10"/>
        <function-ref name="clr" scoped="" ref="0x7f27da2ebda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da2e8d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P26"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da2e8d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da2e70e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da2e7270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da2e7400"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da2e7590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da2e7720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da2e78b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da2e7a40"/>
        <function-ref name="get" scoped="" ref="0x7f27da2e7bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da2e7d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da2e6020"/>
        <function-ref name="set" scoped="" ref="0x7f27da2e61b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da2e6340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da2e64d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da2e6760"/>
        <function-ref name="clr" scoped="" ref="0x7f27da2e68f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da2e3740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P27"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da2e3740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da2e3ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da2e3c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da2e3de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da2e2020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da2e21b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da2e2340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da2e24d0"/>
        <function-ref name="get" scoped="" ref="0x7f27da2e2660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da2e27f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da2e2980"/>
        <function-ref name="set" scoped="" ref="0x7f27da2e2b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da2e2ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da2e2e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da2e1120"/>
        <function-ref name="clr" scoped="" ref="0x7f27da2e12b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da2dd100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P30"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da2dd100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da2dd480"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da2dd610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da2dd7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da2dd930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da2ddac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da2ddc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da2ddde0"/>
        <function-ref name="get" scoped="" ref="0x7f27da2dc020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da2dc1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da2dc340"/>
        <function-ref name="set" scoped="" ref="0x7f27da2dc4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da2dc660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da2dc7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da2dca80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da2dcc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da2d9d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P31"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da2d9d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da2d80e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da2d8270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da2d8400"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da2d8590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da2d8720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da2d88b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da2d8a40"/>
        <function-ref name="get" scoped="" ref="0x7f27da2d8bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da2d8d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da2d7020"/>
        <function-ref name="set" scoped="" ref="0x7f27da2d71b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da2d7340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da2d74d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da2d7760"/>
        <function-ref name="clr" scoped="" ref="0x7f27da2d78f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da2d4740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P32"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da2d4740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da2d4ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da2d4c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da2d4de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da2d3020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da2d31b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da2d3340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da2d34d0"/>
        <function-ref name="get" scoped="" ref="0x7f27da2d3660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da2d37f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da2d3980"/>
        <function-ref name="set" scoped="" ref="0x7f27da2d3b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da2d3ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da2d3e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da2d2120"/>
        <function-ref name="clr" scoped="" ref="0x7f27da2d22b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da2cf100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P33"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da2cf100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da2cf480"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da2cf610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da2cf7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da2cf930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da2cfac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da2cfc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da2cfde0"/>
        <function-ref name="get" scoped="" ref="0x7f27da2ce020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da2ce1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da2ce340"/>
        <function-ref name="set" scoped="" ref="0x7f27da2ce4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da2ce660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da2ce7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da2cea80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da2cec10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da2cbd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P34"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da2cbd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da2ca0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da2ca270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da2ca400"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da2ca590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da2ca720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da2ca8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da2caa40"/>
        <function-ref name="get" scoped="" ref="0x7f27da2cabd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da2cad60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da2c9020"/>
        <function-ref name="set" scoped="" ref="0x7f27da2c91b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da2c9340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da2c94d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da2c9760"/>
        <function-ref name="clr" scoped="" ref="0x7f27da2c98f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da2c6740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P35"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da2c6740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da2c6ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da2c6c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da2c6de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da2c5020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da2c51b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da2c5340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da2c54d0"/>
        <function-ref name="get" scoped="" ref="0x7f27da2c5660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da2c57f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da2c5980"/>
        <function-ref name="set" scoped="" ref="0x7f27da2c5b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da2c5ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da2c5e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da2c4120"/>
        <function-ref name="clr" scoped="" ref="0x7f27da2c42b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da2c1100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P36"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da2c1100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da2c1480"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da2c1610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da2c17a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da2c1930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da2c1ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da2c1c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da2c1de0"/>
        <function-ref name="get" scoped="" ref="0x7f27da2c0020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da2c01b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da2c0340"/>
        <function-ref name="set" scoped="" ref="0x7f27da2c04d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da2c0660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da2c07f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da2c0a80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da2c0c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da2bdd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P37"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da2bdd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da2bb0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da2bb270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da2bb400"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da2bb590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da2bb720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da2bb8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da2bba40"/>
        <function-ref name="get" scoped="" ref="0x7f27da2bbbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da2bbd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da2ba020"/>
        <function-ref name="set" scoped="" ref="0x7f27da2ba1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da2ba340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da2ba4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da2ba760"/>
        <function-ref name="clr" scoped="" ref="0x7f27da2ba8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da2b7a60" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P40"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da2b7a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da2b7de0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da2b6020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da2b61b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da2b6340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da2b64d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da2b6660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da2b67f0"/>
        <function-ref name="get" scoped="" ref="0x7f27da2b6980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da2b6b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da2b6ca0"/>
        <function-ref name="set" scoped="" ref="0x7f27da2b6e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da2b5020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da2b51b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da2b5440"/>
        <function-ref name="clr" scoped="" ref="0x7f27da2b55d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da2b2460" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P41"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da2b2460"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da2b27e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da2b2970"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da2b2b00"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da2b2c90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da2b2e20"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da2b1020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da2b11b0"/>
        <function-ref name="get" scoped="" ref="0x7f27da2b1340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da2b14d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da2b1660"/>
        <function-ref name="set" scoped="" ref="0x7f27da2b17f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da2b1980"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da2b1b10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da2b1da0"/>
        <function-ref name="clr" scoped="" ref="0x7f27da2b0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da2aee00" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P42"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da2aee00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da2ad1c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da2ad350"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da2ad4e0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da2ad670"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da2ad800"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da2ad990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da2adb20"/>
        <function-ref name="get" scoped="" ref="0x7f27da2adcb0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da2ade40"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da2ac020"/>
        <function-ref name="set" scoped="" ref="0x7f27da2ac1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da2ac340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da2ac4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da2ac760"/>
        <function-ref name="clr" scoped="" ref="0x7f27da2ac8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da2a9740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P43"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da2a9740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da2a9ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da2a9c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da2a9de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da2a8020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da2a81b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da2a8340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da2a84d0"/>
        <function-ref name="get" scoped="" ref="0x7f27da2a8660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da2a87f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da2a8980"/>
        <function-ref name="set" scoped="" ref="0x7f27da2a8b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da2a8ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da2a8e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da2a7120"/>
        <function-ref name="clr" scoped="" ref="0x7f27da2a72b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da2a4100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P44"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da2a4100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da2a4480"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da2a4610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da2a47a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da2a4930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da2a4ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da2a4c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da2a4de0"/>
        <function-ref name="get" scoped="" ref="0x7f27da2a3020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da2a31b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da2a3340"/>
        <function-ref name="set" scoped="" ref="0x7f27da2a34d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da2a3660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da2a37f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da2a3a80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da2a3c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da2a0d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P45"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da2a0d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da29f0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da29f270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da29f400"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da29f590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da29f720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da29f8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da29fa40"/>
        <function-ref name="get" scoped="" ref="0x7f27da29fbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da29fd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da29e020"/>
        <function-ref name="set" scoped="" ref="0x7f27da29e1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da29e340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da29e4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da29e760"/>
        <function-ref name="clr" scoped="" ref="0x7f27da29e8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da29b740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P46"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da29b740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da29bac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da29bc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da29bde0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da29a020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da29a1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da29a340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da29a4d0"/>
        <function-ref name="get" scoped="" ref="0x7f27da29a660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da29a7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da29a980"/>
        <function-ref name="set" scoped="" ref="0x7f27da29ab10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da29aca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da29ae30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da299120"/>
        <function-ref name="clr" scoped="" ref="0x7f27da2992b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da296100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P47"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da296100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da296480"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da296610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da2967a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da296930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da296ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da296c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da296de0"/>
        <function-ref name="get" scoped="" ref="0x7f27da294020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da2941b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da294340"/>
        <function-ref name="set" scoped="" ref="0x7f27da2944d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da294660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da2947f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da294a80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da294c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da291d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P50"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da291d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da2900e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da290270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da290400"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da290590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da290720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da2908b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da290a40"/>
        <function-ref name="get" scoped="" ref="0x7f27da290bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da290d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da28f020"/>
        <function-ref name="set" scoped="" ref="0x7f27da28f1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da28f340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da28f4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da28f760"/>
        <function-ref name="clr" scoped="" ref="0x7f27da28f8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da28c740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P51"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da28c740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da28cac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da28cc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da28cde0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da28b020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da28b1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da28b340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da28b4d0"/>
        <function-ref name="get" scoped="" ref="0x7f27da28b660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da28b7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da28b980"/>
        <function-ref name="set" scoped="" ref="0x7f27da28bb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da28bca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da28be30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da28a120"/>
        <function-ref name="clr" scoped="" ref="0x7f27da28a2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da287100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P52"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da287100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da287480"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da287610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da2877a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da287930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da287ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da287c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da287de0"/>
        <function-ref name="get" scoped="" ref="0x7f27da286020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da2861b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da286340"/>
        <function-ref name="set" scoped="" ref="0x7f27da2864d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da286660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da2867f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da286a80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da286c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da283d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P53"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da283d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da2820e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da282270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da282400"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da282590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da282720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da2828b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da282a40"/>
        <function-ref name="get" scoped="" ref="0x7f27da282bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da282d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da281020"/>
        <function-ref name="set" scoped="" ref="0x7f27da2811b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da281340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da2814d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da281760"/>
        <function-ref name="clr" scoped="" ref="0x7f27da2818f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da27e740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P54"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da27e740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da27eac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da27ec50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da27ede0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da27d020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da27d1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da27d340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da27d4d0"/>
        <function-ref name="get" scoped="" ref="0x7f27da27d660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da27d7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da27d980"/>
        <function-ref name="set" scoped="" ref="0x7f27da27db10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da27dca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da27de30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da27c120"/>
        <function-ref name="clr" scoped="" ref="0x7f27da27c2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da279100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P55"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da279100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da279480"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da279610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da2797a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da279930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da279ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da279c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da279de0"/>
        <function-ref name="get" scoped="" ref="0x7f27da278020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da2781b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da278340"/>
        <function-ref name="set" scoped="" ref="0x7f27da2784d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da278660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da2787f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da278a80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da278c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da275d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P56"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da275d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da2740e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da274270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da274400"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da274590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da274720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da2748b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da274a40"/>
        <function-ref name="get" scoped="" ref="0x7f27da274bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da274d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da273020"/>
        <function-ref name="set" scoped="" ref="0x7f27da2731b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da273340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da2734d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da273760"/>
        <function-ref name="clr" scoped="" ref="0x7f27da2738f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da26f740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P57"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da26f740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da26fac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da26fc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da26fde0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da26e020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da26e1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da26e340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da26e4d0"/>
        <function-ref name="get" scoped="" ref="0x7f27da26e660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da26e7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da26e980"/>
        <function-ref name="set" scoped="" ref="0x7f27da26eb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da26eca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da26ee30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da26d120"/>
        <function-ref name="clr" scoped="" ref="0x7f27da26d2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da26a100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P60"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da26a100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da26a480"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da26a610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da26a7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da26a930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da26aac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da26ac50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da26ade0"/>
        <function-ref name="get" scoped="" ref="0x7f27da269020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da2691b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da269340"/>
        <function-ref name="set" scoped="" ref="0x7f27da2694d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da269660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da2697f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da269a80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da269c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da266d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P61"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da266d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da2650e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da265270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da265400"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da265590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da265720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da2658b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da265a40"/>
        <function-ref name="get" scoped="" ref="0x7f27da265bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da265d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da264020"/>
        <function-ref name="set" scoped="" ref="0x7f27da2641b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da264340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da2644d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da264760"/>
        <function-ref name="clr" scoped="" ref="0x7f27da2648f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da261740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P62"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da261740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da261ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da261c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da261de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da260020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da2601b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da260340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da2604d0"/>
        <function-ref name="get" scoped="" ref="0x7f27da260660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da2607f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da260980"/>
        <function-ref name="set" scoped="" ref="0x7f27da260b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da260ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da260e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da25f120"/>
        <function-ref name="clr" scoped="" ref="0x7f27da25f2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da25c100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P63"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da25c100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da25c480"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da25c610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da25c7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da25c930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da25cac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da25cc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da25cde0"/>
        <function-ref name="get" scoped="" ref="0x7f27da25b020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da25b1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da25b340"/>
        <function-ref name="set" scoped="" ref="0x7f27da25b4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da25b660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da25b7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da25ba80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da25bc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da258d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P64"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da258d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da2570e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da257270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da257400"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da257590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da257720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da2578b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da257a40"/>
        <function-ref name="get" scoped="" ref="0x7f27da257bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da257d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da256020"/>
        <function-ref name="set" scoped="" ref="0x7f27da2561b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da256340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da2564d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da256760"/>
        <function-ref name="clr" scoped="" ref="0x7f27da2568f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da253740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P65"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da253740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da253ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da253c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da253de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da252020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da2521b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da252340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da2524d0"/>
        <function-ref name="get" scoped="" ref="0x7f27da252660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da2527f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da252980"/>
        <function-ref name="set" scoped="" ref="0x7f27da252b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da252ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da252e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da251120"/>
        <function-ref name="clr" scoped="" ref="0x7f27da2512b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da24e100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P66"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da24e100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da24e480"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da24e610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da24e7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da24e930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da24eac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da24ec50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da24ede0"/>
        <function-ref name="get" scoped="" ref="0x7f27da24c020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da24c1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da24c340"/>
        <function-ref name="set" scoped="" ref="0x7f27da24c4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da24c660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da24c7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da24ca80"/>
        <function-ref name="clr" scoped="" ref="0x7f27da24cc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f27da249d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P67"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f27da249d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da2480e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da248270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da248400"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da248590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da248720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da2488b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da248a40"/>
        <function-ref name="get" scoped="" ref="0x7f27da248bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da248d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da247020"/>
        <function-ref name="set" scoped="" ref="0x7f27da2471b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da247340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da2474d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da247760"/>
        <function-ref name="clr" scoped="" ref="0x7f27da2478f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f27da1d02f0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f27da1d02f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da1d0670"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da1d0800"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da1d0990"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da1d0b20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da1d0cb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da1d0e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da1cf020"/>
        <function-ref name="get" scoped="" ref="0x7f27da1cf1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da1cf340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da1cf4d0"/>
        <function-ref name="set" scoped="" ref="0x7f27da1cf660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da1cf7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da1cf980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da1cfc10"/>
        <function-ref name="clr" scoped="" ref="0x7f27da1cfda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f27da1e1020" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f27da1e1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da1e13a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da1e1530"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da1e16c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da1e1850"/>
        <function-ref name="get" scoped="" ref="0x7f27da1e19e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da1e1b70"/>
        <function-ref name="set" scoped="" ref="0x7f27da1e1d00"/>
        <function-ref name="clr" scoped="" ref="0x7f27da1d0020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f27da1ccde0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f27da1ccde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da1cb180"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da1cb310"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da1cb4a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da1cb630"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da1cb7c0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da1cb950"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da1cbae0"/>
        <function-ref name="get" scoped="" ref="0x7f27da1cbc70"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da1cbe00"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da1ca020"/>
        <function-ref name="set" scoped="" ref="0x7f27da1ca1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da1ca340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da1ca4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da1ca760"/>
        <function-ref name="clr" scoped="" ref="0x7f27da1ca8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f27da1cdb90" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f27da1cdb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da1cc020"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da1cc1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da1cc340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da1cc4d0"/>
        <function-ref name="get" scoped="" ref="0x7f27da1cc660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da1cc7f0"/>
        <function-ref name="set" scoped="" ref="0x7f27da1cc980"/>
        <function-ref name="clr" scoped="" ref="0x7f27da1ccb10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f27da1c7930" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f27da1c7930"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da1c7cb0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da1c7e40"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27da1c6020"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da1c61b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da1c6340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27da1c64d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da1c6660"/>
        <function-ref name="get" scoped="" ref="0x7f27da1c67f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27da1c6980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27da1c6b10"/>
        <function-ref name="set" scoped="" ref="0x7f27da1c6ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27da1c6e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27da1c5020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27da1c52b0"/>
        <function-ref name="clr" scoped="" ref="0x7f27da1c5440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f27da1c8710" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f27da1c8710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27da1c8a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f27da1c8c20"/>
        <function-ref name="toggle" scoped="" ref="0x7f27da1c8db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27da1c7020"/>
        <function-ref name="get" scoped="" ref="0x7f27da1c71b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27da1c7340"/>
        <function-ref name="set" scoped="" ref="0x7f27da1c74d0"/>
        <function-ref name="clr" scoped="" ref="0x7f27da1c7660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f27da00e370" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="TempTestAppC.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f27da00e370"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da6496b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f27da649e20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f27da00a870"/>
        <function-ref name="fired" scoped="" ref="0x7f27da00de40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f27da00cc00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f27da00c780"/>
        <function-ref name="getdt" scoped="" ref="0x7f27da0091e0"/>
        <function-ref name="gett0" scoped="" ref="0x7f27da00acf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f27da00c300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f27da00d020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f27da00a260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f27da00d4f0"/>
        <function-ref name="stop" scoped="" ref="0x7f27da00d9c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f27da1af610" loc="49:../../../tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7f27da1af610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da6496b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f27da649e20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f27da1acc40"/>
        <function-ref name="fired" scoped="" ref="0x7f27da1ad1e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f27da1ac020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f27da1adae0"/>
        <function-ref name="getdt" scoped="" ref="0x7f27da1ab590"/>
        <function-ref name="gett0" scoped="" ref="0x7f27da1ab110"/>
        <function-ref name="isRunning" scoped="" ref="0x7f27da1ad660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f27da1ae390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f27da1ac630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f27da1ae860"/>
        <function-ref name="stop" scoped="" ref="0x7f27da1aed30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f27da1a61d0" loc="46:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7f27da1a61d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da6496b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f27da649e20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f27da1a2630"/>
        <function-ref name="fired" scoped="" ref="0x7f27da1a5c30"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f27da1a39d0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f27da1a3550"/>
        <function-ref name="getdt" scoped="" ref="0x7f27da1a1020"/>
        <function-ref name="gett0" scoped="" ref="0x7f27da1a2ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f27da1a30d0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f27da1a6dc0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f27da1a2020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f27da1a52e0"/>
        <function-ref name="stop" scoped="" ref="0x7f27da1a57b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f27da19da80" loc="47:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f27da19da80"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da6496b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f27da649e20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f27da19f6f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f27da1a7400" loc="45:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f27da1a7400"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f27da1a7780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f27da0aa870" loc="44:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f27da0aa870"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da6496b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f27da649e20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f27db523920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f27da0a7090"/>
        <function-ref name="fired" scoped="" ref="0x7f27da0a8090"/>
        <function-ref name="startAt" scoped="" ref="0x7f27da0a8a10"/>
        <function-ref name="isRunning" scoped="" ref="0x7f27da0a8550"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f27da0a7550"/>
        <function-ref name="start" scoped="" ref="0x7f27da0a96a0"/>
        <function-ref name="stop" scoped="" ref="0x7f27da0a9bb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f27da0aa020" loc="43:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f27da0aa020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f27da0aa3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f27d91f7bd0" loc="44:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f27d91f7bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da648290"/>
            <typename><typedef-ref name="T32khz" ref="0x7f27da648600"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f27d91f34e0"/>
        <function-ref name="fired" scoped="" ref="0x7f27d91f54e0"/>
        <function-ref name="startAt" scoped="" ref="0x7f27d91f5e60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f27d91f59a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f27d91f39a0"/>
        <function-ref name="start" scoped="" ref="0x7f27d91f6a80"/>
        <function-ref name="stop" scoped="" ref="0x7f27d91f5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f27d91f7380" loc="43:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f27d91f7380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f27d91f7700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f27d91dd0c0" loc="41:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f27d91dd0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27d91dd440"/>
        <function-ref name="setEvent" scoped="" ref="0x7f27d91dd5d0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f27d91dd760"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f27d91dd8f0"/>
        <function-ref name="fired" scoped="" ref="0x7f27d91dda80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f27d91e07b0" loc="39:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f27d91e07b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d91e0b30"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f27d91e0cc0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27d91e0e50"/>
        <function-ref name="get" scoped="" ref="0x7f27d91df020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27d91df1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27d91df340"/>
        <function-ref name="getMode" scoped="" ref="0x7f27d91df4d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27d91df660"/>
        <function-ref name="overflow" scoped="" ref="0x7f27d91df7f0"/>
        <function-ref name="setMode" scoped="" ref="0x7f27d91df980"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f27d91dfb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f27d91dfda0" loc="40:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f27d91dfda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f27d91de180"/>
        <function-ref name="getControl" scoped="" ref="0x7f27d91de310"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27d91de4a0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f27d91de630"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f27d91de7c0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27d91de950"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f27d91deae0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f27d91dec70"/>
        <function-ref name="setControl" scoped="" ref="0x7f27d91dee00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f27da178020" loc="52:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f27da178020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27da1783a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f27da178530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f27da1786c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f27da178850"/>
        <function-ref name="fired" scoped="" ref="0x7f27da1789e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f27da17d8b0" loc="50:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f27da17d8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27da17dc30"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f27da17ddc0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27da17c020"/>
        <function-ref name="get" scoped="" ref="0x7f27da17c1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27da17c340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da17c4d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f27da17c660"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da17c7f0"/>
        <function-ref name="overflow" scoped="" ref="0x7f27da17c980"/>
        <function-ref name="setMode" scoped="" ref="0x7f27da17cb10"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f27da17cca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f27da17b560" loc="51:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f27da17b560"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f27da17b8e0"/>
        <function-ref name="getControl" scoped="" ref="0x7f27da17ba70"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27da17bc00"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f27da17bd90"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f27da17a020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27da17a1b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f27da17a340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f27da17a4d0"/>
        <function-ref name="setControl" scoped="" ref="0x7f27da17a660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7f27d91d4da0" loc="49:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f27d91d4da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27d91d3180"/>
        <function-ref name="setEvent" scoped="" ref="0x7f27d91d3310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f27d91d34a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f27d91d3630"/>
        <function-ref name="fired" scoped="" ref="0x7f27d91d37c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f27d91d74c0" loc="47:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f27d91d74c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d91d7840"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f27d91d79d0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27d91d7b60"/>
        <function-ref name="get" scoped="" ref="0x7f27d91d7cf0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27d91d7e80"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27d91d5030"/>
        <function-ref name="getMode" scoped="" ref="0x7f27d91d51c0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27d91d5350"/>
        <function-ref name="overflow" scoped="" ref="0x7f27d91d54e0"/>
        <function-ref name="setMode" scoped="" ref="0x7f27d91d5670"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f27d91d5800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f27d91da340" loc="46:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f27d91da340"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da648290"/>
            <typename><typedef-ref name="T32khz" ref="0x7f27da648600"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f27d91d8ba0"/>
        <function-ref name="fired" scoped="" ref="0x7f27d91d9b80"/>
        <function-ref name="startAt" scoped="" ref="0x7f27d91d8550"/>
        <function-ref name="isRunning" scoped="" ref="0x7f27d91d8090"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f27d91d7090"/>
        <function-ref name="start" scoped="" ref="0x7f27d91d91b0"/>
        <function-ref name="stop" scoped="" ref="0x7f27d91d96c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f27d91dba30" loc="45:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f27d91dba30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f27d91dbdb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7f27d91d5a90" loc="48:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f27d91d5a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f27d91d5e10"/>
        <function-ref name="getControl" scoped="" ref="0x7f27d91d4020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27d91d41b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f27d91d4340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f27d91d44d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27d91d4660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f27d91d47f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f27d91d4980"/>
        <function-ref name="setControl" scoped="" ref="0x7f27d91d4b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f27da1238c0" loc="43:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <component-ref qname="CounterMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f27da1238c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da6496b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f27da649e20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f27db523920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f27da127700"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da1220d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da127bc0"/>
        <function-ref name="overflow" scoped="" ref="0x7f27da122590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Counter32khz" ref="0x7f27da1218e0" loc="43:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <component-ref qname="Msp430Counter32khzC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f27da1218e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da648290"/>
            <typename><typedef-ref name="T32khz" ref="0x7f27da648600"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f27da11e780"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da11d150"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da11ec40"/>
        <function-ref name="overflow" scoped="" ref="0x7f27da11d610"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f27da10cc50" loc="45:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f27da10cc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27da10b020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f27da10b1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27da10b340"/>
        <function-ref name="get" scoped="" ref="0x7f27da10b4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27da10b660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da10b7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f27da10b980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da10bb10"/>
        <function-ref name="overflow" scoped="" ref="0x7f27da10bca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f27da10be30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f27da10a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f27da11ab80" loc="44:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f27da11ab80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da648290"/>
            <typename><typedef-ref name="T32khz" ref="0x7f27da648600"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f27da1199b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da10c360"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da119e70"/>
        <function-ref name="overflow" scoped="" ref="0x7f27da10c820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7f27da0e80f0" loc="63:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x7f27da0e80f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da648290"/>
            <typename><typedef-ref name="T32khz" ref="0x7f27da648600"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f27da0e7020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da0e79a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da0e74e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f27da0e7e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f27da106cf0" loc="62:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f27da106cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da6496b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f27da649e20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f27db523920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f27da0ebb60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da0ea550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da0ea090"/>
        <function-ref name="overflow" scoped="" ref="0x7f27da0eaa10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f27d91f0020" loc="61:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f27d91f0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da6496b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f27da649e20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f27db523920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f27d91ee870"/>
        <function-ref name="fired" scoped="" ref="0x7f27d91ef840"/>
        <function-ref name="startAt" scoped="" ref="0x7f27d91ee220"/>
        <function-ref name="isRunning" scoped="" ref="0x7f27d91efd00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f27d91eed30"/>
        <function-ref name="start" scoped="" ref="0x7f27d91f0e30"/>
        <function-ref name="stop" scoped="" ref="0x7f27d91ef380"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7f27d91ea780" loc="73:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7f27d91ea780"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da648290"/>
            <typename><typedef-ref name="T32khz" ref="0x7f27da648600"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f27d91e6020"/>
        <function-ref name="fired" scoped="" ref="0x7f27d91e8020"/>
        <function-ref name="startAt" scoped="" ref="0x7f27d91e89a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f27d91e84e0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f27d91e64e0"/>
        <function-ref name="start" scoped="" ref="0x7f27d91e95d0"/>
        <function-ref name="stop" scoped="" ref="0x7f27d91e9ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f27d91ec3d0" loc="68:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f27d91ec3d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da6496b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f27da649e20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f27db523920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f27d91eb240"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27d91ebbc0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27d91eb700"/>
        <function-ref name="overflow" scoped="" ref="0x7f27d91ea0d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x7f27da0759c0" loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="fired" scoped="" ref="0x7f27da0759c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f27da075d40"/>
        <function-ref name="runTask" scoped="" ref="0x7f27da074020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f27da079850" loc="49:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f27da079850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da6496b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f27da649e20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f27db523920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f27da075090"/>
        <function-ref name="fired" scoped="" ref="0x7f27da076090"/>
        <function-ref name="startAt" scoped="" ref="0x7f27da076a10"/>
        <function-ref name="isRunning" scoped="" ref="0x7f27da076550"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f27da075550"/>
        <function-ref name="start" scoped="" ref="0x7f27da0786a0"/>
        <function-ref name="stop" scoped="" ref="0x7f27da078bb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f27da07e2f0" loc="48:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f27da07e2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da6496b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f27da649e20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f27da07a870"/>
        <function-ref name="fired" scoped="" ref="0x7f27da07de40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f27da07bc00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f27da07b780"/>
        <function-ref name="getdt" scoped="" ref="0x7f27da0791e0"/>
        <function-ref name="gett0" scoped="" ref="0x7f27da07acf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f27da07b300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f27da07d020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f27da07a260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f27da07d4f0"/>
        <function-ref name="stop" scoped="" ref="0x7f27da07d9c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x7f27da024a00" loc="71:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="updateFromTimer" scoped="" ref="0x7f27da024a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f27da024d80"/>
        <function-ref name="runTask" scoped="" ref="0x7f27da022020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7f27da029640" loc="49:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerFrom" scoped="" ref="0x7f27da029640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da6496b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f27da649e20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f27da025c40"/>
        <function-ref name="fired" scoped="" ref="0x7f27da0261e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f27da025020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f27da026ae0"/>
        <function-ref name="getdt" scoped="" ref="0x7f27da024590"/>
        <function-ref name="gett0" scoped="" ref="0x7f27da024110"/>
        <function-ref name="isRunning" scoped="" ref="0x7f27da026660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f27da027390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f27da025630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f27da027860"/>
        <function-ref name="stop" scoped="" ref="0x7f27da027d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f27da02f150" loc="48:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f27da02f150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da6496b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f27da649e20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f27da02a700"/>
        <function-ref name="fired" scoped="" ref="0x7f27da02dc30"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f27da02ca50"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f27da02c5b0"/>
        <function-ref name="getdt" scoped="" ref="0x7f27da029090"/>
        <function-ref name="gett0" scoped="" ref="0x7f27da02aba0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f27da02c110"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f27da02fd60"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f27da02a0d0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f27da02d2a0"/>
        <function-ref name="stop" scoped="" ref="0x7f27da02d790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f27da020790" loc="48:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f27da020790"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da6496b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f27da649e20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f27da0163f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f27da016a60" loc="49:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f27da016a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da6496b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f27da649e20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f27db523920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f27da015890"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27da014260"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27da015d50"/>
        <function-ref name="overflow" scoped="" ref="0x7f27da014720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f27da0028b0" loc="38:../../../tos/lib/printf/SerialPrintfC.nc">
      <component-ref qname="SerialPrintfC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f27da0028b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f27da002c30"/>
        <function-ref name="stop" scoped="" ref="0x7f27da002dc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Putchar" ref="0x7f27d9ff75f0" loc="44:../../../tos/lib/printf/SerialPrintfP.nc">
      <component-ref qname="SerialPrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Putchar" scoped="" ref="0x7f27d9ff75f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x7f27d9ff7970"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartByte" ref="0x7f27d9ffa990" loc="39:../../../tos/lib/printf/SerialPrintfP.nc">
      <component-ref qname="SerialPrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f27d9ffa990"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f27d9ffad10"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f27d9fff020"/>
        <function-ref name="receive" scoped="" ref="0x7f27d9fff1b0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f27d9fff340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f27d9fffe10" loc="43:../../../tos/lib/printf/SerialPrintfP.nc">
      <component-ref qname="SerialPrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f27d9fffe10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f27d9ffe1c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartControl" ref="0x7f27da004a20" loc="38:../../../tos/lib/printf/SerialPrintfP.nc">
      <component-ref qname="SerialPrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartControl" scoped="" ref="0x7f27da004a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f27da004da0"/>
        <function-ref name="stop" scoped="" ref="0x7f27da000020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f27d9fff680" loc="42:../../../tos/lib/printf/SerialPrintfP.nc">
      <component-ref qname="SerialPrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f27d9fff680"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f27d9fffa00"/>
        <function-ref name="stop" scoped="" ref="0x7f27d9fffb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f27d9febd30" loc="6:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f27d9febd30"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f27d9fea0e0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f27d9fea270"/>
        <function-ref name="receive" scoped="" ref="0x7f27d9fea400"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f27d9fea590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f27d9fe1d20" loc="5:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f27d9fe1d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f27d9feb0e0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f27d9feb270"/>
        <function-ref name="receive" scoped="" ref="0x7f27d9feb400"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f27d9feb590"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f27d9feb720"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f27d9feb8b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f27d9feba40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f27da001680" loc="4:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f27da001680"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f27da001a00"/>
        <function-ref name="stop" scoped="" ref="0x7f27da001b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f27d9d5dc70" loc="45:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f27d9d5dc70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f27d9d5b020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f27d9d5b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f27d9d5a440" loc="47:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f27d9d5a440"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f27d9d5a7c0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f27d9d5a950"/>
        <function-ref name="receive" scoped="" ref="0x7f27d9d5aae0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f27d9d5ac70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7f27d9d59020" loc="49:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f27d9d59020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f27d9d593a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f27d9d5b440" loc="46:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f27d9d5b440"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f27d9d5b7c0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f27d9d5b950"/>
        <function-ref name="receive" scoped="" ref="0x7f27d9d5bae0"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f27d9d5bc70"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f27d9d5be00"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f27d9d5a020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f27d9d5a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f27d9d5d020" loc="44:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f27d9d5d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d9d5d3a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f27d9d5d530"/>
        <function-ref name="request" scoped="" ref="0x7f27d9d5d6c0"/>
        <function-ref name="granted" scoped="" ref="0x7f27d9d5d850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d9d5d9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f27d9f7b8e0" loc="42:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f27d9f7b8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f27d9f7bc60"/>
        <function-ref name="configure" scoped="" ref="0x7f27d9f7bdf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f27d9f7dd00" loc="44:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f27d9f7dd00"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f27d9f790a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f27d9f79230"/>
        <function-ref name="receive" scoped="" ref="0x7f27d9f793c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f27d9f79550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7f27d9f771d0" loc="47:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f27d9f771d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f27d9f77550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f27d9f7e670" loc="43:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f27d9f7e670"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f27d9f7e9f0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f27d9f7eb80"/>
        <function-ref name="receive" scoped="" ref="0x7f27d9f7ed10"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f27d9f7d020"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f27d9f7d1b0"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f27d9f7d340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f27d9f7d4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7f27d9f79e50" loc="46:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7f27d9f79e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d9f78210"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f27d9f783a0"/>
        <function-ref name="request" scoped="" ref="0x7f27d9f78530"/>
        <function-ref name="granted" scoped="" ref="0x7f27d9f786c0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d9f78850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f27d9f82c80" loc="41:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f27d9f82c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d9f7f0a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f27d9f7f230"/>
        <function-ref name="request" scoped="" ref="0x7f27d9f7f3c0"/>
        <function-ref name="granted" scoped="" ref="0x7f27d9f7f550"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d9f7f6e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7f27d9f72710" loc="48:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7f27d9f72710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f27d9f72a90"/>
        <function-ref name="txDone" scoped="" ref="0x7f27d9f72c20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f27d9eeda20" loc="44:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f27d9eeda20"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f27d9eeddc0"/>
        <function-ref name="configure" scoped="" ref="0x7f27d9eec020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f27d9eeb570" loc="46:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f27d9eeb570"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f27d9eeb910"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f27d9eebaa0"/>
        <function-ref name="receive" scoped="" ref="0x7f27d9eebc30"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f27d9eebdc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7f27d9ee9020" loc="49:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f27d9ee9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f27d9ee93c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Usart" ref="0x7f27d9ee9690" loc="50:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7f27d9ee9690"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f27d9ee9a10"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f27d9ee9ba0"/>
        <function-ref name="setUctl" scoped="" ref="0x7f27d9ee9d30"/>
        <function-ref name="enableUart" scoped="" ref="0x7f27d9ee8020"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f27d9ee81b0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f27d9ee8340"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f27d9ee84d0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f27d9ee8660"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f27d9ee87f0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f27d9ee8980"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f27d9ee8b10"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f27d9ee8ca0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f27d9ee8e30"/>
        <function-ref name="getUbr" scoped="" ref="0x7f27d9ee7120"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f27d9ee72b0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f27d9ee7440"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f27d9ee75d0"/>
        <function-ref name="isUart" scoped="" ref="0x7f27d9ee7760"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f27d9ee78f0"/>
        <function-ref name="isSpi" scoped="" ref="0x7f27d9ee7a80"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f27d9ee7c10"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f27d9ee7da0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f27d9ee6020"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f27d9ee61b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f27d9ee6340"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f27d9ee66d0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f27d9ee6860"/>
        <function-ref name="setUbr" scoped="" ref="0x7f27d9ee69f0"/>
        <function-ref name="tx" scoped="" ref="0x7f27d9ee6b80"/>
        <function-ref name="getUctl" scoped="" ref="0x7f27d9ee6d10"/>
        <function-ref name="disableUart" scoped="" ref="0x7f27d9ee5020"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f27d9ee51b0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f27d9ee5340"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f27d9ee54d0"/>
        <function-ref name="rx" scoped="" ref="0x7f27d9ee5660"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f27d9ee57f0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f27d9ee5980"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f27d9ee5b10"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f27d9ee5ca0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f27d9ee5e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f27d9eec3e0" loc="45:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f27d9eec3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f27d9eec780"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f27d9eec910"/>
        <function-ref name="receive" scoped="" ref="0x7f27d9eecaa0"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f27d9eecc30"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f27d9eecdc0"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f27d9eeb020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f27d9eeb1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f27d9ee4c90" loc="52:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f27d9ee4c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da648290"/>
            <typename><typedef-ref name="T32khz" ref="0x7f27da648600"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f27d9ee3ac0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27d9ee24e0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27d9ee2020"/>
        <function-ref name="overflow" scoped="" ref="0x7f27d9ee29a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7f27d9eea230" loc="48:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7f27d9eea230"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d9eea5d0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f27d9eea760"/>
        <function-ref name="request" scoped="" ref="0x7f27d9eea8f0"/>
        <function-ref name="granted" scoped="" ref="0x7f27d9eeaa80"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d9eeac10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f27d9eefb10" loc="43:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f27d9eefb10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d9eed020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f27d9eed1b0"/>
        <function-ref name="request" scoped="" ref="0x7f27d9eed340"/>
        <function-ref name="granted" scoped="" ref="0x7f27d9eed4d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d9eed660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7f27d9ee4290" loc="51:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7f27d9ee4290"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f27d9ee4630"/>
        <function-ref name="txDone" scoped="" ref="0x7f27d9ee47c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f27d9ee2dd0" loc="53:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f27d9ee2dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f27d9ee0180"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f27d9ee0310"/>
        <function-ref name="led1On" scoped="" ref="0x7f27d9ee04a0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f27d9ee0630"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f27d9ee07c0"/>
        <function-ref name="get" scoped="" ref="0x7f27d9ee0950"/>
        <function-ref name="led1Off" scoped="" ref="0x7f27d9ee0ae0"/>
        <function-ref name="led2On" scoped="" ref="0x7f27d9edf1b0"/>
        <function-ref name="set" scoped="" ref="0x7f27d9ee0e00"/>
        <function-ref name="led2Off" scoped="" ref="0x7f27d9ee0c70"/>
        <function-ref name="led0On" scoped="" ref="0x7f27d9edf020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7f27d9ed13b0" loc="78:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <component-ref qname="HplMsp430Usart1C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f27d9ed13b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f27d9ed1730"/>
        <function-ref name="txDone" scoped="" ref="0x7f27d9ed18c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x7f27d9ed40d0" loc="76:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <component-ref qname="HplMsp430Usart1C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f27d9ed40d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f27d9ed4450"/>
        <function-ref name="stop" scoped="" ref="0x7f27d9ed45e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7f27d9ed4900" loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <component-ref qname="HplMsp430Usart1C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f27d9ed4900"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f27d9ed4c80"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f27d9ed4e10"/>
        <function-ref name="setUctl" scoped="" ref="0x7f27d9ed7020"/>
        <function-ref name="enableUart" scoped="" ref="0x7f27d9ed71b0"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f27d9ed7340"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f27d9ed74d0"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f27d9ed7660"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f27d9ed77f0"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f27d9ed7980"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f27d9ed7b10"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f27d9ed7ca0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f27d9ed7e30"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f27d9ed6020"/>
        <function-ref name="getUbr" scoped="" ref="0x7f27d9ed62b0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f27d9ed6440"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f27d9ed65d0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f27d9ed6760"/>
        <function-ref name="isUart" scoped="" ref="0x7f27d9ed68f0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f27d9ed6a80"/>
        <function-ref name="isSpi" scoped="" ref="0x7f27d9ed6c10"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f27d9ed6da0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f27d9ed3020"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f27d9ed31b0"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f27d9ed3340"/>
        <function-ref name="getMode" scoped="" ref="0x7f27d9ed34d0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f27d9ed3860"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f27d9ed39f0"/>
        <function-ref name="setUbr" scoped="" ref="0x7f27d9ed3b80"/>
        <function-ref name="tx" scoped="" ref="0x7f27d9ed3d10"/>
        <function-ref name="getUctl" scoped="" ref="0x7f27d9ed2020"/>
        <function-ref name="disableUart" scoped="" ref="0x7f27d9ed21b0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f27d9ed2340"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f27d9ed24d0"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f27d9ed2660"/>
        <function-ref name="rx" scoped="" ref="0x7f27d9ed27f0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f27d9ed2980"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f27d9ed2b10"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f27d9ed2ca0"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f27d9ed2e30"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f27d9ed1020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7f27d9ec4670" loc="80:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7f27d9ec4670"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27d9ec49f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27d9ec4b80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27d9ec4d10"/>
        <function-ref name="toggle" scoped="" ref="0x7f27d9ec3020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27d9ec31b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27d9ec3340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27d9ec34d0"/>
        <function-ref name="get" scoped="" ref="0x7f27d9ec3660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27d9ec37f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27d9ec3980"/>
        <function-ref name="set" scoped="" ref="0x7f27d9ec3b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27d9ec3ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27d9ec3e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27d9ec2120"/>
        <function-ref name="clr" scoped="" ref="0x7f27d9ec22b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f27d9ec9dc0" loc="76:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f27d9ec9dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f27d9ec8180"/>
        <function-ref name="txDone" scoped="" ref="0x7f27d9ec8310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="URXD" ref="0x7f27d9ec2670" loc="81:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD" scoped="" ref="0x7f27d9ec2670"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27d9ec29f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27d9ec2b80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27d9ec2d10"/>
        <function-ref name="toggle" scoped="" ref="0x7f27d9ec1020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27d9ec11b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27d9ec1340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27d9ec14d0"/>
        <function-ref name="get" scoped="" ref="0x7f27d9ec1660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27d9ec17f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27d9ec1980"/>
        <function-ref name="set" scoped="" ref="0x7f27d9ec1b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27d9ec1ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27d9ec1e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27d9ec0120"/>
        <function-ref name="clr" scoped="" ref="0x7f27d9ec02b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UTXD" ref="0x7f27d9ec0670" loc="82:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD" scoped="" ref="0x7f27d9ec0670"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27d9ec09f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27d9ec0b80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27d9ec0d10"/>
        <function-ref name="toggle" scoped="" ref="0x7f27d9ebf020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27d9ebf1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27d9ebf340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27d9ebf4d0"/>
        <function-ref name="get" scoped="" ref="0x7f27d9ebf660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27d9ebf7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27d9ebf980"/>
        <function-ref name="set" scoped="" ref="0x7f27d9ebfb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27d9ebfca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27d9ebfe30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27d9ebe120"/>
        <function-ref name="clr" scoped="" ref="0x7f27d9ebe2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Usart" ref="0x7f27d9ecd020" loc="75:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7f27d9ecd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f27d9ecd3a0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f27d9ecd530"/>
        <function-ref name="setUctl" scoped="" ref="0x7f27d9ecd6c0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f27d9ecd850"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f27d9ecd9e0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f27d9ecdb70"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f27d9ecdd00"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f27d9ecc020"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f27d9ecc1b0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f27d9ecc340"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f27d9ecc4d0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f27d9ecc660"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f27d9ecc7f0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f27d9ecca80"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f27d9eccc10"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f27d9eccda0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f27d9ecb020"/>
        <function-ref name="isUart" scoped="" ref="0x7f27d9ecb1b0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f27d9ecb340"/>
        <function-ref name="isSpi" scoped="" ref="0x7f27d9ecb4d0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f27d9ecb660"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f27d9ecb7f0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f27d9ecb980"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f27d9ecbb10"/>
        <function-ref name="getMode" scoped="" ref="0x7f27d9ecbca0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f27d9eca220"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f27d9eca3b0"/>
        <function-ref name="setUbr" scoped="" ref="0x7f27d9eca540"/>
        <function-ref name="tx" scoped="" ref="0x7f27d9eca6d0"/>
        <function-ref name="getUctl" scoped="" ref="0x7f27d9eca860"/>
        <function-ref name="disableUart" scoped="" ref="0x7f27d9eca9f0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f27d9ecab80"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f27d9ecad10"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f27d9ec9020"/>
        <function-ref name="rx" scoped="" ref="0x7f27d9ec91b0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f27d9ec9340"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f27d9ec94d0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f27d9ec9660"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f27d9ec97f0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f27d9ec9980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x7f27d9ed0710" loc="74:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f27d9ed0710"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f27d9ed0a90"/>
        <function-ref name="stop" scoped="" ref="0x7f27d9ed0c20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SOMI" ref="0x7f27d9ec6670" loc="79:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI" scoped="" ref="0x7f27d9ec6670"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27d9ec69f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27d9ec6b80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27d9ec6d10"/>
        <function-ref name="toggle" scoped="" ref="0x7f27d9ec5020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27d9ec51b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27d9ec5340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27d9ec54d0"/>
        <function-ref name="get" scoped="" ref="0x7f27d9ec5660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27d9ec57f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27d9ec5980"/>
        <function-ref name="set" scoped="" ref="0x7f27d9ec5b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27d9ec5ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27d9ec5e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27d9ec4120"/>
        <function-ref name="clr" scoped="" ref="0x7f27d9ec42b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7f27d9ec86d0" loc="78:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7f27d9ec86d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27d9ec8a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f27d9ec8be0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27d9ec8d70"/>
        <function-ref name="toggle" scoped="" ref="0x7f27d9ec7020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27d9ec71b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27d9ec7340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27d9ec74d0"/>
        <function-ref name="get" scoped="" ref="0x7f27d9ec7660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27d9ec77f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27d9ec7980"/>
        <function-ref name="set" scoped="" ref="0x7f27d9ec7b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27d9ec7ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27d9ec7e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27d9ec6120"/>
        <function-ref name="clr" scoped="" ref="0x7f27d9ec62b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f27d9e3f110" loc="43:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <component-ref qname="Counter32khz16C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f27d9e3f110"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da648290"/>
            <typename><typedef-ref name="T32khz" ref="0x7f27da648600"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f27d9e3e020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27d9e3e9a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27d9e3e4e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f27d9e3ee60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f27d9154c70" loc="43:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f27d9154c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f27d9152020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f27d91521b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f27d914dd70" loc="48:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f27d914dd70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f27d914c180"/>
        <function-ref name="configure" scoped="" ref="0x7f27d914c310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7f27d914d5d0" loc="46:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f27d914d5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f27d914d950"/>
        <function-ref name="txDone" scoped="" ref="0x7f27d914dae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f27d9154020" loc="42:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f27d9154020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d91543a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f27d9154530"/>
        <function-ref name="request" scoped="" ref="0x7f27d91546c0"/>
        <function-ref name="granted" scoped="" ref="0x7f27d9154850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d91549e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7f27d9152be0" loc="45:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f27d9152be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f27d9151020"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f27d91511b0"/>
        <function-ref name="setUctl" scoped="" ref="0x7f27d9151340"/>
        <function-ref name="enableUart" scoped="" ref="0x7f27d91514d0"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f27d9151660"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f27d91517f0"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f27d9151980"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f27d9151b10"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f27d9151ca0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f27d9151e30"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f27d9150020"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f27d91501b0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f27d9150340"/>
        <function-ref name="getUbr" scoped="" ref="0x7f27d91505d0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f27d9150760"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f27d91508f0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f27d9150a80"/>
        <function-ref name="isUart" scoped="" ref="0x7f27d9150c10"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f27d9150da0"/>
        <function-ref name="isSpi" scoped="" ref="0x7f27d914f020"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f27d914f1b0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f27d914f340"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f27d914f4d0"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f27d914f660"/>
        <function-ref name="getMode" scoped="" ref="0x7f27d914f7f0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f27d914fb80"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f27d914fd10"/>
        <function-ref name="setUbr" scoped="" ref="0x7f27d914e020"/>
        <function-ref name="tx" scoped="" ref="0x7f27d914e1b0"/>
        <function-ref name="getUctl" scoped="" ref="0x7f27d914e340"/>
        <function-ref name="disableUart" scoped="" ref="0x7f27d914e4d0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f27d914e660"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f27d914e7f0"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f27d914e980"/>
        <function-ref name="rx" scoped="" ref="0x7f27d914eb10"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f27d914eca0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f27d914ee30"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f27d914d020"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f27d914d1b0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f27d914d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f27d9152440" loc="44:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f27d9152440"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f27d91527c0"/>
        <function-ref name="userId" scoped="" ref="0x7f27d9152950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f27d9e23d50" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f27d9e23d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f27d9e22100"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f27d9e22290"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f27d9e21370" loc="45:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f27d9e21370"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f27d9e216f0"/>
        <function-ref name="configure" scoped="" ref="0x7f27d9e21880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f27d9e27cd0" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f27d9e27cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f27d9e240a0"/>
        <function-ref name="txDone" scoped="" ref="0x7f27d9e24230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f27d9e24a60" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f27d9e24a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d9e24de0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f27d9e23020"/>
        <function-ref name="request" scoped="" ref="0x7f27d9e231b0"/>
        <function-ref name="granted" scoped="" ref="0x7f27d9e23340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d9e234d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f27d9e22590" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f27d9e22590"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f27d9e22910"/>
        <function-ref name="userId" scoped="" ref="0x7f27d9e22aa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7f27d9e0b020" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f27d9e0b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f27d9e0b3a0"/>
        <function-ref name="userId" scoped="" ref="0x7f27d9e0b530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f27d9e1d0d0" loc="39:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f27d9e1d0d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f27d9e1d470"/>
        <function-ref name="txDone" scoped="" ref="0x7f27d9e1d600"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawI2CInterrupts" ref="0x7f27d9e0c880" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7f27d9e0c880"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f27d9e0cc00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f27d9e1da00" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f27d9e1da00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f27d9e1dda0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawInterrupts" ref="0x7f27d9e0c0a0" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawInterrupts" scoped="" ref="0x7f27d9e0c0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f27d9e0c420"/>
        <function-ref name="txDone" scoped="" ref="0x7f27d9e0c5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f27d9d91020" loc="92:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f27d9d91020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f27d9d913c0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f27d9d91550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f27d9d90cd0" loc="96:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f27d9d90cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f27d9d8f0a0"/>
        <function-ref name="configure" scoped="" ref="0x7f27d9d8f230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f27d9d917a0" loc="93:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f27d9d917a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d9d91b20"/>
        <function-ref name="requested" scoped="" ref="0x7f27d9d91cb0"/>
        <function-ref name="granted" scoped="" ref="0x7f27d9d91e40"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d9d90020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f27d9d901b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f27d9d92210" loc="91:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f27d9d92210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d9d925b0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f27d9d92740"/>
        <function-ref name="request" scoped="" ref="0x7f27d9d928d0"/>
        <function-ref name="granted" scoped="" ref="0x7f27d9d92a60"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d9d92bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f27d9d90400" loc="94:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f27d9d90400"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f27d9d90780"/>
        <function-ref name="userId" scoped="" ref="0x7f27d9d90910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f27d90d4020" loc="44:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f27d90d4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f27d90d43a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f27d90d4630" loc="45:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FcfsQueue" scoped="" ref="0x7f27d90d4630"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f27d90d49b0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f27d90d4b40"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f27d90d4cd0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f27d90d4e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f27d90d16c0" loc="55:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f27d90d16c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f27d90d1a60"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f27d90d1bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f27d90cf400" loc="60:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f27d90cf400"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f27d90cf7a0"/>
        <function-ref name="configure" scoped="" ref="0x7f27d90cf930"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f27d90cfbc0" loc="61:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f27d90cfbc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f27d90ce020"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f27d90ce1b0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f27d90ce340"/>
        <function-ref name="dequeue" scoped="" ref="0x7f27d90ce4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f27d90d1e40" loc="56:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f27d90d1e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d90d01e0"/>
        <function-ref name="requested" scoped="" ref="0x7f27d90d0370"/>
        <function-ref name="granted" scoped="" ref="0x7f27d90d0500"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d90d0690"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f27d90d0820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f27d90ce720" loc="62:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f27d90ce720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f27d90ceaa0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f27d90cec30"/>
        <function-ref name="led1On" scoped="" ref="0x7f27d90cedc0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f27d90cc020"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f27d90cc1b0"/>
        <function-ref name="get" scoped="" ref="0x7f27d90cc340"/>
        <function-ref name="led1Off" scoped="" ref="0x7f27d90cc4d0"/>
        <function-ref name="led0On" scoped="" ref="0x7f27d90ccb10"/>
        <function-ref name="set" scoped="" ref="0x7f27d90cc7f0"/>
        <function-ref name="led2On" scoped="" ref="0x7f27d90cc660"/>
        <function-ref name="led2Off" scoped="" ref="0x7f27d90cc980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f27d90d2850" loc="54:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f27d90d2850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d90d2bf0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f27d90d2d80"/>
        <function-ref name="request" scoped="" ref="0x7f27d90d1020"/>
        <function-ref name="granted" scoped="" ref="0x7f27d90d11b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d90d1340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f27d90d0a70" loc="57:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f27d90d0a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f27d90d0df0"/>
        <function-ref name="userId" scoped="" ref="0x7f27d90cf020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7f27d90ccde0" loc="75:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantedTask" scoped="" ref="0x7f27d90ccde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f27d90cb180"/>
        <function-ref name="runTask" scoped="" ref="0x7f27d90cb310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x7f27d9d76400" loc="72:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PowerDownCleanup" scoped="" ref="0x7f27d9d76400"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x7f27d9d76780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x7f27d9d769d0" loc="73:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f27d9d769d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d9d76d50"/>
        <function-ref name="requested" scoped="" ref="0x7f27d9d74020"/>
        <function-ref name="granted" scoped="" ref="0x7f27d9d741b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d9d74340"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f27d9d744d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x7f27d9d8bb20" loc="70:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f27d9d8bb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f27d9d76020"/>
        <function-ref name="stop" scoped="" ref="0x7f27d9d761b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7f27d9d74720" loc="74:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f27d9d74720"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f27d9d74aa0"/>
        <function-ref name="userId" scoped="" ref="0x7f27d9d74c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x7f27d909cbd0" loc="62:../../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PowerDownCleanup" scoped="" ref="0x7f27d909cbd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x7f27d909b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x7f27d909b270" loc="63:../../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f27d909b270"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d909b5f0"/>
        <function-ref name="requested" scoped="" ref="0x7f27d909b780"/>
        <function-ref name="granted" scoped="" ref="0x7f27d909b910"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d909baa0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f27d909bc30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x7f27d909c470" loc="60:../../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f27d909c470"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f27d909c7f0"/>
        <function-ref name="stop" scoped="" ref="0x7f27d909c980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7f27d909be80" loc="64:../../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f27d909be80"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f27d909a220"/>
        <function-ref name="userId" scoped="" ref="0x7f27d909a3b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430UartConfigure" ref="0x7f27d9d558e0" loc="3:../../../tos/platforms/telosa/TelosSerialP.nc">
      <component-ref qname="TelosSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f27d9d558e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f27d9d55c60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7f27d9d54020" loc="4:../../../tos/platforms/telosa/TelosSerialP.nc">
      <component-ref qname="TelosSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f27d9d54020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d9d543a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f27d9d54530"/>
        <function-ref name="request" scoped="" ref="0x7f27d9d546c0"/>
        <function-ref name="granted" scoped="" ref="0x7f27d9d54850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d9d549e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f27d9d55080" loc="2:../../../tos/platforms/telosa/TelosSerialP.nc">
      <component-ref qname="TelosSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f27d9d55080"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f27d9d55400"/>
        <function-ref name="stop" scoped="" ref="0x7f27d9d55590"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Putchar" ref="0x7f27d9d46080" loc="43:../../../tos/lib/printf/PutcharC.nc">
      <component-ref qname="PutcharC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Putchar" scoped="" ref="0x7f27d9d46080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x7f27d9d46400"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f27d9d45cd0" loc="94:../../../tos/lib/printf/PutcharP.nc">
      <component-ref qname="PutcharP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f27d9d45cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f27d9d420a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Putchar" ref="0x7f27d9d42380" loc="95:../../../tos/lib/printf/PutcharP.nc">
      <component-ref qname="PutcharP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Putchar" scoped="" ref="0x7f27d9d42380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x7f27d9d42700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HumidityMetadata" ref="0x7f27d9ac4900" loc="49:../../../tos/platforms/telosa/chips/sht11/SensirionSht11C.nc">
      <component-ref qname="TempTestAppC.TempSensor"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HumidityMetadata" scoped="" ref="0x7f27d9ac4900"/></type-interface>
      <instance>
        <interfacedef-ref qname="DeviceMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="getSignificantBits" scoped="" ref="0x7f27d9ac4c80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Humidity" ref="0x7f27d9ac7240" loc="48:../../../tos/platforms/telosa/chips/sht11/SensirionSht11C.nc">
      <component-ref qname="TempTestAppC.TempSensor"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Humidity" scoped="" ref="0x7f27d9ac7240"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f27d9ac7e30"/>
        <function-ref name="readDone" scoped="" ref="0x7f27d9ac4300"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TemperatureMetadata" ref="0x7f27d9ac8aa0" loc="47:../../../tos/platforms/telosa/chips/sht11/SensirionSht11C.nc">
      <component-ref qname="TempTestAppC.TempSensor"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TemperatureMetadata" scoped="" ref="0x7f27d9ac8aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="DeviceMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="getSignificantBits" scoped="" ref="0x7f27d9ac8e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Temperature" ref="0x7f27d9ac9310" loc="46:../../../tos/platforms/telosa/chips/sht11/SensirionSht11C.nc">
      <component-ref qname="TempTestAppC.TempSensor"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Temperature" scoped="" ref="0x7f27d9ac9310"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f27d9ac8020"/>
        <function-ref name="readDone" scoped="" ref="0x7f27d9ac84a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Sht11Hum" ref="0x7f27d908ac50" loc="54:../../../tos/chips/sht11/SensirionSht11ReaderP.nc">
      <component-ref qname="TempTestAppC.TempSensor.SensirionSht11ReaderP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Sht11Hum" scoped="" ref="0x7f27d908ac50"/></type-interface>
      <instance>
        <interfacedef-ref qname="SensirionSht11"/>
      </instance>
      <interface-functions>
        <function-ref name="measureHumidityDone" scoped="" ref="0x7f27d9089020"/>
        <function-ref name="readStatusReg" scoped="" ref="0x7f27d90891b0"/>
        <function-ref name="measureHumidity" scoped="" ref="0x7f27d9089340"/>
        <function-ref name="measureTemperature" scoped="" ref="0x7f27d90894d0"/>
        <function-ref name="writeStatusReg" scoped="" ref="0x7f27d9089660"/>
        <function-ref name="reset" scoped="" ref="0x7f27d90897f0"/>
        <function-ref name="writeStatusRegDone" scoped="" ref="0x7f27d9089980"/>
        <function-ref name="readStatusRegDone" scoped="" ref="0x7f27d9089b10"/>
        <function-ref name="resetDone" scoped="" ref="0x7f27d9089ca0"/>
        <function-ref name="measureTemperatureDone" scoped="" ref="0x7f27d9089e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HumidityMetadata" ref="0x7f27d908f020" loc="48:../../../tos/chips/sht11/SensirionSht11ReaderP.nc">
      <component-ref qname="TempTestAppC.TempSensor.SensirionSht11ReaderP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HumidityMetadata" scoped="" ref="0x7f27d908f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="DeviceMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="getSignificantBits" scoped="" ref="0x7f27d908f3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Humidity" ref="0x7f27d908f790" loc="49:../../../tos/chips/sht11/SensirionSht11ReaderP.nc">
      <component-ref qname="TempTestAppC.TempSensor.SensirionSht11ReaderP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Humidity" scoped="" ref="0x7f27d908f790"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f27d908e3b0"/>
        <function-ref name="readDone" scoped="" ref="0x7f27d908e830"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TemperatureMetadata" ref="0x7f27d9091160" loc="46:../../../tos/chips/sht11/SensirionSht11ReaderP.nc">
      <component-ref qname="TempTestAppC.TempSensor.SensirionSht11ReaderP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TemperatureMetadata" scoped="" ref="0x7f27d9091160"/></type-interface>
      <instance>
        <interfacedef-ref qname="DeviceMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="getSignificantBits" scoped="" ref="0x7f27d90914e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TempResource" ref="0x7f27d908ee30" loc="51:../../../tos/chips/sht11/SensirionSht11ReaderP.nc">
      <component-ref qname="TempTestAppC.TempSensor.SensirionSht11ReaderP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TempResource" scoped="" ref="0x7f27d908ee30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d908c1e0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f27d908c370"/>
        <function-ref name="request" scoped="" ref="0x7f27d908c500"/>
        <function-ref name="granted" scoped="" ref="0x7f27d908c690"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d908c820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Sht11Temp" ref="0x7f27d908b7b0" loc="53:../../../tos/chips/sht11/SensirionSht11ReaderP.nc">
      <component-ref qname="TempTestAppC.TempSensor.SensirionSht11ReaderP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Sht11Temp" scoped="" ref="0x7f27d908b7b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SensirionSht11"/>
      </instance>
      <interface-functions>
        <function-ref name="measureHumidityDone" scoped="" ref="0x7f27d908bb30"/>
        <function-ref name="readStatusReg" scoped="" ref="0x7f27d908bcc0"/>
        <function-ref name="measureHumidity" scoped="" ref="0x7f27d908be50"/>
        <function-ref name="measureTemperature" scoped="" ref="0x7f27d908a020"/>
        <function-ref name="writeStatusReg" scoped="" ref="0x7f27d908a1b0"/>
        <function-ref name="reset" scoped="" ref="0x7f27d908a340"/>
        <function-ref name="writeStatusRegDone" scoped="" ref="0x7f27d908a4d0"/>
        <function-ref name="readStatusRegDone" scoped="" ref="0x7f27d908a660"/>
        <function-ref name="resetDone" scoped="" ref="0x7f27d908a7f0"/>
        <function-ref name="measureTemperatureDone" scoped="" ref="0x7f27d908a980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HumResource" ref="0x7f27d908caf0" loc="52:../../../tos/chips/sht11/SensirionSht11ReaderP.nc">
      <component-ref qname="TempTestAppC.TempSensor.SensirionSht11ReaderP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HumResource" scoped="" ref="0x7f27d908caf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d908ce70"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f27d908b030"/>
        <function-ref name="request" scoped="" ref="0x7f27d908b1c0"/>
        <function-ref name="granted" scoped="" ref="0x7f27d908b350"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d908b4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Temperature" ref="0x7f27d90918d0" loc="47:../../../tos/chips/sht11/SensirionSht11ReaderP.nc">
      <component-ref qname="TempTestAppC.TempSensor.SensirionSht11ReaderP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Temperature" scoped="" ref="0x7f27d90918d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f27d9090560"/>
        <function-ref name="readDone" scoped="" ref="0x7f27d90909e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SensirionSht11" ref="0x7f27d9cec2c0" loc="45:../../../tos/platforms/telosa/chips/sht11/HalSensirionSht11C.nc">
      <component-ref qname="HalSensirionSht11C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SensirionSht11" scoped="" ref="0x7f27d9cec2c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SensirionSht11"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="measureHumidityDone" scoped="" ref="0x7f27d9cec640"/>
        <function-ref name="readStatusReg" scoped="" ref="0x7f27d9cec7d0"/>
        <function-ref name="measureHumidity" scoped="" ref="0x7f27d9cec960"/>
        <function-ref name="measureTemperature" scoped="" ref="0x7f27d9cecaf0"/>
        <function-ref name="writeStatusReg" scoped="" ref="0x7f27d9cecc80"/>
        <function-ref name="reset" scoped="" ref="0x7f27d9cece10"/>
        <function-ref name="writeStatusRegDone" scoped="" ref="0x7f27d9ceb020"/>
        <function-ref name="readStatusRegDone" scoped="" ref="0x7f27d9ceb1b0"/>
        <function-ref name="resetDone" scoped="" ref="0x7f27d9ceb340"/>
        <function-ref name="measureTemperatureDone" scoped="" ref="0x7f27d9ceb4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f27d9ced020" loc="44:../../../tos/platforms/telosa/chips/sht11/HalSensirionSht11C.nc">
      <component-ref qname="HalSensirionSht11C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f27d9ced020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d9ced3a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f27d9ced530"/>
        <function-ref name="request" scoped="" ref="0x7f27d9ced6c0"/>
        <function-ref name="granted" scoped="" ref="0x7f27d9ced850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d9ced9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="InterruptDATA" ref="0x7f27d9c6c610" loc="58:../../../tos/chips/sht11/SensirionSht11LogicP.nc">
      <component-ref qname="HalSensirionSht11C.SensirionSht11LogicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InterruptDATA" scoped="" ref="0x7f27d9c6c610"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f27d9c6c990"/>
        <function-ref name="disable" scoped="" ref="0x7f27d9c6cb20"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f27d9c6ccb0"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f27d9c6ce40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="readSensor" ref="0x7f27d9c642f0" loc="102:../../../tos/chips/sht11/SensirionSht11LogicP.nc">
      <component-ref qname="HalSensirionSht11C.SensirionSht11LogicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="readSensor" scoped="" ref="0x7f27d9c642f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f27d9c64670"/>
        <function-ref name="runTask" scoped="" ref="0x7f27d9c64800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalStatusDone" ref="0x7f27d9c65ac0" loc="103:../../../tos/chips/sht11/SensirionSht11LogicP.nc">
      <component-ref qname="HalSensirionSht11C.SensirionSht11LogicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="signalStatusDone" scoped="" ref="0x7f27d9c65ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f27d9c65e40"/>
        <function-ref name="runTask" scoped="" ref="0x7f27d9c64020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CLOCK" ref="0x7f27d9c6d480" loc="57:../../../tos/chips/sht11/SensirionSht11LogicP.nc">
      <component-ref qname="HalSensirionSht11C.SensirionSht11LogicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CLOCK" scoped="" ref="0x7f27d9c6d480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27d9c6d800"/>
        <function-ref name="isInput" scoped="" ref="0x7f27d9c6d990"/>
        <function-ref name="toggle" scoped="" ref="0x7f27d9c6db20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27d9c6dcb0"/>
        <function-ref name="get" scoped="" ref="0x7f27d9c6de40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27d9c6c020"/>
        <function-ref name="set" scoped="" ref="0x7f27d9c6c1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f27d9c6c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SensirionSht11" ref="0x7f27d9c70c90" loc="54:../../../tos/chips/sht11/SensirionSht11LogicP.nc">
      <component-ref qname="HalSensirionSht11C.SensirionSht11LogicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SensirionSht11" scoped="" ref="0x7f27d9c70c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="SensirionSht11"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="measureHumidityDone" scoped="" ref="0x7f27d9c6f0a0"/>
        <function-ref name="readStatusReg" scoped="" ref="0x7f27d9c6f230"/>
        <function-ref name="measureHumidity" scoped="" ref="0x7f27d9c6f3c0"/>
        <function-ref name="measureTemperature" scoped="" ref="0x7f27d9c6f550"/>
        <function-ref name="writeStatusReg" scoped="" ref="0x7f27d9c6f6e0"/>
        <function-ref name="reset" scoped="" ref="0x7f27d9c6f870"/>
        <function-ref name="writeStatusRegDone" scoped="" ref="0x7f27d9c6fa00"/>
        <function-ref name="readStatusRegDone" scoped="" ref="0x7f27d9c6fb90"/>
        <function-ref name="resetDone" scoped="" ref="0x7f27d9c6fd20"/>
        <function-ref name="measureTemperatureDone" scoped="" ref="0x7f27d9c6e020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="DATA" ref="0x7f27d9c6e2f0" loc="56:../../../tos/chips/sht11/SensirionSht11LogicP.nc">
      <component-ref qname="HalSensirionSht11C.SensirionSht11LogicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DATA" scoped="" ref="0x7f27d9c6e2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27d9c6e670"/>
        <function-ref name="isInput" scoped="" ref="0x7f27d9c6e800"/>
        <function-ref name="toggle" scoped="" ref="0x7f27d9c6e990"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27d9c6eb20"/>
        <function-ref name="get" scoped="" ref="0x7f27d9c6ecb0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27d9c6ee40"/>
        <function-ref name="set" scoped="" ref="0x7f27d9c6d020"/>
        <function-ref name="clr" scoped="" ref="0x7f27d9c6d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f27d9c66450" loc="62:../../../tos/chips/sht11/SensirionSht11LogicP.nc">
      <component-ref qname="HalSensirionSht11C.SensirionSht11LogicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f27d9c66450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f27d9c667d0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f27d9c66960"/>
        <function-ref name="led1On" scoped="" ref="0x7f27d9c66af0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f27d9c66c80"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f27d9c66e10"/>
        <function-ref name="get" scoped="" ref="0x7f27d9c65020"/>
        <function-ref name="led1Off" scoped="" ref="0x7f27d9c651b0"/>
        <function-ref name="led2On" scoped="" ref="0x7f27d9c657f0"/>
        <function-ref name="set" scoped="" ref="0x7f27d9c654d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f27d9c65340"/>
        <function-ref name="led0On" scoped="" ref="0x7f27d9c65660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f27d9c6b240" loc="60:../../../tos/chips/sht11/SensirionSht11LogicP.nc">
      <component-ref qname="HalSensirionSht11C.SensirionSht11LogicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f27d9c6b240"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da6496b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f27da649e20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f27d9c676e0"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9c6ac90"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f27d9c68a70"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f27d9c685f0"/>
        <function-ref name="getdt" scoped="" ref="0x7f27d9c66020"/>
        <function-ref name="gett0" scoped="" ref="0x7f27d9c67b60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f27d9c68170"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f27d9c6be30"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f27d9c670d0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f27d9c6a340"/>
        <function-ref name="stop" scoped="" ref="0x7f27d9c6a810"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="InterruptDATA" ref="0x7f27d9c5a730" loc="47:../../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <component-ref qname="HplSensirionSht11C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InterruptDATA" scoped="" ref="0x7f27d9c5a730"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f27d9c5aab0"/>
        <function-ref name="disable" scoped="" ref="0x7f27d9c5ac40"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f27d9c5add0"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f27d9c59020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SCK" ref="0x7f27d9c5b370" loc="46:../../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <component-ref qname="HplSensirionSht11C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SCK" scoped="" ref="0x7f27d9c5b370"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27d9c5b6f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27d9c5b880"/>
        <function-ref name="toggle" scoped="" ref="0x7f27d9c5ba10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27d9c5bba0"/>
        <function-ref name="get" scoped="" ref="0x7f27d9c5bd30"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27d9c5a020"/>
        <function-ref name="set" scoped="" ref="0x7f27d9c5a1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f27d9c5a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DATA" ref="0x7f27d9c5c020" loc="45:../../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <component-ref qname="HplSensirionSht11C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DATA" scoped="" ref="0x7f27d9c5c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27d9c5c3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27d9c5c530"/>
        <function-ref name="toggle" scoped="" ref="0x7f27d9c5c6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27d9c5c850"/>
        <function-ref name="get" scoped="" ref="0x7f27d9c5c9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27d9c5cb70"/>
        <function-ref name="set" scoped="" ref="0x7f27d9c5cd00"/>
        <function-ref name="clr" scoped="" ref="0x7f27d9c5b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f27d9c5d1d0" loc="44:../../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <component-ref qname="HplSensirionSht11C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f27d9c5d1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d9c5d550"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f27d9c5d6e0"/>
        <function-ref name="request" scoped="" ref="0x7f27d9c5d870"/>
        <function-ref name="granted" scoped="" ref="0x7f27d9c5da00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d9c5db90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f27d9c57490" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplSensirionSht11C.DATAM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f27d9c57490"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27d9c57810"/>
        <function-ref name="isInput" scoped="" ref="0x7f27d9c579a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27d9c57b30"/>
        <function-ref name="toggle" scoped="" ref="0x7f27d9c57cc0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27d9c57e50"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27d9c56020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27d9c561b0"/>
        <function-ref name="get" scoped="" ref="0x7f27d9c56340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27d9c564d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27d9c56660"/>
        <function-ref name="set" scoped="" ref="0x7f27d9c567f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27d9c56980"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27d9c56b10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27d9c56da0"/>
        <function-ref name="clr" scoped="" ref="0x7f27d9c55020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f27d9c58330" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplSensirionSht11C.DATAM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f27d9c58330"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27d9c586b0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27d9c58840"/>
        <function-ref name="toggle" scoped="" ref="0x7f27d9c589d0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27d9c58b60"/>
        <function-ref name="get" scoped="" ref="0x7f27d9c58cf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27d9c58e80"/>
        <function-ref name="set" scoped="" ref="0x7f27d9c57030"/>
        <function-ref name="clr" scoped="" ref="0x7f27d9c571c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f27d9c52020" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplSensirionSht11C.SCKM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f27d9c52020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27d9c523a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27d9c52530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27d9c526c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27d9c52850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27d9c529e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27d9c52b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27d9c52d00"/>
        <function-ref name="get" scoped="" ref="0x7f27d9c51020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27d9c511b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27d9c51340"/>
        <function-ref name="set" scoped="" ref="0x7f27d9c514d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27d9c51660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27d9c517f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27d9c51a80"/>
        <function-ref name="clr" scoped="" ref="0x7f27d9c51c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f27d9c54d60" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplSensirionSht11C.SCKM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f27d9c54d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27d9c53180"/>
        <function-ref name="isInput" scoped="" ref="0x7f27d9c53310"/>
        <function-ref name="toggle" scoped="" ref="0x7f27d9c534a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27d9c53630"/>
        <function-ref name="get" scoped="" ref="0x7f27d9c537c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27d9c53950"/>
        <function-ref name="set" scoped="" ref="0x7f27d9c53ae0"/>
        <function-ref name="clr" scoped="" ref="0x7f27d9c53c70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f27d9c4dde0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplSensirionSht11C.PWRM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f27d9c4dde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27d9c4c180"/>
        <function-ref name="isInput" scoped="" ref="0x7f27d9c4c310"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27d9c4c4a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27d9c4c630"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27d9c4c7c0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27d9c4c950"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27d9c4cae0"/>
        <function-ref name="get" scoped="" ref="0x7f27d9c4cc70"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27d9c4ce00"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27d9c4b020"/>
        <function-ref name="set" scoped="" ref="0x7f27d9c4b1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27d9c4b340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27d9c4b4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27d9c4b760"/>
        <function-ref name="clr" scoped="" ref="0x7f27d9c4b8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f27d9c4fb60" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplSensirionSht11C.PWRM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f27d9c4fb60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27d9c4d020"/>
        <function-ref name="isInput" scoped="" ref="0x7f27d9c4d1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27d9c4d340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27d9c4d4d0"/>
        <function-ref name="get" scoped="" ref="0x7f27d9c4d660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27d9c4d7f0"/>
        <function-ref name="set" scoped="" ref="0x7f27d9c4d980"/>
        <function-ref name="clr" scoped="" ref="0x7f27d9c4db10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f27d9c41630" loc="43:../../../tos/platforms/telosa/chips/sht11/HplSensirionSht11P.nc">
      <component-ref qname="HplSensirionSht11P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f27d9c41630"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f27d9c419b0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f27d9c41b40"/>
        <function-ref name="start" scoped="" ref="0x7f27d9c41cd0"/>
        <function-ref name="stop" scoped="" ref="0x7f27d9c41e60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopTask" ref="0x7f27d9c38740" loc="50:../../../tos/platforms/telosa/chips/sht11/HplSensirionSht11P.nc">
      <component-ref qname="HplSensirionSht11P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="stopTask" scoped="" ref="0x7f27d9c38740"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f27d9c38ac0"/>
        <function-ref name="runTask" scoped="" ref="0x7f27d9c38c50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SCK" ref="0x7f27d9c3bcd0" loc="47:../../../tos/platforms/telosa/chips/sht11/HplSensirionSht11P.nc">
      <component-ref qname="HplSensirionSht11P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SCK" scoped="" ref="0x7f27d9c3bcd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27d9c3a0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27d9c3a230"/>
        <function-ref name="toggle" scoped="" ref="0x7f27d9c3a3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27d9c3a550"/>
        <function-ref name="get" scoped="" ref="0x7f27d9c3a6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27d9c3a870"/>
        <function-ref name="set" scoped="" ref="0x7f27d9c3aa00"/>
        <function-ref name="clr" scoped="" ref="0x7f27d9c3ab90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PWR" ref="0x7f27d9c3d6d0" loc="45:../../../tos/platforms/telosa/chips/sht11/HplSensirionSht11P.nc">
      <component-ref qname="HplSensirionSht11P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PWR" scoped="" ref="0x7f27d9c3d6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27d9c3da50"/>
        <function-ref name="isInput" scoped="" ref="0x7f27d9c3dbe0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27d9c3dd70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27d9c3c020"/>
        <function-ref name="get" scoped="" ref="0x7f27d9c3c1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27d9c3c340"/>
        <function-ref name="set" scoped="" ref="0x7f27d9c3c4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f27d9c3c660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="DATA" ref="0x7f27d9c3c9c0" loc="46:../../../tos/platforms/telosa/chips/sht11/HplSensirionSht11P.nc">
      <component-ref qname="HplSensirionSht11P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DATA" scoped="" ref="0x7f27d9c3c9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27d9c3cd40"/>
        <function-ref name="isInput" scoped="" ref="0x7f27d9c3b020"/>
        <function-ref name="toggle" scoped="" ref="0x7f27d9c3b1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27d9c3b340"/>
        <function-ref name="get" scoped="" ref="0x7f27d9c3b4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27d9c3b660"/>
        <function-ref name="set" scoped="" ref="0x7f27d9c3b7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f27d9c3b980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f27d9c452c0" loc="44:../../../tos/platforms/telosa/chips/sht11/HplSensirionSht11P.nc">
      <component-ref qname="HplSensirionSht11P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f27d9c452c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da6496b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f27da649e20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f27d9c3e870"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9c44e40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f27d9c3fc00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f27d9c3f780"/>
        <function-ref name="getdt" scoped="" ref="0x7f27d9c3d1e0"/>
        <function-ref name="gett0" scoped="" ref="0x7f27d9c3ecf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f27d9c3f300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f27d9c44020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f27d9c3e260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f27d9c444f0"/>
        <function-ref name="stop" scoped="" ref="0x7f27d9c449c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f27d9c2e5a0" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="HplSensirionSht11C.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f27d9c2e5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da6496b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f27da649e20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f27d9c2aa80"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9c2b090"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f27d9c2be10"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f27d9c2b990"/>
        <function-ref name="getdt" scoped="" ref="0x7f27d9c294a0"/>
        <function-ref name="gett0" scoped="" ref="0x7f27d9c29020"/>
        <function-ref name="isRunning" scoped="" ref="0x7f27d9c2b510"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f27d9c2c200"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f27d9c2a470"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f27d9c2c6d0"/>
        <function-ref name="stop" scoped="" ref="0x7f27d9c2cba0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7f27d9c1d710" loc="46:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7f27d9c1d710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d9c1da90"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9c1dc20"/>
        <function-ref name="disable" scoped="" ref="0x7f27d9c1ddb0"/>
        <function-ref name="edge" scoped="" ref="0x7f27d9c1b020"/>
        <function-ref name="enable" scoped="" ref="0x7f27d9c1b1b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f27d9c1b340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7f27d9c128a0" loc="58:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7f27d9c128a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d9c12c20"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9c12db0"/>
        <function-ref name="disable" scoped="" ref="0x7f27d9c11020"/>
        <function-ref name="edge" scoped="" ref="0x7f27d9c111b0"/>
        <function-ref name="enable" scoped="" ref="0x7f27d9c11340"/>
        <function-ref name="getValue" scoped="" ref="0x7f27d9c114d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7f27d9c19710" loc="49:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7f27d9c19710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d9c19a90"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9c19c20"/>
        <function-ref name="disable" scoped="" ref="0x7f27d9c19db0"/>
        <function-ref name="edge" scoped="" ref="0x7f27d9c18020"/>
        <function-ref name="enable" scoped="" ref="0x7f27d9c181b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f27d9c18340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7f27d9c17710" loc="53:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7f27d9c17710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d9c17a90"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9c17c20"/>
        <function-ref name="disable" scoped="" ref="0x7f27d9c17db0"/>
        <function-ref name="edge" scoped="" ref="0x7f27d9c16020"/>
        <function-ref name="enable" scoped="" ref="0x7f27d9c161b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f27d9c16340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7f27d9c22710" loc="44:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7f27d9c22710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d9c22a90"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9c22c20"/>
        <function-ref name="disable" scoped="" ref="0x7f27d9c22db0"/>
        <function-ref name="edge" scoped="" ref="0x7f27d9c1e020"/>
        <function-ref name="enable" scoped="" ref="0x7f27d9c1e1b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f27d9c1e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7f27d9c14710" loc="56:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7f27d9c14710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d9c14b90"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9c14d20"/>
        <function-ref name="disable" scoped="" ref="0x7f27d9c13020"/>
        <function-ref name="edge" scoped="" ref="0x7f27d9c131b0"/>
        <function-ref name="enable" scoped="" ref="0x7f27d9c13340"/>
        <function-ref name="getValue" scoped="" ref="0x7f27d9c134d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7f27d9c1b710" loc="47:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7f27d9c1b710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d9c1ba90"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9c1bc20"/>
        <function-ref name="disable" scoped="" ref="0x7f27d9c1bdb0"/>
        <function-ref name="edge" scoped="" ref="0x7f27d9c1a020"/>
        <function-ref name="enable" scoped="" ref="0x7f27d9c1a1b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f27d9c1a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7f27d9c118a0" loc="59:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7f27d9c118a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d9c11c20"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9c11db0"/>
        <function-ref name="disable" scoped="" ref="0x7f27d9c10020"/>
        <function-ref name="edge" scoped="" ref="0x7f27d9c101b0"/>
        <function-ref name="enable" scoped="" ref="0x7f27d9c10340"/>
        <function-ref name="getValue" scoped="" ref="0x7f27d9c104d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7f27d9c1f660" loc="42:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7f27d9c1f660"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d9c1f9e0"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9c1fb70"/>
        <function-ref name="disable" scoped="" ref="0x7f27d9c1fd00"/>
        <function-ref name="edge" scoped="" ref="0x7f27d9c23020"/>
        <function-ref name="enable" scoped="" ref="0x7f27d9c231b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f27d9c23340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7f27d9c16710" loc="54:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7f27d9c16710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d9c16a90"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9c16c20"/>
        <function-ref name="disable" scoped="" ref="0x7f27d9c16db0"/>
        <function-ref name="edge" scoped="" ref="0x7f27d9c15020"/>
        <function-ref name="enable" scoped="" ref="0x7f27d9c151b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f27d9c15340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7f27d9c1e710" loc="45:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7f27d9c1e710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d9c1ea90"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9c1ec20"/>
        <function-ref name="disable" scoped="" ref="0x7f27d9c1edb0"/>
        <function-ref name="edge" scoped="" ref="0x7f27d9c1d020"/>
        <function-ref name="enable" scoped="" ref="0x7f27d9c1d1b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f27d9c1d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7f27d9c138a0" loc="57:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7f27d9c138a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d9c13c20"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9c13db0"/>
        <function-ref name="disable" scoped="" ref="0x7f27d9c12020"/>
        <function-ref name="edge" scoped="" ref="0x7f27d9c121b0"/>
        <function-ref name="enable" scoped="" ref="0x7f27d9c12340"/>
        <function-ref name="getValue" scoped="" ref="0x7f27d9c124d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7f27d9c1a710" loc="48:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7f27d9c1a710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d9c1aa90"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9c1ac20"/>
        <function-ref name="disable" scoped="" ref="0x7f27d9c1adb0"/>
        <function-ref name="edge" scoped="" ref="0x7f27d9c19020"/>
        <function-ref name="enable" scoped="" ref="0x7f27d9c191b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f27d9c19340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7f27d9c18710" loc="52:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7f27d9c18710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d9c18a90"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9c18c20"/>
        <function-ref name="disable" scoped="" ref="0x7f27d9c18db0"/>
        <function-ref name="edge" scoped="" ref="0x7f27d9c17020"/>
        <function-ref name="enable" scoped="" ref="0x7f27d9c171b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f27d9c17340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7f27d9c23710" loc="43:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7f27d9c23710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d9c23a90"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9c23c20"/>
        <function-ref name="disable" scoped="" ref="0x7f27d9c23db0"/>
        <function-ref name="edge" scoped="" ref="0x7f27d9c22020"/>
        <function-ref name="enable" scoped="" ref="0x7f27d9c221b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f27d9c22340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7f27d9c15710" loc="55:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7f27d9c15710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d9c15a90"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9c15c20"/>
        <function-ref name="disable" scoped="" ref="0x7f27d9c15db0"/>
        <function-ref name="edge" scoped="" ref="0x7f27d9c14020"/>
        <function-ref name="enable" scoped="" ref="0x7f27d9c141b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f27d9c14340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7f27d9c09710" loc="43:../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7f27d9c09710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d9c09a90"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9c09c20"/>
        <function-ref name="disable" scoped="" ref="0x7f27d9c09db0"/>
        <function-ref name="edge" scoped="" ref="0x7f27d9c08020"/>
        <function-ref name="enable" scoped="" ref="0x7f27d9c081b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f27d9c08340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7f27d9bfe8a0" loc="55:../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7f27d9bfe8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d9bfec20"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9bfedb0"/>
        <function-ref name="disable" scoped="" ref="0x7f27d9bfd020"/>
        <function-ref name="edge" scoped="" ref="0x7f27d9bfd1b0"/>
        <function-ref name="enable" scoped="" ref="0x7f27d9bfd340"/>
        <function-ref name="getValue" scoped="" ref="0x7f27d9bfd4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7f27d9c06710" loc="46:../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7f27d9c06710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d9c06a90"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9c06c20"/>
        <function-ref name="disable" scoped="" ref="0x7f27d9c06db0"/>
        <function-ref name="edge" scoped="" ref="0x7f27d9c05020"/>
        <function-ref name="enable" scoped="" ref="0x7f27d9c051b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f27d9c05340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7f27d9c04710" loc="50:../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7f27d9c04710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d9c04a90"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9c04c20"/>
        <function-ref name="disable" scoped="" ref="0x7f27d9c04db0"/>
        <function-ref name="edge" scoped="" ref="0x7f27d9c03020"/>
        <function-ref name="enable" scoped="" ref="0x7f27d9c031b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f27d9c03340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7f27d9c0b710" loc="41:../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7f27d9c0b710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d9c0ba90"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9c0bc20"/>
        <function-ref name="disable" scoped="" ref="0x7f27d9c0bdb0"/>
        <function-ref name="edge" scoped="" ref="0x7f27d9c0a020"/>
        <function-ref name="enable" scoped="" ref="0x7f27d9c0a1b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f27d9c0a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7f27d9c00710" loc="53:../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7f27d9c00710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d9c00b90"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9c00d20"/>
        <function-ref name="disable" scoped="" ref="0x7f27d9bff020"/>
        <function-ref name="edge" scoped="" ref="0x7f27d9bff1b0"/>
        <function-ref name="enable" scoped="" ref="0x7f27d9bff340"/>
        <function-ref name="getValue" scoped="" ref="0x7f27d9bff4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7f27d9c08710" loc="44:../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7f27d9c08710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d9c08a90"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9c08c20"/>
        <function-ref name="disable" scoped="" ref="0x7f27d9c08db0"/>
        <function-ref name="edge" scoped="" ref="0x7f27d9c07020"/>
        <function-ref name="enable" scoped="" ref="0x7f27d9c071b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f27d9c07340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7f27d9bfd8a0" loc="56:../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7f27d9bfd8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d9bfdc20"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9bfddb0"/>
        <function-ref name="disable" scoped="" ref="0x7f27d9bfc020"/>
        <function-ref name="edge" scoped="" ref="0x7f27d9bfc1b0"/>
        <function-ref name="enable" scoped="" ref="0x7f27d9bfc340"/>
        <function-ref name="getValue" scoped="" ref="0x7f27d9bfc4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7f27d9c0d6b0" loc="39:../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7f27d9c0d6b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d9c0da30"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9c0dbc0"/>
        <function-ref name="disable" scoped="" ref="0x7f27d9c0dd50"/>
        <function-ref name="edge" scoped="" ref="0x7f27d9c0c020"/>
        <function-ref name="enable" scoped="" ref="0x7f27d9c0c1b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f27d9c0c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7f27d9c03710" loc="51:../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7f27d9c03710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d9c03a90"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9c03c20"/>
        <function-ref name="disable" scoped="" ref="0x7f27d9c03db0"/>
        <function-ref name="edge" scoped="" ref="0x7f27d9c01020"/>
        <function-ref name="enable" scoped="" ref="0x7f27d9c011b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f27d9c01340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7f27d9c0a710" loc="42:../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7f27d9c0a710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d9c0aa90"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9c0ac20"/>
        <function-ref name="disable" scoped="" ref="0x7f27d9c0adb0"/>
        <function-ref name="edge" scoped="" ref="0x7f27d9c09020"/>
        <function-ref name="enable" scoped="" ref="0x7f27d9c091b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f27d9c09340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7f27d9bff8a0" loc="54:../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7f27d9bff8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d9bffc20"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9bffdb0"/>
        <function-ref name="disable" scoped="" ref="0x7f27d9bfe020"/>
        <function-ref name="edge" scoped="" ref="0x7f27d9bfe1b0"/>
        <function-ref name="enable" scoped="" ref="0x7f27d9bfe340"/>
        <function-ref name="getValue" scoped="" ref="0x7f27d9bfe4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7f27d9c07710" loc="45:../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7f27d9c07710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d9c07a90"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9c07c20"/>
        <function-ref name="disable" scoped="" ref="0x7f27d9c07db0"/>
        <function-ref name="edge" scoped="" ref="0x7f27d9c06020"/>
        <function-ref name="enable" scoped="" ref="0x7f27d9c061b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f27d9c06340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7f27d9c05710" loc="49:../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7f27d9c05710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d9c05a90"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9c05c20"/>
        <function-ref name="disable" scoped="" ref="0x7f27d9c05db0"/>
        <function-ref name="edge" scoped="" ref="0x7f27d9c04020"/>
        <function-ref name="enable" scoped="" ref="0x7f27d9c041b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f27d9c04340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7f27d9c0c710" loc="40:../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7f27d9c0c710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d9c0ca90"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9c0cc20"/>
        <function-ref name="disable" scoped="" ref="0x7f27d9c0cdb0"/>
        <function-ref name="edge" scoped="" ref="0x7f27d9c0b020"/>
        <function-ref name="enable" scoped="" ref="0x7f27d9c0b1b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f27d9c0b340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7f27d9c01710" loc="52:../../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7f27d9c01710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d9c01a90"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9c01c20"/>
        <function-ref name="disable" scoped="" ref="0x7f27d9c01db0"/>
        <function-ref name="edge" scoped="" ref="0x7f27d9c00020"/>
        <function-ref name="enable" scoped="" ref="0x7f27d9c001b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f27d9c00340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplInterrupt" ref="0x7f27d9b2a610" loc="46:../../../tos/chips/msp430/pins/Msp430InterruptC.nc">
      <component-ref qname="HplSensirionSht11C.InterruptDATAC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplInterrupt" scoped="" ref="0x7f27d9b2a610"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d9b2a990"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9b2ab20"/>
        <function-ref name="disable" scoped="" ref="0x7f27d9b2acb0"/>
        <function-ref name="edge" scoped="" ref="0x7f27d9b2ae40"/>
        <function-ref name="enable" scoped="" ref="0x7f27d9b1d020"/>
        <function-ref name="getValue" scoped="" ref="0x7f27d9b1d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupt" ref="0x7f27d9b2ba30" loc="45:../../../tos/chips/msp430/pins/Msp430InterruptC.nc">
      <component-ref qname="HplSensirionSht11C.InterruptDATAC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupt" scoped="" ref="0x7f27d9b2ba30"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f27d9b2bdb0"/>
        <function-ref name="disable" scoped="" ref="0x7f27d9b2a020"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f27d9b2a1b0"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f27d9b2a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f27d9b199e0" loc="92:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f27d9b199e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f27d9b19d80"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f27d9b18020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f27d9b17770" loc="96:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f27d9b17770"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f27d9b17b10"/>
        <function-ref name="configure" scoped="" ref="0x7f27d9b17ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f27d9b18270" loc="93:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f27d9b18270"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d9b185f0"/>
        <function-ref name="requested" scoped="" ref="0x7f27d9b18780"/>
        <function-ref name="granted" scoped="" ref="0x7f27d9b18910"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d9b18aa0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f27d9b18c30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f27d9b1ab60" loc="91:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f27d9b1ab60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d9b19020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f27d9b191b0"/>
        <function-ref name="request" scoped="" ref="0x7f27d9b19340"/>
        <function-ref name="granted" scoped="" ref="0x7f27d9b194d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d9b19660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f27d9b18e80" loc="94:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f27d9b18e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f27d9b17220"/>
        <function-ref name="userId" scoped="" ref="0x7f27d9b173b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f27d8ff81b0" loc="44:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f27d8ff81b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f27d8ff8530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f27d8ff87c0" loc="45:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FcfsQueue" scoped="" ref="0x7f27d8ff87c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f27d8ff8b40"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f27d8ff8cd0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f27d8ff8e60"/>
        <function-ref name="dequeue" scoped="" ref="0x7f27d8ff7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f27d8ff4850" loc="55:../../../tos/system/ArbiterP.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f27d8ff4850"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f27d8ff4bf0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f27d8ff4d80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f27d8ff2590" loc="60:../../../tos/system/ArbiterP.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f27d8ff2590"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f27d8ff2930"/>
        <function-ref name="configure" scoped="" ref="0x7f27d8ff2ac0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f27d8ff2d50" loc="61:../../../tos/system/ArbiterP.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f27d8ff2d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f27d8ff1100"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f27d8ff1290"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f27d8ff1420"/>
        <function-ref name="dequeue" scoped="" ref="0x7f27d8ff15b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f27d8ff3020" loc="56:../../../tos/system/ArbiterP.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f27d8ff3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d8ff33a0"/>
        <function-ref name="requested" scoped="" ref="0x7f27d8ff3530"/>
        <function-ref name="granted" scoped="" ref="0x7f27d8ff36c0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d8ff3850"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f27d8ff39e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f27d8ff1800" loc="62:../../../tos/system/ArbiterP.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f27d8ff1800"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f27d8ff1b80"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f27d8ff1d10"/>
        <function-ref name="led1On" scoped="" ref="0x7f27d8ff0020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f27d8ff01b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f27d8ff0340"/>
        <function-ref name="get" scoped="" ref="0x7f27d8ff04d0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f27d8ff0660"/>
        <function-ref name="led0On" scoped="" ref="0x7f27d8ff0ca0"/>
        <function-ref name="set" scoped="" ref="0x7f27d8ff0980"/>
        <function-ref name="led2On" scoped="" ref="0x7f27d8ff07f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f27d8ff0b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f27d8ff5970" loc="54:../../../tos/system/ArbiterP.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f27d8ff5970"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d8ff5d10"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f27d8ff4020"/>
        <function-ref name="request" scoped="" ref="0x7f27d8ff41b0"/>
        <function-ref name="granted" scoped="" ref="0x7f27d8ff4340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d8ff44d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f27d8ff3c30" loc="57:../../../tos/system/ArbiterP.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f27d8ff3c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f27d8ff2020"/>
        <function-ref name="userId" scoped="" ref="0x7f27d8ff21b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7f27d8fef020" loc="75:../../../tos/system/ArbiterP.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantedTask" scoped="" ref="0x7f27d8fef020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f27d8fef3a0"/>
        <function-ref name="runTask" scoped="" ref="0x7f27d8fef530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SplitControl" ref="0x7f27d9b13280" loc="69:../../../tos/lib/power/SplitControlPowerManagerC.nc">
      <component-ref qname="HplSensirionSht11C.SplitControlPowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f27d9b13280"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f27d9b13600"/>
        <function-ref name="stopDone" scoped="" ref="0x7f27d9b13790"/>
        <function-ref name="start" scoped="" ref="0x7f27d9b13920"/>
        <function-ref name="stop" scoped="" ref="0x7f27d9b13ab0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x7f27d9b13d00" loc="71:../../../tos/lib/power/SplitControlPowerManagerC.nc">
      <component-ref qname="HplSensirionSht11C.SplitControlPowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PowerDownCleanup" scoped="" ref="0x7f27d9b13d00"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x7f27d9ae70a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x7f27d9ae72f0" loc="72:../../../tos/lib/power/SplitControlPowerManagerC.nc">
      <component-ref qname="HplSensirionSht11C.SplitControlPowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f27d9ae72f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d9ae7670"/>
        <function-ref name="requested" scoped="" ref="0x7f27d9ae7800"/>
        <function-ref name="granted" scoped="" ref="0x7f27d9ae7990"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d9ae7b20"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f27d9ae7cb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7f27d9ae6020" loc="73:../../../tos/lib/power/SplitControlPowerManagerC.nc">
      <component-ref qname="HplSensirionSht11C.SplitControlPowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f27d9ae6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f27d9ae63a0"/>
        <function-ref name="userId" scoped="" ref="0x7f27d9ae6530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SplitControl" ref="0x7f27d8fbe0f0" loc="61:../../../tos/lib/power/PowerManagerP.nc">
      <component-ref qname="HplSensirionSht11C.SplitControlPowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f27d8fbe0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f27d8fbe470"/>
        <function-ref name="stopDone" scoped="" ref="0x7f27d8fbe600"/>
        <function-ref name="start" scoped="" ref="0x7f27d8fbe790"/>
        <function-ref name="stop" scoped="" ref="0x7f27d8fbe920"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x7f27d8fbeb70" loc="63:../../../tos/lib/power/PowerManagerP.nc">
      <component-ref qname="HplSensirionSht11C.SplitControlPowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PowerDownCleanup" scoped="" ref="0x7f27d8fbeb70"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x7f27d8fbd020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopTask" ref="0x7f27d8fbc680" loc="78:../../../tos/lib/power/PowerManagerP.nc">
      <component-ref qname="HplSensirionSht11C.SplitControlPowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="stopTask" scoped="" ref="0x7f27d8fbc680"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f27d8fbca00"/>
        <function-ref name="runTask" scoped="" ref="0x7f27d8fbcb90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x7f27d8fbd270" loc="64:../../../tos/lib/power/PowerManagerP.nc">
      <component-ref qname="HplSensirionSht11C.SplitControlPowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f27d8fbd270"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d8fbd5f0"/>
        <function-ref name="requested" scoped="" ref="0x7f27d8fbd780"/>
        <function-ref name="granted" scoped="" ref="0x7f27d8fbd910"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d8fbdaa0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f27d8fbdc30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startTask" ref="0x7f27d8fbce60" loc="73:../../../tos/lib/power/PowerManagerP.nc">
      <component-ref qname="HplSensirionSht11C.SplitControlPowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="startTask" scoped="" ref="0x7f27d8fbce60"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f27d8fbb210"/>
        <function-ref name="runTask" scoped="" ref="0x7f27d8fbb3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="StdControl" ref="0x7f27d8fbf970" loc="60:../../../tos/lib/power/PowerManagerP.nc">
      <component-ref qname="HplSensirionSht11C.SplitControlPowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f27d8fbf970"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f27d8fbfcf0"/>
        <function-ref name="stop" scoped="" ref="0x7f27d8fbfe80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7f27d8fbde80" loc="65:../../../tos/lib/power/PowerManagerP.nc">
      <component-ref qname="HplSensirionSht11C.SplitControlPowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f27d8fbde80"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f27d8fbc220"/>
        <function-ref name="userId" scoped="" ref="0x7f27d8fbc3b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f27d9ada1e0" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="HalSensirionSht11C.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f27d9ada1e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da6496b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f27da649e20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f27d9ad6630"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9ad9c30"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f27d9ad79d0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f27d9ad7550"/>
        <function-ref name="getdt" scoped="" ref="0x7f27d9ad5020"/>
        <function-ref name="gett0" scoped="" ref="0x7f27d9ad6ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f27d9ad70d0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f27d9adadd0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f27d9ad6020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f27d9ad92e0"/>
        <function-ref name="stop" scoped="" ref="0x7f27d9ad97b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x7f27d9ac0750" loc="42:../../../tos/platforms/telosa/chips/s10871/HamamatsuS10871TsrC.nc">
      <component-ref qname="TempTestAppC.LightSensor"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Read" scoped="" ref="0x7f27d9ac0750"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f27d96c7390"/>
        <function-ref name="readDone" scoped="" ref="0x7f27d96c7810"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadStream" ref="0x7f27d96c6020" loc="43:../../../tos/platforms/telosa/chips/s10871/HamamatsuS10871TsrC.nc">
      <component-ref qname="TempTestAppC.LightSensor"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadStream" scoped="" ref="0x7f27d96c6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x7f27d96c5ab0"/>
        <function-ref name="postBuffer" scoped="" ref="0x7f27d96c6c10"/>
        <function-ref name="read" scoped="" ref="0x7f27d96c55e0"/>
        <function-ref name="readDone" scoped="" ref="0x7f27d96c45a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DeviceMetadata" ref="0x7f27d9ac0020" loc="41:../../../tos/platforms/telosa/chips/s10871/HamamatsuS10871TsrC.nc">
      <component-ref qname="TempTestAppC.LightSensor"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DeviceMetadata" scoped="" ref="0x7f27d9ac0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="DeviceMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="getSignificantBits" scoped="" ref="0x7f27d9ac03a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x7f27d8fa5bd0" loc="48:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <component-ref qname="TempTestAppC.LightSensor.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Read" scoped="" ref="0x7f27d8fa5bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f27d8fa4860"/>
        <function-ref name="readDone" scoped="" ref="0x7f27d8fa4ce0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7f27d8fa34a0" loc="49:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <component-ref qname="TempTestAppC.LightSensor.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f27d8fa34a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f27d9aad4e0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f27d9aaeb70"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f27d8fa1110"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubResourceReadNow" ref="0x7f27d9a84960" loc="46:../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubResourceReadNow" scoped="" ref="0x7f27d9a84960"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d9a84ce0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f27d9a84e70"/>
        <function-ref name="request" scoped="" ref="0x7f27d9a83030"/>
        <function-ref name="granted" scoped="" ref="0x7f27d9a831c0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d9a83350"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x7f27d9a8e390" loc="38:../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Read" scoped="" ref="0x7f27d9a8e390"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f27d9a8d020"/>
        <function-ref name="readDone" scoped="" ref="0x7f27d9a8d4a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x7f27d9a8c530" loc="39:../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadNow" scoped="" ref="0x7f27d9a8c530"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f27d9a8b1b0"/>
        <function-ref name="readDone" scoped="" ref="0x7f27d9a8b670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceReadNow" ref="0x7f27d9a872c0" loc="40:../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceReadNow" scoped="" ref="0x7f27d9a872c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d9a87640"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f27d9a877d0"/>
        <function-ref name="request" scoped="" ref="0x7f27d9a87960"/>
        <function-ref name="granted" scoped="" ref="0x7f27d9a87af0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d9a87c80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f27d9a82020" loc="48:../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Config" scoped="" ref="0x7f27d9a82020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f27d9aad4e0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f27d9aaeb70"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f27d9a82c50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SingleChannel" ref="0x7f27d9a7f450" loc="49:../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SingleChannel" scoped="" ref="0x7f27d9a7f450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f27d9a7f7d0"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f27d9a7f960"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f27d9a7faf0"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f27d9a7fc80"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f27d9a7fe10"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f27d9a7e020"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f27d9a7e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceRead" ref="0x7f27d9a85640" loc="44:../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRead" scoped="" ref="0x7f27d9a85640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d9a859c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f27d9a85b50"/>
        <function-ref name="request" scoped="" ref="0x7f27d9a85ce0"/>
        <function-ref name="granted" scoped="" ref="0x7f27d9a85e70"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d9a84030"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="readDone" ref="0x7f27d9a54e40" loc="136:../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="readDone" scoped="" ref="0x7f27d9a54e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f27d9a531e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f27d9a53370"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12MultiChannel" ref="0x7f27d8f95720" loc="48:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TempTestAppC.LightSensor.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f27d8f95720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f27d8f95aa0"/>
        <function-ref name="configure" scoped="" ref="0x7f27d8f95c30"/>
        <function-ref name="dataReady" scoped="" ref="0x7f27d8f95dc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12SingleChannel" ref="0x7f27d8f97730" loc="47:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TempTestAppC.LightSensor.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f27d8f97730"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f27d8f97ab0"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f27d8f97c40"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f27d8f97dd0"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f27d8f95020"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f27d8f951b0"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f27d8f95340"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f27d8f954d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12Overflow" ref="0x7f27d8f94060" loc="49:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TempTestAppC.LightSensor.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f27d8f94060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7f27d8f943e0"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7f27d8f94570"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7f27d8f949a0" loc="51:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TempTestAppC.LightSensor.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f27d8f949a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f27d9aad4e0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f27d9aaeb70"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f27d8f93600"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f27d8f98af0" loc="46:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TempTestAppC.LightSensor.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f27d8f98af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d8f98e70"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f27d8f97030"/>
        <function-ref name="request" scoped="" ref="0x7f27d8f971c0"/>
        <function-ref name="granted" scoped="" ref="0x7f27d8f97350"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d8f974e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MultiChannel" ref="0x7f27d9a17960" loc="42:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MultiChannel" scoped="" ref="0x7f27d9a17960"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f27d9a17ce0"/>
        <function-ref name="configure" scoped="" ref="0x7f27d9a17e70"/>
        <function-ref name="dataReady" scoped="" ref="0x7f27d9a16030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DMAExtension" ref="0x7f27d9a15760" loc="44:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DMAExtension" scoped="" ref="0x7f27d9a15760"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f27d9a15ae0"/>
        <function-ref name="stop" scoped="" ref="0x7f27d9a15c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Overflow" ref="0x7f27d9a16920" loc="43:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f27d9a16920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7f27d9a16ca0"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7f27d9a16e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SingleChannel" ref="0x7f27d9a181d0" loc="41:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SingleChannel" scoped="" ref="0x7f27d9a181d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f27d9a18550"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f27d9a186e0"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f27d9a18870"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f27d9a18a00"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f27d9a18b90"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f27d9a18d20"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f27d9a17020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f27d9a25cc0" loc="40:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f27d9a25cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d9a1a0a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f27d9a1a230"/>
        <function-ref name="request" scoped="" ref="0x7f27d9a1a3c0"/>
        <function-ref name="granted" scoped="" ref="0x7f27d9a1a550"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d9a1a6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MultiChannel" ref="0x7f27d9a0e1d0" loc="42:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MultiChannel" scoped="" ref="0x7f27d9a0e1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f27d9a0e550"/>
        <function-ref name="configure" scoped="" ref="0x7f27d9a0e6e0"/>
        <function-ref name="dataReady" scoped="" ref="0x7f27d9a0e870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAdc12" ref="0x7f27d99fd650" loc="48:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplAdc12" scoped="" ref="0x7f27d99fd650"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAdc12"/>
      </instance>
      <interface-functions>
        <function-ref name="getCtl0" scoped="" ref="0x7f27d99fd9d0"/>
        <function-ref name="getMCtl" scoped="" ref="0x7f27d99fdb60"/>
        <function-ref name="resetIFGs" scoped="" ref="0x7f27d99fdcf0"/>
        <function-ref name="isBusy" scoped="" ref="0x7f27d99fde80"/>
        <function-ref name="conversionDone" scoped="" ref="0x7f27d9a09030"/>
        <function-ref name="getCtl1" scoped="" ref="0x7f27d9a091c0"/>
        <function-ref name="setMCtl" scoped="" ref="0x7f27d9a09350"/>
        <function-ref name="startConversion" scoped="" ref="0x7f27d9a094e0"/>
        <function-ref name="setCtl0" scoped="" ref="0x7f27d9a09670"/>
        <function-ref name="getMem" scoped="" ref="0x7f27d9a09800"/>
        <function-ref name="setIEFlags" scoped="" ref="0x7f27d9a09990"/>
        <function-ref name="getIEFlags" scoped="" ref="0x7f27d9a09b20"/>
        <function-ref name="stopConversion" scoped="" ref="0x7f27d9a09cb0"/>
        <function-ref name="enableConversion" scoped="" ref="0x7f27d9a08020"/>
        <function-ref name="setCtl1" scoped="" ref="0x7f27d9a081b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port64" ref="0x7f27d99ef200" loc="58:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port64" scoped="" ref="0x7f27d99ef200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27d99ef580"/>
        <function-ref name="isInput" scoped="" ref="0x7f27d99ef710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27d99ef8a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27d99efa30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27d99efbc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27d99efd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27d99ee020"/>
        <function-ref name="get" scoped="" ref="0x7f27d99ee1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27d99ee340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27d99ee4d0"/>
        <function-ref name="set" scoped="" ref="0x7f27d99ee660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27d99ee7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27d99ee980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27d99eec10"/>
        <function-ref name="clr" scoped="" ref="0x7f27d99eeda0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CompareA1" ref="0x7f27d99f83a0" loc="53:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA1" scoped="" ref="0x7f27d99f83a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27d99f8720"/>
        <function-ref name="setEvent" scoped="" ref="0x7f27d99f88b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f27d99f8a40"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f27d99f8bd0"/>
        <function-ref name="fired" scoped="" ref="0x7f27d99f8d60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ControlA0" ref="0x7f27d99fcd30" loc="50:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA0" scoped="" ref="0x7f27d99fcd30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f27d99fb0e0"/>
        <function-ref name="getControl" scoped="" ref="0x7f27d99fb270"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27d99fb400"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f27d99fb590"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f27d99fb720"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27d99fb8b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f27d99fba40"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f27d99fbbd0"/>
        <function-ref name="setControl" scoped="" ref="0x7f27d99fbd60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DMAExtension" ref="0x7f27d9a0c020" loc="44:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DMAExtension" scoped="" ref="0x7f27d9a0c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f27d9a0c3a0"/>
        <function-ref name="stop" scoped="" ref="0x7f27d9a0c530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port62" ref="0x7f27d99f3200" loc="56:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port62" scoped="" ref="0x7f27d99f3200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27d99f3580"/>
        <function-ref name="isInput" scoped="" ref="0x7f27d99f3710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27d99f38a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27d99f3a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27d99f3bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27d99f3d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27d99f2020"/>
        <function-ref name="get" scoped="" ref="0x7f27d99f21b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27d99f2340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27d99f24d0"/>
        <function-ref name="set" scoped="" ref="0x7f27d99f2660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27d99f27f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27d99f2980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27d99f2c10"/>
        <function-ref name="clr" scoped="" ref="0x7f27d99f2da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Overflow" ref="0x7f27d9a0d1d0" loc="43:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f27d9a0d1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7f27d9a0d550"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7f27d9a0d6e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port67" ref="0x7f27d99e9200" loc="61:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port67" scoped="" ref="0x7f27d99e9200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27d99e9580"/>
        <function-ref name="isInput" scoped="" ref="0x7f27d99e9710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27d99e98a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27d99e9a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27d99e9bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27d99e9d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27d99e8020"/>
        <function-ref name="get" scoped="" ref="0x7f27d99e81b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27d99e8340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27d99e84d0"/>
        <function-ref name="set" scoped="" ref="0x7f27d99e8660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27d99e87f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27d99e8980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27d99e8c10"/>
        <function-ref name="clr" scoped="" ref="0x7f27d99e8da0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port60" ref="0x7f27d99f7140" loc="54:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port60" scoped="" ref="0x7f27d99f7140"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27d99f75c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f27d99f7750"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27d99f78e0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27d99f7a70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27d99f7c00"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27d99f7d90"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27d99f6020"/>
        <function-ref name="get" scoped="" ref="0x7f27d99f61b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27d99f6340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27d99f64d0"/>
        <function-ref name="set" scoped="" ref="0x7f27d99f6660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27d99f67f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27d99f6980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27d99f6c10"/>
        <function-ref name="clr" scoped="" ref="0x7f27d99f6da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f27d9a14c60" loc="40:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f27d9a14c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f27d9a11020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port65" ref="0x7f27d99ed200" loc="59:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port65" scoped="" ref="0x7f27d99ed200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27d99ed580"/>
        <function-ref name="isInput" scoped="" ref="0x7f27d99ed710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27d99ed8a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27d99eda30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27d99edbc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27d99edd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27d99ec020"/>
        <function-ref name="get" scoped="" ref="0x7f27d99ec1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27d99ec340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27d99ec4d0"/>
        <function-ref name="set" scoped="" ref="0x7f27d99ec660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27d99ec7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27d99ec980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27d99ecc10"/>
        <function-ref name="clr" scoped="" ref="0x7f27d99ecda0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerA" ref="0x7f27d9a084f0" loc="49:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerA" scoped="" ref="0x7f27d9a084f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d9a08870"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f27d9a08a00"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27d9a08b90"/>
        <function-ref name="get" scoped="" ref="0x7f27d9a08d20"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27d99fc020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27d99fc1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f27d99fc340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27d99fc4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f27d99fc660"/>
        <function-ref name="setMode" scoped="" ref="0x7f27d99fc7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f27d99fc980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ADCArbiterInfo" ref="0x7f27d9a0c940" loc="47:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCArbiterInfo" scoped="" ref="0x7f27d9a0c940"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f27d9a0ccc0"/>
        <function-ref name="userId" scoped="" ref="0x7f27d9a0ce50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ControlA1" ref="0x7f27d99fa160" loc="51:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA1" scoped="" ref="0x7f27d99fa160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f27d99fa4e0"/>
        <function-ref name="getControl" scoped="" ref="0x7f27d99fa670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27d99fa800"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f27d99fa990"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f27d99fab20"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27d99facb0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f27d99fae40"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f27d99f9020"/>
        <function-ref name="setControl" scoped="" ref="0x7f27d99f91b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SingleChannel" ref="0x7f27d9a11980" loc="41:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SingleChannel" scoped="" ref="0x7f27d9a11980"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f27d9a11d00"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f27d9a0f020"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f27d9a0f1b0"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f27d9a0f340"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f27d9a0f4d0"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f27d9a0f660"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f27d9a0f7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port63" ref="0x7f27d99f1200" loc="57:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port63" scoped="" ref="0x7f27d99f1200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27d99f1580"/>
        <function-ref name="isInput" scoped="" ref="0x7f27d99f1710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27d99f18a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27d99f1a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27d99f1bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27d99f1d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27d99f0020"/>
        <function-ref name="get" scoped="" ref="0x7f27d99f01b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27d99f0340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27d99f04d0"/>
        <function-ref name="set" scoped="" ref="0x7f27d99f0660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27d99f07f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27d99f0980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27d99f0c10"/>
        <function-ref name="clr" scoped="" ref="0x7f27d99f0da0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CompareA0" ref="0x7f27d99f9530" loc="52:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA0" scoped="" ref="0x7f27d99f9530"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27d99f98b0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f27d99f9a40"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f27d99f9bd0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f27d99f9d60"/>
        <function-ref name="fired" scoped="" ref="0x7f27d99f8020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port61" ref="0x7f27d99f5200" loc="55:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port61" scoped="" ref="0x7f27d99f5200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27d99f5580"/>
        <function-ref name="isInput" scoped="" ref="0x7f27d99f5710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27d99f58a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27d99f5a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27d99f5bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27d99f5d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27d99f4020"/>
        <function-ref name="get" scoped="" ref="0x7f27d99f41b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27d99f4340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27d99f44d0"/>
        <function-ref name="set" scoped="" ref="0x7f27d99f4660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27d99f47f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27d99f4980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27d99f4c10"/>
        <function-ref name="clr" scoped="" ref="0x7f27d99f4da0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port66" ref="0x7f27d99eb200" loc="60:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port66" scoped="" ref="0x7f27d99eb200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f27d99eb580"/>
        <function-ref name="isInput" scoped="" ref="0x7f27d99eb710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f27d99eb8a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f27d99eba30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f27d99ebbc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f27d99ebd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f27d99ea020"/>
        <function-ref name="get" scoped="" ref="0x7f27d99ea1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f27d99ea340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f27d99ea4d0"/>
        <function-ref name="set" scoped="" ref="0x7f27d99ea660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f27d99ea7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f27d99ea980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f27d99eac10"/>
        <function-ref name="clr" scoped="" ref="0x7f27d99eada0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAdc12" ref="0x7f27d992a020" loc="46:../../../tos/chips/msp430/adc12/HplAdc12P.nc">
      <component-ref qname="HplAdc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplAdc12" scoped="" ref="0x7f27d992a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAdc12"/>
      </instance>
      <interface-functions>
        <function-ref name="getCtl0" scoped="" ref="0x7f27d992a3a0"/>
        <function-ref name="getMCtl" scoped="" ref="0x7f27d992a530"/>
        <function-ref name="resetIFGs" scoped="" ref="0x7f27d992a6c0"/>
        <function-ref name="isBusy" scoped="" ref="0x7f27d992a850"/>
        <function-ref name="conversionDone" scoped="" ref="0x7f27d992a9e0"/>
        <function-ref name="getCtl1" scoped="" ref="0x7f27d992ab70"/>
        <function-ref name="setMCtl" scoped="" ref="0x7f27d992ad00"/>
        <function-ref name="startConversion" scoped="" ref="0x7f27d9929020"/>
        <function-ref name="setCtl0" scoped="" ref="0x7f27d99291b0"/>
        <function-ref name="getMem" scoped="" ref="0x7f27d9929340"/>
        <function-ref name="setIEFlags" scoped="" ref="0x7f27d99294d0"/>
        <function-ref name="getIEFlags" scoped="" ref="0x7f27d9929660"/>
        <function-ref name="stopConversion" scoped="" ref="0x7f27d99297f0"/>
        <function-ref name="enableConversion" scoped="" ref="0x7f27d9929a80"/>
        <function-ref name="setCtl1" scoped="" ref="0x7f27d9929c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f27d989a3a0" loc="86:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f27d989a3a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f27d989a740"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f27d989a8d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f27d9899570" loc="89:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f27d9899570"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f27d9899910"/>
        <function-ref name="configure" scoped="" ref="0x7f27d9899aa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f27d989b520" loc="85:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f27d989b520"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d989b8c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f27d989ba50"/>
        <function-ref name="request" scoped="" ref="0x7f27d989bbe0"/>
        <function-ref name="granted" scoped="" ref="0x7f27d989bd70"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d989a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f27d989ab20" loc="87:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f27d989ab20"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f27d9899020"/>
        <function-ref name="userId" scoped="" ref="0x7f27d98991b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f27d8f70060" loc="44:../../../tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f27d8f70060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f27d8f703e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RoundRobinQueue" ref="0x7f27d8f70670" loc="45:../../../tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RoundRobinQueue" scoped="" ref="0x7f27d8f70670"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f27d8f709f0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f27d8f70b80"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f27d8f70d10"/>
        <function-ref name="dequeue" scoped="" ref="0x7f27d8f6e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f27d8f6c530" loc="52:../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f27d8f6c530"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f27d8f6c8d0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f27d8f6ca60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f27d8f6b610" loc="56:../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f27d8f6b610"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f27d8f6b9b0"/>
        <function-ref name="configure" scoped="" ref="0x7f27d8f6bb40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f27d8f6bdd0" loc="57:../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f27d8f6bdd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f27d8f6a180"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f27d8f6a310"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f27d8f6a4a0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f27d8f6a630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f27d8f6d6c0" loc="51:../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f27d8f6d6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d8f6da60"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f27d8f6dbf0"/>
        <function-ref name="request" scoped="" ref="0x7f27d8f6dd80"/>
        <function-ref name="granted" scoped="" ref="0x7f27d8f6c020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d8f6c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f27d8f6ccb0" loc="53:../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f27d8f6ccb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f27d8f6b0a0"/>
        <function-ref name="userId" scoped="" ref="0x7f27d8f6b230"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7f27d8f6a900" loc="68:../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantedTask" scoped="" ref="0x7f27d8f6a900"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f27d8f6ac80"/>
        <function-ref name="runTask" scoped="" ref="0x7f27d8f6ae10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f27d987c740" loc="55:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <component-ref qname="Msp430RefVoltArbiterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Config" scoped="" ref="0x7f27d987c740"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f27d9aad4e0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f27d9aaeb70"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f27d987b3d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcResource" ref="0x7f27d987e1d0" loc="54:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <component-ref qname="Msp430RefVoltArbiterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcResource" scoped="" ref="0x7f27d987e1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d987e550"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f27d987e6e0"/>
        <function-ref name="request" scoped="" ref="0x7f27d987e870"/>
        <function-ref name="granted" scoped="" ref="0x7f27d987ea00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d987eb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ClientResource" ref="0x7f27d9882d20" loc="52:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <component-ref qname="Msp430RefVoltArbiterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ClientResource" scoped="" ref="0x7f27d9882d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d987f0e0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f27d987f270"/>
        <function-ref name="request" scoped="" ref="0x7f27d987f400"/>
        <function-ref name="granted" scoped="" ref="0x7f27d987f590"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d987f720"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAdc12" ref="0x7f27d98779a0" loc="43:../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplAdc12" scoped="" ref="0x7f27d98779a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAdc12"/>
      </instance>
      <interface-functions>
        <function-ref name="getCtl0" scoped="" ref="0x7f27d9877d20"/>
        <function-ref name="getMCtl" scoped="" ref="0x7f27d9876020"/>
        <function-ref name="resetIFGs" scoped="" ref="0x7f27d98761b0"/>
        <function-ref name="isBusy" scoped="" ref="0x7f27d9876340"/>
        <function-ref name="conversionDone" scoped="" ref="0x7f27d98764d0"/>
        <function-ref name="getCtl1" scoped="" ref="0x7f27d9876660"/>
        <function-ref name="setMCtl" scoped="" ref="0x7f27d98767f0"/>
        <function-ref name="startConversion" scoped="" ref="0x7f27d9876980"/>
        <function-ref name="setCtl0" scoped="" ref="0x7f27d9876b10"/>
        <function-ref name="getMem" scoped="" ref="0x7f27d9876ca0"/>
        <function-ref name="setIEFlags" scoped="" ref="0x7f27d9876e30"/>
        <function-ref name="getIEFlags" scoped="" ref="0x7f27d9875020"/>
        <function-ref name="stopConversion" scoped="" ref="0x7f27d98751b0"/>
        <function-ref name="enableConversion" scoped="" ref="0x7f27d9875440"/>
        <function-ref name="setCtl1" scoped="" ref="0x7f27d98755d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SwitchOffTimer" ref="0x7f27d986f020" loc="45:../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SwitchOffTimer" scoped="" ref="0x7f27d986f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da6496b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f27da649e20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f27d986b630"/>
        <function-ref name="fired" scoped="" ref="0x7f27d986ea60"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f27d986c920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f27d986c4a0"/>
        <function-ref name="getdt" scoped="" ref="0x7f27d986a020"/>
        <function-ref name="gett0" scoped="" ref="0x7f27d986bab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f27d986c020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f27d986fc10"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f27d986b020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f27d986e110"/>
        <function-ref name="stop" scoped="" ref="0x7f27d986e5e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RefVolt_2_5V" ref="0x7f27d9878e00" loc="39:../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RefVolt_2_5V" scoped="" ref="0x7f27d9878e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f27d98771c0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f27d9877350"/>
        <function-ref name="start" scoped="" ref="0x7f27d98774e0"/>
        <function-ref name="stop" scoped="" ref="0x7f27d9877670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SwitchOffSettleTimer" ref="0x7f27d986a6c0" loc="46:../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SwitchOffSettleTimer" scoped="" ref="0x7f27d986a6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da6496b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f27da649e20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f27d9861c40"/>
        <function-ref name="fired" scoped="" ref="0x7f27d98621e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f27d9861020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f27d9862ae0"/>
        <function-ref name="getdt" scoped="" ref="0x7f27d9860590"/>
        <function-ref name="gett0" scoped="" ref="0x7f27d9860110"/>
        <function-ref name="isRunning" scoped="" ref="0x7f27d9862660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f27d9864390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f27d9861630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f27d9864860"/>
        <function-ref name="stop" scoped="" ref="0x7f27d9864d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RefVolt_1_5V" ref="0x7f27d9878240" loc="38:../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RefVolt_1_5V" scoped="" ref="0x7f27d9878240"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f27d98785c0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f27d9878750"/>
        <function-ref name="start" scoped="" ref="0x7f27d98788e0"/>
        <function-ref name="stop" scoped="" ref="0x7f27d9878a70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SwitchOnTimer" ref="0x7f27d9875a90" loc="44:../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SwitchOnTimer" scoped="" ref="0x7f27d9875a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da6496b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f27da649e20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f27d9870020"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9873510"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f27d9871300"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f27d9873e10"/>
        <function-ref name="getdt" scoped="" ref="0x7f27d9870920"/>
        <function-ref name="gett0" scoped="" ref="0x7f27d98704a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f27d9873990"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f27d98746b0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f27d9871910"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f27d9874b80"/>
        <function-ref name="stop" scoped="" ref="0x7f27d9873090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f27d9810020" loc="43:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Config" scoped="" ref="0x7f27d9810020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f27d9aad4e0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f27d9aaeb70"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f27d9810c50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RefVolt_2_5V" ref="0x7f27d98129c0" loc="42:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RefVolt_2_5V" scoped="" ref="0x7f27d98129c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f27d9812d40"/>
        <function-ref name="stopDone" scoped="" ref="0x7f27d9811020"/>
        <function-ref name="start" scoped="" ref="0x7f27d98111b0"/>
        <function-ref name="stop" scoped="" ref="0x7f27d9811340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcResource" ref="0x7f27d9814030" loc="40:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcResource" scoped="" ref="0x7f27d9814030"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d98143b0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f27d9814540"/>
        <function-ref name="request" scoped="" ref="0x7f27d98146d0"/>
        <function-ref name="granted" scoped="" ref="0x7f27d9814860"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d98149f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ClientResource" ref="0x7f27d9818ca0" loc="38:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ClientResource" scoped="" ref="0x7f27d9818ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d98150a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f27d9815230"/>
        <function-ref name="request" scoped="" ref="0x7f27d98153c0"/>
        <function-ref name="granted" scoped="" ref="0x7f27d9815550"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d98156e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="switchOff" ref="0x7f27d980e7f0" loc="52:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="switchOff" scoped="" ref="0x7f27d980e7f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f27d980eb70"/>
        <function-ref name="runTask" scoped="" ref="0x7f27d980ed00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RefVolt_1_5V" ref="0x7f27d9814d80" loc="41:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RefVolt_1_5V" scoped="" ref="0x7f27d9814d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f27d9812180"/>
        <function-ref name="stopDone" scoped="" ref="0x7f27d9812310"/>
        <function-ref name="start" scoped="" ref="0x7f27d98124a0"/>
        <function-ref name="stop" scoped="" ref="0x7f27d9812630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f27d97df4e0" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="Msp430RefVoltArbiterP.SwitchOnDelayTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f27d97df4e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da6496b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f27da649e20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f27d97dba20"/>
        <function-ref name="fired" scoped="" ref="0x7f27d97dc020"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f27d97dcda0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f27d97dc920"/>
        <function-ref name="getdt" scoped="" ref="0x7f27d97da4a0"/>
        <function-ref name="gett0" scoped="" ref="0x7f27d97da020"/>
        <function-ref name="isRunning" scoped="" ref="0x7f27d97dc4a0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f27d97de110"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f27d97db410"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f27d97de5e0"/>
        <function-ref name="stop" scoped="" ref="0x7f27d97deab0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f27d97d8020" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="Msp430RefVoltArbiterP.SwitchOffDelayTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f27d97d8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da6496b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f27da649e20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f27d97d4630"/>
        <function-ref name="fired" scoped="" ref="0x7f27d97d7a60"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f27d97d5920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f27d97d54a0"/>
        <function-ref name="getdt" scoped="" ref="0x7f27d97d3020"/>
        <function-ref name="gett0" scoped="" ref="0x7f27d97d4ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f27d97d5020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f27d97d8c10"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f27d97d4020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f27d97d7110"/>
        <function-ref name="stop" scoped="" ref="0x7f27d97d75e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f27d97d2b40" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="Msp430RefVoltArbiterP.SwitchOffSettleTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f27d97d2b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da6496b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f27da649e20"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f27d97cd110"/>
        <function-ref name="fired" scoped="" ref="0x7f27d97cf5b0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f27d97ce4a0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f27d97ce020"/>
        <function-ref name="getdt" scoped="" ref="0x7f27d97cda10"/>
        <function-ref name="gett0" scoped="" ref="0x7f27d97cd590"/>
        <function-ref name="isRunning" scoped="" ref="0x7f27d97cfa30"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f27d97d1750"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f27d97ceab0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f27d97d1c20"/>
        <function-ref name="stop" scoped="" ref="0x7f27d97cf130"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfSub" ref="0x7f27d8f85060" loc="44:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="TempTestAppC.LightSensor.AdcReadClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfSub" scoped="" ref="0x7f27d8f85060"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f27d9aad4e0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f27d9aaeb70"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f27d8f85c90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ConfUp" ref="0x7f27d8f84300" loc="45:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="TempTestAppC.LightSensor.AdcReadClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfUp" scoped="" ref="0x7f27d8f84300"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f27d9aad4e0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f27d9aaeb70"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f27d8f83020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7f27d8f9d5c0" loc="49:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <component-ref qname="TempTestAppC.LightSensor.AdcReadStreamClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f27d8f9d5c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f27d9aad4e0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f27d9aaeb70"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f27d8f9b240"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadStream" ref="0x7f27d8fa0840" loc="48:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <component-ref qname="TempTestAppC.LightSensor.AdcReadStreamClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadStream" scoped="" ref="0x7f27d8fa0840"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x7f27d8f9e340"/>
        <function-ref name="postBuffer" scoped="" ref="0x7f27d8f9f480"/>
        <function-ref name="read" scoped="" ref="0x7f27d8f9fdf0"/>
        <function-ref name="readDone" scoped="" ref="0x7f27d8f9edf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Adc12SingleChannel" ref="0x7f27d9795c90" loc="23:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <component-ref qname="WireAdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f27d9795c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f27d97930a0"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f27d9793230"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f27d97933c0"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f27d9793550"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f27d97936e0"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f27d9793870"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f27d9793a00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7f27d97965e0" loc="22:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <component-ref qname="WireAdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f27d97965e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f27d9aad4e0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f27d9aaeb70"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f27d9795240"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadStream" ref="0x7f27d979a1d0" loc="20:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <component-ref qname="WireAdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadStream" scoped="" ref="0x7f27d979a1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x7f27d9798c40"/>
        <function-ref name="postBuffer" scoped="" ref="0x7f27d979adc0"/>
        <function-ref name="read" scoped="" ref="0x7f27d9798770"/>
        <function-ref name="readDone" scoped="" ref="0x7f27d9797730"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7f27d9792280" loc="24:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <component-ref qname="WireAdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f27d9792280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d9792600"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f27d9792790"/>
        <function-ref name="request" scoped="" ref="0x7f27d9792920"/>
        <function-ref name="granted" scoped="" ref="0x7f27d9792ab0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d9792c40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="bufferDone" ref="0x7f27d975c380" loc="156:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="bufferDone" scoped="" ref="0x7f27d975c380"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f27d975c700"/>
        <function-ref name="runTask" scoped="" ref="0x7f27d975c890"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="readStreamDone" ref="0x7f27d976aaa0" loc="119:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="readStreamDone" scoped="" ref="0x7f27d976aaa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f27d976ae20"/>
        <function-ref name="runTask" scoped="" ref="0x7f27d9769020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="readStreamFail" ref="0x7f27d9764100" loc="135:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="readStreamFail" scoped="" ref="0x7f27d9764100"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f27d9764480"/>
        <function-ref name="runTask" scoped="" ref="0x7f27d9764610"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f27d9785020" loc="54:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f27d9785020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da6496b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f27da649e20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f27db523920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f27d9782870"/>
        <function-ref name="fired" scoped="" ref="0x7f27d9784840"/>
        <function-ref name="startAt" scoped="" ref="0x7f27d9782220"/>
        <function-ref name="isRunning" scoped="" ref="0x7f27d9784d00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f27d9782d30"/>
        <function-ref name="start" scoped="" ref="0x7f27d9785e30"/>
        <function-ref name="stop" scoped="" ref="0x7f27d9784380"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f27d978e150" loc="48:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f27d978e150"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x7f27daadd800"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x7f27daadd800"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f27d978e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7f27d9788b10" loc="53:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f27d9788b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f27d9aad4e0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f27d9aaeb70"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f27d9786790"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SingleChannel" ref="0x7f27d97891d0" loc="52:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SingleChannel" scoped="" ref="0x7f27d97891d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f27d9789550"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f27d97896e0"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f27d9789870"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f27d9789a00"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f27d9789b90"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f27d9789d20"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f27d9788020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadStream" ref="0x7f27d978ee70" loc="49:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadStream" scoped="" ref="0x7f27d978ee70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x7f27d978b910"/>
        <function-ref name="postBuffer" scoped="" ref="0x7f27d978da90"/>
        <function-ref name="read" scoped="" ref="0x7f27d978b440"/>
        <function-ref name="readDone" scoped="" ref="0x7f27d978a440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f27d9720970" loc="44:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="WireAdcStreamP.Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f27d9720970"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da6496b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f27da649e20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f27db523920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f27d971c1b0"/>
        <function-ref name="fired" scoped="" ref="0x7f27d971d1b0"/>
        <function-ref name="startAt" scoped="" ref="0x7f27d971db30"/>
        <function-ref name="isRunning" scoped="" ref="0x7f27d971d670"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f27d971c670"/>
        <function-ref name="start" scoped="" ref="0x7f27d971f7c0"/>
        <function-ref name="stop" scoped="" ref="0x7f27d971fcd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f27d9720120" loc="43:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="WireAdcStreamP.Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f27d9720120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f27d97204a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f27d8f21ca0" loc="44:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f27d8f21ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da648290"/>
            <typename><typedef-ref name="T32khz" ref="0x7f27da648600"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f27d8f1e4e0"/>
        <function-ref name="fired" scoped="" ref="0x7f27d8f1f4e0"/>
        <function-ref name="startAt" scoped="" ref="0x7f27d8f1fe60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f27d8f1f9a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f27d8f1e9a0"/>
        <function-ref name="start" scoped="" ref="0x7f27d8f20ae0"/>
        <function-ref name="stop" scoped="" ref="0x7f27d8f1f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f27d8f21450" loc="43:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f27d8f21450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f27d8f217d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f27d8f08440" loc="41:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f27d8f08440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27d8f087c0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f27d8f08950"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f27d8f08ae0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f27d8f08c70"/>
        <function-ref name="fired" scoped="" ref="0x7f27d8f08e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f27d8f0b880" loc="39:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f27d8f0b880"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d8f0bc00"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f27d8f0bd90"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27d8f0a020"/>
        <function-ref name="get" scoped="" ref="0x7f27d8f0a1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27d8f0a340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27d8f0a4d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f27d8f0a660"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27d8f0a7f0"/>
        <function-ref name="overflow" scoped="" ref="0x7f27d8f0a980"/>
        <function-ref name="setMode" scoped="" ref="0x7f27d8f0ab10"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f27d8f0aca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f27d8f09020" loc="40:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f27d8f09020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f27d8f093a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f27d8f09530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27d8f096c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f27d8f09850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f27d8f099e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27d8f09b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f27d8f09d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f27d8f08020"/>
        <function-ref name="setControl" scoped="" ref="0x7f27d8f081b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7f27d8efe0c0" loc="49:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f27d8efe0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f27d8efe440"/>
        <function-ref name="setEvent" scoped="" ref="0x7f27d8efe5d0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f27d8efe760"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f27d8efe8f0"/>
        <function-ref name="fired" scoped="" ref="0x7f27d8efea80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f27d8f01710" loc="47:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f27d8f01710"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f27d8f01a90"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f27d8f01c20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27d8f01db0"/>
        <function-ref name="get" scoped="" ref="0x7f27d8f00020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27d8f001b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27d8f00340"/>
        <function-ref name="getMode" scoped="" ref="0x7f27d8f004d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27d8f00660"/>
        <function-ref name="overflow" scoped="" ref="0x7f27d8f007f0"/>
        <function-ref name="setMode" scoped="" ref="0x7f27d8f00980"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f27d8f00b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f27d8f055b0" loc="46:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f27d8f055b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da648290"/>
            <typename><typedef-ref name="T32khz" ref="0x7f27da648600"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f27d8f02df0"/>
        <function-ref name="fired" scoped="" ref="0x7f27d8f04df0"/>
        <function-ref name="startAt" scoped="" ref="0x7f27d8f027a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f27d8f022e0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f27d8f012e0"/>
        <function-ref name="start" scoped="" ref="0x7f27d8f04420"/>
        <function-ref name="stop" scoped="" ref="0x7f27d8f04930"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f27d8f06ca0" loc="45:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f27d8f06ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f27d8f050a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7f27d8f00da0" loc="48:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f27d8f00da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f27d8eff180"/>
        <function-ref name="getControl" scoped="" ref="0x7f27d8eff310"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f27d8eff4a0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f27d8eff630"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f27d8eff7c0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f27d8eff950"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f27d8effae0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f27d8effc70"/>
        <function-ref name="setControl" scoped="" ref="0x7f27d8effe00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f27d8f1b020" loc="61:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f27d8f1b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da6496b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f27da649e20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f27db523920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f27d8f18870"/>
        <function-ref name="fired" scoped="" ref="0x7f27d8f1a840"/>
        <function-ref name="startAt" scoped="" ref="0x7f27d8f18220"/>
        <function-ref name="isRunning" scoped="" ref="0x7f27d8f1ad00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f27d8f18d30"/>
        <function-ref name="start" scoped="" ref="0x7f27d8f1be30"/>
        <function-ref name="stop" scoped="" ref="0x7f27d8f1a380"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7f27d8f15780" loc="73:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7f27d8f15780"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da648290"/>
            <typename><typedef-ref name="T32khz" ref="0x7f27da648600"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f27d8f11020"/>
        <function-ref name="fired" scoped="" ref="0x7f27d8f12020"/>
        <function-ref name="startAt" scoped="" ref="0x7f27d8f129a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f27d8f124e0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f27d8f114e0"/>
        <function-ref name="start" scoped="" ref="0x7f27d8f135d0"/>
        <function-ref name="stop" scoped="" ref="0x7f27d8f13ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f27d8f173d0" loc="68:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f27d8f173d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27da6496b0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f27da649e20"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f27db523920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f27d8f16240"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f27d8f16bc0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f27d8f16700"/>
        <function-ref name="overflow" scoped="" ref="0x7f27d8f150d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Service" ref="0x7f27d96ecbf0" loc="26:../../../tos/system/ArbitratedReadStreamC.nc">
      <component-ref qname="WireAdcStreamP.ArbitrateReadStream"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Service" scoped="" ref="0x7f27d96ecbf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x7f27d96ea710"/>
        <function-ref name="postBuffer" scoped="" ref="0x7f27d96eb860"/>
        <function-ref name="read" scoped="" ref="0x7f27d96ea220"/>
        <function-ref name="readDone" scoped="" ref="0x7f27d96e8220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadStream" ref="0x7f27d9718cb0" loc="24:../../../tos/system/ArbitratedReadStreamC.nc">
      <component-ref qname="WireAdcStreamP.ArbitrateReadStream"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadStream" scoped="" ref="0x7f27d9718cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x7f27d96ee850"/>
        <function-ref name="postBuffer" scoped="" ref="0x7f27d96ef940"/>
        <function-ref name="read" scoped="" ref="0x7f27d96ee360"/>
        <function-ref name="readDone" scoped="" ref="0x7f27d96ec360"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7f27d96e88f0" loc="27:../../../tos/system/ArbitratedReadStreamC.nc">
      <component-ref qname="WireAdcStreamP.ArbitrateReadStream"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f27d96e88f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d96e8c90"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f27d96e8e20"/>
        <function-ref name="request" scoped="" ref="0x7f27d96e7020"/>
        <function-ref name="granted" scoped="" ref="0x7f27d96e71b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d96e7340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12MultiChannel" ref="0x7f27d8f2f020" loc="48:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TempTestAppC.LightSensor.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f27d8f2f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f27d8f2f3a0"/>
        <function-ref name="configure" scoped="" ref="0x7f27d8f2f530"/>
        <function-ref name="dataReady" scoped="" ref="0x7f27d8f2f6c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12SingleChannel" ref="0x7f27d8f30020" loc="47:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TempTestAppC.LightSensor.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f27d8f30020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f27d8f303a0"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f27d8f30530"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f27d8f306c0"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f27d8f30850"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f27d8f309e0"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f27d8f30b70"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f27d8f30d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12Overflow" ref="0x7f27d8f2f910" loc="49:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TempTestAppC.LightSensor.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f27d8f2f910"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7f27d8f2fc90"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7f27d8f2fe20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7f27d8f2e280" loc="51:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TempTestAppC.LightSensor.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f27d8f2e280"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f27d9aad4e0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f27d9aaeb70"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f27d8f2d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f27d8f31360" loc="46:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TempTestAppC.LightSensor.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f27d8f31360"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f27d8f316e0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f27d8f31870"/>
        <function-ref name="request" scoped="" ref="0x7f27d8f31a00"/>
        <function-ref name="granted" scoped="" ref="0x7f27d8f31b90"/>
        <function-ref name="isOwner" scoped="" ref="0x7f27d8f31d20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfSub" ref="0x7f27d8ebedc0" loc="44:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="TempTestAppC.LightSensor.AdcReadStreamClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfSub" scoped="" ref="0x7f27d8ebedc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f27d9aad4e0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f27d9aaeb70"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f27d8ebcac0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ConfUp" ref="0x7f27d8ebb120" loc="45:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="TempTestAppC.LightSensor.AdcReadStreamClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfUp" scoped="" ref="0x7f27d8ebb120"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f27d9aad4e0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f27d9aaeb70"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f27d8ebbd50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AdcConfigure" ref="0x7f27d96cf300" loc="44:../../../tos/platforms/telosa/chips/s10871/HamamatsuS10871TsrP.nc">
      <component-ref qname="HamamatsuS10871TsrP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f27d96cf300"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f27d9aad4e0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f27d9aaeb70"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f27d96ce020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DeviceMetadata" ref="0x7f27d96d28b0" loc="43:../../../tos/platforms/telosa/chips/s10871/HamamatsuS10871TsrP.nc">
      <component-ref qname="HamamatsuS10871TsrP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DeviceMetadata" scoped="" ref="0x7f27d96d28b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="DeviceMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="getSignificantBits" scoped="" ref="0x7f27d96d2c30"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Read" loc="49:../../../tos/interfaces/Read.nc">
      <documentation loc="33:../../../tos/interfaces/Read.nc">
        <short>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values.</short>
        <long>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values. The type of the value is&#10; given as a template argument. Because this interface is&#10; split-phase, these values may be backed by hardware, or a&#10; long-running computation.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:14 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x7f27da6265c0" loc="49:../../../tos/interfaces/Read.nc">
          <interfacedef-ref qname="Read"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f27da6265c0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x7f27da626e80" loc="55:../../../tos/interfaces/Read.nc">
        <documentation loc="50:../../../tos/interfaces/Read.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x7f27da618bd0" loc="63:../../../tos/interfaces/Read.nc">
        <documentation loc="57:../../../tos/interfaces/Read.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f27da6265c0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f27da618620" loc="63:../../../tos/interfaces/Read.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x7f27da618940" loc="63:../../../tos/interfaces/Read.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f27da6265c0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:../../../tos/interfaces/Boot.nc">
      <documentation loc="42:../../../tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x7f27da635270" loc="60:../../../tos/interfaces/Boot.nc">
        <documentation loc="51:../../../tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="51:../../../tos/interfaces/Leds.nc">
      <documentation loc="33:../../../tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x7f27da6227b0" loc="61:../../../tos/interfaces/Leds.nc">
        <documentation loc="58:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x7f27da621020" loc="67:../../../tos/interfaces/Leds.nc">
        <documentation loc="63:../../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x7f27da621800" loc="72:../../../tos/interfaces/Leds.nc">
        <documentation loc="69:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x7f27da6207d0" loc="83:../../../tos/interfaces/Leds.nc">
        <documentation loc="79:../../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x7f27da61d020" loc="100:../../../tos/interfaces/Leds.nc">
        <documentation loc="96:../../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f27da61d830" loc="117:../../../tos/interfaces/Leds.nc">
        <documentation loc="103:../../../tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x7f27da620020" loc="77:../../../tos/interfaces/Leds.nc">
        <documentation loc="74:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f27da61c3f0" loc="134:../../../tos/interfaces/Leds.nc">
        <documentation loc="120:../../../tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7f27da61c170" loc="134:../../../tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x7f27da622020" loc="56:../../../tos/interfaces/Leds.nc">
        <documentation loc="53:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x7f27da61e020" loc="89:../../../tos/interfaces/Leds.nc">
        <documentation loc="86:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x7f27da61e7b0" loc="94:../../../tos/interfaces/Leds.nc">
        <documentation loc="91:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:../../../tos/lib/timer/Timer.nc">
      <documentation loc="36:../../../tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f27da6343d0" loc="53:../../../tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f27da6343d0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f27da62d1f0" loc="136:../../../tos/lib/timer/Timer.nc">
        <documentation loc="132:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f27db523920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f27da632a60" loc="83:../../../tos/lib/timer/Timer.nc">
        <documentation loc="80:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x7f27da62f820" loc="114:../../../tos/lib/timer/Timer.nc">
        <documentation loc="100:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f27db523920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f27db523920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f27da62f250" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f27db523920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f27da62f590" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f27db523920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x7f27da630a60" loc="98:../../../tos/lib/timer/Timer.nc">
        <documentation loc="94:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x7f27da62b270" loc="151:../../../tos/lib/timer/Timer.nc">
        <documentation loc="146:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f27db523920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x7f27da62d980" loc="144:../../../tos/lib/timer/Timer.nc">
        <documentation loc="138:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f27db523920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f27da630270" loc="92:../../../tos/lib/timer/Timer.nc">
        <documentation loc="86:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x7f27da633020" loc="64:../../../tos/lib/timer/Timer.nc">
        <documentation loc="56:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f27db523920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f27da634cc0" loc="64:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f27db523920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x7f27da62e820" loc="129:../../../tos/lib/timer/Timer.nc">
        <documentation loc="116:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f27db523920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f27db523920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f27da62e250" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f27db523920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f27da62e590" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f27db523920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x7f27da633ae0" loc="73:../../../tos/lib/timer/Timer.nc">
        <documentation loc="66:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f27db523920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f27da633860" loc="73:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f27db523920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f27da632350" loc="78:../../../tos/lib/timer/Timer.nc">
        <documentation loc="75:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Init" loc="51:../../../tos/interfaces/Init.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f27da5fddc0" loc="62:../../../tos/interfaces/Init.nc">
        <documentation loc="53:../../../tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430ClockInit" loc="38:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="defaultInitTimerB" ref="0x7f27da5ceb40" loc="48:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerB" ref="0x7f27da5d0de0" loc="43:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitTimerA" ref="0x7f27da5ce420" loc="47:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerA" ref="0x7f27da5d0700" loc="42:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultSetupDcoCalibrate" ref="0x7f27da5cf5a0" loc="45:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="setupDcoCalibrate" ref="0x7f27da5d3900" loc="40:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initClocks" ref="0x7f27da5d0020" loc="41:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitClocks" ref="0x7f27da5cfcc0" loc="46:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:../../../tos/interfaces/McuPowerOverride.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x7f27da75c020" loc="62:../../../tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:../../../tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x7f27daa21c00"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerControl" loc="40:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="setControlAsCapture" ref="0x7f27da57b730" loc="55:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <documentation loc="49:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
          <short> &#10; Sets the timer in capture mode.</short>
          <long> &#10; Sets the timer in capture mode.&#10; @param cm configures the capture to occur on none, rising, falling or rising_and_falling edges&#10; Msp430Timer.h has convenience definitions:&#10; MSP430TIMER_CM_NONE, MSP430TIMER_CM_RISING, MSP430TIMER_CM_FALLING, MSP430TIMER_CM_BOTH&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7f27da57b4b0" loc="55:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControl" ref="0x7f27da588ba0" loc="42:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f27da5c55a0"/>
            <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f27da5c4020"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7f27da57a020" loc="57:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="areEventsEnabled" ref="0x7f27da578020" loc="59:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlAsCompare" ref="0x7f27da57cd10" loc="47:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7f27da57a760" loc="58:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x7f27da57d390" loc="43:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearPendingInterrupt" ref="0x7f27da57db20" loc="44:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x7f27da57c5a0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f27da5c55a0"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f27da5c4020"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f27da57c320" loc="46:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f27da5c55a0"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f27da5c4020"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Capture" loc="39:../../../tos/chips/msp430/timer/Msp430Capture.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7f27da56d760" loc="44:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="41:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Reads the value of the last capture event in TxCCRx&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSynchronous" ref="0x7f27da56a020" loc="84:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="75:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set whether the capture should occur synchronously or asynchronously.</short>
          <long>&#10; Set whether the capture should occur synchronously or asynchronously.&#10; TinyOS default is synchronous captures.&#10; WARNING: if the capture signal is asynchronous to the timer clock,&#10;          it could case a race condition (see Timer documentation&#10;          in MSP430F1xx user guide)&#10; @param synchronous TRUE to synchronize the timer capture with the&#10;        next timer clock instead of occurring asynchronously.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="synchronous" ref="0x7f27da56bc60" loc="84:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7f27da56abb0" loc="91:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="86:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Signalled when an event is captured.</short>
          <long>&#10; Signalled when an event is captured.&#10;&#10; @param time The time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f27da56a930" loc="91:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f27da56b4b0" loc="73:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="70:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Clear the capture overflow flag for when multiple captures occur&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f27da56cbc0" loc="68:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="58:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Determine if a capture overflow is pending.</short>
          <long>&#10; Determine if a capture overflow is pending.&#10;&#10; TI calls this overflow but it is actually an overrun.&#10; If COV is set it says that another capture has occurred&#10; prior to reading a previous capture.  The previous value&#10; of a capture has been lost.&#10;&#10; @return TRUE if the capture register has overflowed&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEdge" ref="0x7f27da56c2a0" loc="56:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="46:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set the edge that the capture should occur&#10;&#10; </short>
          <long>&#10; Set the edge that the capture should occur&#10;&#10; @param cm Capture Mode for edge capture.&#10; enums exist for:&#10;   MSP430TIMER_CM_NONE is no capture.&#10;   MSP430TIMER_CM_RISING is rising edge capture.&#10;   MSP430TIMER_CM_FALLING is a falling edge capture.&#10;   MSP430TIMER_CM_BOTH captures on both rising and falling edges.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7f27da56c020" loc="56:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Compare" loc="38:../../../tos/chips/msp430/timer/Msp430Compare.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7f27da576b80" loc="40:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEvent" ref="0x7f27da573520" loc="41:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f27da5732a0" loc="41:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromPrev" ref="0x7f27da572020" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7f27da573c80" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromNow" ref="0x7f27da5729f0" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7f27da572770" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f27da570120" loc="45:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Timer" loc="43:../../../tos/chips/msp430/timer/Msp430Timer.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f27da5832b0" loc="52:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7f27da582b80" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="clockSource" ref="0x7f27da582900" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7f27da5839e0" loc="53:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f27da5874e0" loc="45:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7f27da582190" loc="54:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f27da5863e0" loc="47:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7f27da585b80" loc="51:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f27da587c70" loc="46:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f27da586af0" loc="48:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMode" ref="0x7f27da585480" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f27da585200" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInputDivider" ref="0x7f27da581610" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="inputDivider" ref="0x7f27da581390" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerEvent" loc="37:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f27da5441f0" loc="39:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <interfacedef-ref qname="Msp430TimerEvent"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="77:../../../tos/interfaces/McuSleep.nc">
      <documentation loc="65:../../../tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @date   Oct 25, 2016&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="irq_preamble" ref="0x7f27da67fa80" loc="85:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="irq_postamble" ref="0x7f27da67e1f0" loc="86:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7f27da67f2b0" loc="79:../../../tos/interfaces/McuSleep.nc">
        <documentation loc="78:../../../tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:../../../tos/interfaces/McuPowerState.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x7f27da898810" loc="52:../../../tos/interfaces/McuPowerState.nc">
        <documentation loc="47:../../../tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:../../../tos/interfaces/Scheduler.nc">
      <documentation loc="42:../../../tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f27daada020" loc="57:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="54:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x7f27daad9020" loc="72:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="67:../../../tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x7f27daada790" loc="65:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="59:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:../../../tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x7f27daace270" loc="67:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="57:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x7f27daaceac0" loc="75:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="69:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:../../../tos/interfaces/GeneralIO.nc">
      <documentation loc="34:../../../tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f27da41be30" loc="44:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f27da41a5c0" loc="45:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f27da41b020" loc="42:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f27da419480" loc="47:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f27da41b720" loc="43:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f27da41ace0" loc="46:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f27da41d120" loc="40:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f27da41d7f0" loc="41:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430GeneralIO" loc="43:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f27da3ef020" loc="78:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="75:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to input.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f27da3ef770" loc="80:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setResistor" ref="0x7f27da3ea2e0" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="103:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin pullup / pull down resistor mode.</short>
          <long>&#10; Set pin pullup / pull down resistor mode.&#10; @param mode One of the MSP430_PORT_RESISTOR_* values&#10; @return EINVAL if invalid mode or pin does not support resistor configuration;&#10; FAIL if pin is not an input;&#10; SUCCESS if pin supports resistor configuration, is an input, and mode is valid&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f27da3ea060" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f27da3f2770" loc="58:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="55:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Toggle pin status.</short>
          <long>&#10; Toggle pin status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f27da3ee780" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getResistor" ref="0x7f27da3eabd0" loc="117:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="112:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the pin pullup / pulldown resistor mode.</short>
          <long>&#10; Get the pin pullup / pulldown resistor mode.&#10;&#10; @return one of the MSP430_PORT_RESISTOR_* values&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f27da3ee020" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to output.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f27da3f0820" loc="73:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="68:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Read pin value.</short>
          <long>&#10; Read pin value.&#10;&#10; @return TRUE if pin is high, FALSE otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectIOFunc" ref="0x7f27da3eb020" loc="99:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="96:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for I/O functionality.</short>
          <long>&#10; Set pin for I/O functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRaw" ref="0x7f27da3f0020" loc="66:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="60:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the port status that contains the pin.</short>
          <long>&#10; Get the port status that contains the pin.&#10;&#10; @return Status of the port that contains the given pin. The x'th&#10; pin on the port will be represented in the x'th bit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f27da3f58b0" loc="48:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="45:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to high.</short>
          <long>&#10; Set pin to high.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectModuleFunc" ref="0x7f27da3ed020" loc="92:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="89:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for module specific functionality.</short>
          <long>&#10; Set pin for module specific functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isIOFunc" ref="0x7f27da3eb7c0" loc="101:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isModuleFunc" ref="0x7f27da3ed7e0" loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f27da3f2020" loc="53:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="50:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to low.</short>
          <long>&#10; Set pin to low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:../../../tos/lib/timer/LocalTime.nc">
      <documentation loc="36:../../../tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f27da1a1c40" loc="53:../../../tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f27da1a1c40"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f27da19d5a0" loc="61:../../../tos/lib/timer/LocalTime.nc">
        <documentation loc="55:../../../tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f27db523920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:../../../tos/lib/timer/Alarm.nc">
      <documentation loc="36:../../../tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f27da1975d0" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f27da1975d0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f27da197810" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f27da197810"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f27da192390" loc="109:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="105:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f27da197810"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f27da1943b0" loc="78:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="75:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x7f27da1939d0" loc="103:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="90:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f27da197810"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f27da197810"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f27da193400" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f27da197810"/></type-var>
          </variable>
          <variable name="dt" ref="0x7f27da193740" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f27da197810"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f27da194b90" loc="88:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="81:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7f27da192b80" loc="116:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="111:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f27da197810"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f27da196390" loc="66:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="59:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f27da197810"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f27da196110" loc="66:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f27da197810"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f27da196bc0" loc="73:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="68:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:../../../tos/lib/timer/Counter.nc">
      <documentation loc="36:../../../tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f27da12ae10" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f27da12ae10"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f27da125070" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f27da125070"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f27da125990" loc="64:../../../tos/lib/timer/Counter.nc">
        <documentation loc="59:../../../tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f27da125070"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f27da124ad0" loc="76:../../../tos/lib/timer/Counter.nc">
        <documentation loc="73:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f27da124270" loc="71:../../../tos/lib/timer/Counter.nc">
        <documentation loc="66:../../../tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f27da123270" loc="82:../../../tos/lib/timer/Counter.nc">
        <documentation loc="78:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="86:../../../tos/interfaces/StdControl.nc">
      <documentation loc="72:../../../tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f27da005c60" loc="95:../../../tos/interfaces/StdControl.nc">
        <documentation loc="88:../../../tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f27da002490" loc="105:../../../tos/interfaces/StdControl.nc">
        <documentation loc="97:../../../tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Putchar" loc="44:../../../tos/lib/printf/Putchar.nc">
      <documentation loc="32:../../../tos/lib/printf/Putchar.nc">
        <short> Interface to be implemented by any low-level component that&#10; provides character output for libc-based printf in TinyOS.</short>
        <long> Interface to be implemented by any low-level component that&#10; provides character output for libc-based printf in TinyOS.  The&#10; component providing this interface should be wired to PutcharC from&#10; $(TINYOS_OS_DIR)/lib/printf.&#10;&#10; @note On some platforms inclusion of &#60;stdio.h> may define putchar&#10; as a macro.  Any need for this should be eliminated by the&#10; implementation in PutcharP.nc, so &#34;#undef putchar&#34; prior to your&#10; use of this identifier when implementing this interface.&#10;&#10; @author Peter A. Bigot &#60;pabigot@users.sourceforge.net>&#10;</long>
      </documentation>
      <function command="" provided="0" name="putchar" ref="0x7f27d9ff72a0" loc="49:../../../tos/lib/printf/Putchar.nc">
        <documentation loc="46:../../../tos/lib/printf/Putchar.nc">
          <short> Send the unsigned char represented by c to the output.</short>
          <long> Send the unsigned char represented by c to the output.  Return&#10; -1 on error, and c if successful. *</long>
        </documentation>
        <interfacedef-ref qname="Putchar"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="c" ref="0x7f27d9ff7020" loc="49:../../../tos/lib/printf/Putchar.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartByte" loc="41:../../../tos/interfaces/UartByte.nc">
      <documentation loc="36:../../../tos/interfaces/UartByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f27d9ffc020" loc="50:../../../tos/interfaces/UartByte.nc">
        <documentation loc="43:../../../tos/interfaces/UartByte.nc">
          <short>&#10; Send a single uart byte.</short>
          <long>&#10; Send a single uart byte. The call blocks until it is ready to&#10; accept another byte for sending.&#10;&#10; @param byte The byte to send.&#10; @return SUCCESS if byte was sent, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f27da000c20" loc="50:../../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sendAvail" ref="0x7f27d9ffc860" loc="59:../../../tos/interfaces/UartByte.nc">
        <documentation loc="52:../../../tos/interfaces/UartByte.nc">
          <short>&#10; sendAvail: is space available for another TX byte.</short>
          <long>&#10; sendAvail: is space available for another TX byte.&#10;&#10; @return TRUE&#9;the TX subsystem can take another byte.  ie.&#10;&#9;&#9;&#9;UartByte.send() would not block if called.&#10;&#9;     FALSE&#9;TX pipeline is full, UartByte.send() would block.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7f27d9ffb740" loc="69:../../../tos/interfaces/UartByte.nc">
        <documentation loc="61:../../../tos/interfaces/UartByte.nc">
          <short>&#10; Receive a single uart byte.</short>
          <long>&#10; Receive a single uart byte. The call blocks until a byte is&#10; received or the timeout occurs.&#10;&#10; @param 'uint8_t* ONE byte' Where to place received byte.&#10; @param timeout How long in byte times to wait.&#10; @return SUCCESS if a byte was received, FAIL if timed out.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f27d9ffb150" loc="69:../../../tos/interfaces/UartByte.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="timeout" ref="0x7f27d9ffb4b0" loc="69:../../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receiveAvail" ref="0x7f27d9ffa590" loc="79:../../../tos/interfaces/UartByte.nc">
        <documentation loc="71:../../../tos/interfaces/UartByte.nc">
          <short>&#10; receiveAvail: incoming has another byte available.</short>
          <long>&#10; receiveAvail: incoming has another byte available.&#10;&#10; @return TRUE&#9;the RX subsystem has another byte to receive.  ie.&#10;&#9;&#9;&#9;UartByte.receive() would not block if called.&#10;&#9;     FALSE&#9;RX pipeline is empty, UartByte.receive() would block&#10;&#9;&#9;&#9;waiting for a byte and/or the timeout.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartStream" loc="37:../../../tos/interfaces/UartStream.nc">
      <documentation loc="32:../../../tos/interfaces/UartStream.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f27d9fece30" loc="48:../../../tos/interfaces/UartStream.nc">
        <documentation loc="39:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin transmission of a UART stream.</short>
          <long>&#10; Begin transmission of a UART stream. If SUCCESS is returned,&#10; &#60;code>sendDone&#60;/code> will be signalled when transmission is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes to send.&#10; @param len Number of bytes to send.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f27d9fec860" loc="48:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f27d9fecba0" loc="48:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedByte" ref="0x7f27d9fe7ac0" loc="79:../../../tos/interfaces/UartStream.nc">
        <documentation loc="74:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signals the receipt of a byte.</short>
          <long>&#10; Signals the receipt of a byte.&#10;&#10; @param byte The byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f27d9fe7840" loc="79:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7f27d9fe4930" loc="90:../../../tos/interfaces/UartStream.nc">
        <documentation loc="81:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin reception of a UART stream.</short>
          <long>&#10; Begin reception of a UART stream. If SUCCESS is returned,&#10; &#60;code>receiveDone&#60;/code> will be signalled when reception is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for received bytes.&#10; @param len Number of bytes to receive.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f27d9fe4360" loc="90:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f27d9fe46a0" loc="90:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveInterrupt" ref="0x7f27d9fe6740" loc="65:../../../tos/interfaces/UartStream.nc">
        <documentation loc="59:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Enable the receive byte interrupt.</short>
          <long>&#10; Enable the receive byte interrupt. The &#60;code>receive&#60;/code> event&#10; is signalled each time a byte is received.&#10;&#10; @return SUCCESS if interrupt was enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="receiveDone" ref="0x7f27d9fe12c0" loc="99:../../../tos/interfaces/UartStream.nc">
        <documentation loc="92:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of receiving a stream.</short>
          <long>&#10; Signal completion of receiving a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes received.&#10; @param len Number of bytes received.&#10; @param error SUCCESS if the reception was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f27d9fe2920" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f27d9fe2c60" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f27d9fe1020" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveInterrupt" ref="0x7f27d9fe7070" loc="72:../../../tos/interfaces/UartStream.nc">
        <documentation loc="67:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Disable the receive byte interrupt.</short>
          <long>&#10; Disable the receive byte interrupt.&#10;&#10; @return SUCCESS if interrupt was disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f27d9fe8720" loc="57:../../../tos/interfaces/UartStream.nc">
        <documentation loc="50:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of sending a stream.</short>
          <long>&#10; Signal completion of sending a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Bytes sent.&#10; @param len Number of bytes sent.&#10; @param error SUCCESS if the transmission was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f27d9fe9db0" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f27d9fe8130" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f27d9fe8480" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:../../../tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x7f27d9f8eae0" loc="53:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f27d9f864e0" loc="61:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430UartConfigure" loc="38:../../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
      <documentation loc="31:../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getConfig" ref="0x7f27d9f83890" loc="39:../../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
        <interfacedef-ref qname="Msp430UartConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f27d9face70"/>
              <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f27d9faa2b0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:../../../tos/interfaces/Resource.nc">
      <documentation loc="63:../../../tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f27d9f8a350" loc="120:../../../tos/interfaces/Resource.nc">
        <documentation loc="104:../../../tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x7f27d9f8b350" loc="97:../../../tos/interfaces/Resource.nc">
        <documentation loc="90:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7f27d9f8f980" loc="88:../../../tos/interfaces/Resource.nc">
        <documentation loc="78:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f27d9f8bb40" loc="102:../../../tos/interfaces/Resource.nc">
        <documentation loc="99:../../../tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f27d9f8adb0" loc="128:../../../tos/interfaces/Resource.nc">
        <documentation loc="122:../../../tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:../../../tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:../../../tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x7f27d9f7b020" loc="65:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7f27d9f7c750" loc="59:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430UsartInterrupts" loc="43:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
      <documentation loc="31:../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function event="" provided="0" name="rxDone" ref="0x7f27d9f74d70" loc="54:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="51:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data has been received.</short>
          <long>&#10; A byte of data has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f27d9f74af0" loc="54:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0x7f27d9f74350" loc="49:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="45:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data is about to be transmitted, ie.</short>
          <long>&#10; A byte of data is about to be transmitted, ie. the TXBuffer is&#10; empty and ready to accept next byte.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430Usart" loc="45:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
      <documentation loc="31:../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0x7f27d9f4d390" loc="213:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="209:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; SUCCESS if the TX buffer is empty and all of the bits have been&#10; shifted out&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartRx" ref="0x7f27d9f59020" loc="143:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="140:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart RX functionality of the USART module.</short>
          <long>&#10; Enables the Uart RX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUctl" ref="0x7f27d9f69de0" loc="50:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="47:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f27d9fdb080"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7f27d9fdb8c0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f27d9f69b60" loc="50:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f27d9fdb080"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7f27d9fdb8c0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUart" ref="0x7f27d9f5b0e0" loc="123:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="120:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables both the Rx and the Tx Uart modules.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUrctl" ref="0x7f27d9f632a0" loc="70:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="67:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f27d9fd6080"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7f27d9fd68c0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f27d9f63020" loc="70:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f27d9fd6080"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7f27d9fd68c0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0x7f27d9f52750" loc="180:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrRxIntr" ref="0x7f27d9f50cf0" loc="197:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="194:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears RX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUtctl" ref="0x7f27d9f64830" loc="65:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="62:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f27d9fd8020"/>
            <typename><typedef-ref name="msp430_utctl_t" ref="0x7f27d9fd87b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUrctl" ref="0x7f27d9f63a90" loc="75:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="72:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f27d9fd6080"/>
            <typename><typedef-ref name="msp430_urctl_t" ref="0x7f27d9fd68c0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetUsart" ref="0x7f27d9f5f830" loc="97:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reset" ref="0x7f27d9f5f5b0" loc="97:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUmctl" ref="0x7f27d9f60e40" loc="95:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableIntr" ref="0x7f27d9f52020" loc="179:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUtctl" ref="0x7f27d9f64040" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="57:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f27d9fd8020"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7f27d9fd87b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f27d9f65da0" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f27d9fd8020"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7f27d9fd87b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUbr" ref="0x7f27d9f62c80" loc="85:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="82:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0x7f27d9f52e80" loc="181:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUmctl" ref="0x7f27d9f60690" loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="umctl" ref="0x7f27d9f60410" loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartRx" ref="0x7f27d9f5d190" loc="113:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="110:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart RX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUart" ref="0x7f27d9f5d910" loc="118:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="115:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Uart mode (both RX and TX)&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0x7f27d9f54070" loc="177:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isSpi" ref="0x7f27d9f56020" loc="163:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="160:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Spi mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartTx" ref="0x7f27d9f5a070" loc="133:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="130:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart TX functionality of the USART module.</short>
          <long>&#10; Enables the Uart TX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0x7f27d9f547b0" loc="178:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartRx" ref="0x7f27d9f59800" loc="148:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="145:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart RX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableIntr" ref="0x7f27d9f515c0" loc="182:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7f27d9f5e070" loc="103:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="99:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.</short>
          <long>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f27d9fde020"/>
            <typename><typedef-ref name="msp430_usartmode_t" ref="0x7f27d9fdd710"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isTxIntrPending" ref="0x7f27d9f51d60" loc="187:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="184:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if TX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrIntr" ref="0x7f27d9f4fbd0" loc="207:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="204:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears both TX and RX interrupt pending flags&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUbr" ref="0x7f27d9f624d0" loc="80:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ubr" ref="0x7f27d9f62250" loc="80:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="tx" ref="0x7f27d9f4dd30" loc="224:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="215:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Transmit a byte of data.</short>
          <long>&#10; Transmit a byte of data. When the transmission is completed,&#10; &#60;code>txDone&#60;/done> is generated. Only then a new byte may be&#10; transmitted, otherwise the previous byte will be overwritten.&#10; The mode of transmission (Uart or Spi) depends on the current&#10; state of the USART, which must be managed by a higher layer.&#10;&#10; @return SUCCESS always.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f27d9f4dab0" loc="224:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUctl" ref="0x7f27d9f65600" loc="55:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="52:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f27d9fdb080"/>
            <typename><typedef-ref name="msp430_uctl_t" ref="0x7f27d9fdb8c0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUart" ref="0x7f27d9f5b850" loc="128:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="125:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables both the Rx and the Tx Uart modules.</short>
          <long>&#10; Disables both the Rx and the Tx Uart modules.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableSpi" ref="0x7f27d9f57020" loc="153:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="150:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeUart" ref="0x7f27d9f55800" loc="174:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="170:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.</short>
          <long>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f27d9face70"/>
                <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f27d9faa2b0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f27d9f55580" loc="174:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f27d9face70"/>
                <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f27d9faa2b0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeSpi" ref="0x7f27d9f56af0" loc="168:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="165:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7f27d9fbe020"/>
                <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7f27d9fbe440"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f27d9f56870" loc="168:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7f27d9fbe020"/>
                <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7f27d9fbe440"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0x7f27d9f4c730" loc="231:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="226:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Get current value from RX-buffer.</short>
          <long>&#10; Get current value from RX-buffer.&#10;&#10; @return SUCCESS always.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRxIntrPending" ref="0x7f27d9f50570" loc="192:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="189:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if RX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartTx" ref="0x7f27d9f5e880" loc="108:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="105:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart TX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrTxIntr" ref="0x7f27d9f4f480" loc="202:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="199:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears TX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableSpi" ref="0x7f27d9f57790" loc="158:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="155:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartTx" ref="0x7f27d9f5a850" loc="138:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="135:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart TX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="86:../../../tos/interfaces/AsyncStdControl.nc">
      <documentation loc="72:../../../tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f27d9ed5420" loc="95:../../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="88:../../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f27d9ed5c70" loc="105:../../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="97:../../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:../../../tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:../../../tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x7f27d9e2e020" loc="90:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x7f27d9e2e880" loc="98:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2CInterrupts" loc="37:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f27d9e19420" loc="39:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="40:../../../tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10; @version $ $&#10; @date $Date: 2007-02-04 20:06:42 $ &#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f27d9e00270" loc="56:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="48:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0x7f27d9dfe350" loc="73:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="67:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f27d9e039c0" loc="46:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="41:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f27d9e00ae0" loc="65:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="58:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f27d9dfec80" loc="81:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="75:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:../../../tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x7f27d9df34c0" loc="79:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f27d9dfc3f0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f27d9df3240" loc="79:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f27d9dfc3f0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x7f27d9df53b0" loc="53:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x7f27d9df4020" loc="62:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f27d9dfc3f0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f27d9df5c30" loc="62:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f27d9dfc3f0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7f27d9df4930" loc="70:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x7f27d9dfc3f0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PowerDownCleanup" loc="55:../../../tos/lib/power/PowerDownCleanup.nc">
      <documentation loc="41:../../../tos/lib/power/PowerDownCleanup.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.  It should be provided&#10; by the user of a shared Resource, and used by the&#10; power managment component for that Resource.  The &#60;code>cleanup()&#60;/code>&#10; command will be called by the power manager just before powering down&#10; the shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="cleanup" ref="0x7f27d9d87770" loc="62:../../../tos/lib/power/PowerDownCleanup.nc">
        <documentation loc="56:../../../tos/lib/power/PowerDownCleanup.nc">
          <short>&#10; This command will be called by the power management component of&#10; a shared Resource.</short>
          <long>&#10; This command will be called by the power management component of&#10; a shared Resource.  The implementation of this command defines&#10; what must be done just before that shared Resource is shut off.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PowerDownCleanup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="DeviceMetadata" loc="40:../../../tos/interfaces/DeviceMetadata.nc">
      <documentation loc="32:../../../tos/interfaces/DeviceMetadata.nc">
        <short>&#10; DeviceMetadata is a way to obtain information about a generic data&#10; access device represented by a SID.</short>
        <long>&#10; DeviceMetadata is a way to obtain information about a generic data&#10; access device represented by a SID. See TEP109 and TEP114 for details.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="getSignificantBits" ref="0x7f27d9d396b0" loc="41:../../../tos/interfaces/DeviceMetadata.nc">
        <interfacedef-ref qname="DeviceMetadata"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SensirionSht11" loc="40:../../../tos/chips/sht11/SensirionSht11.nc">
      <documentation loc="32:../../../tos/chips/sht11/SensirionSht11.nc">
        <short>&#10; SensirionSht11 is the rich interface to the Sensirion SHT11&#10; temperature/humidity sensor.</short>
        <long>&#10; SensirionSht11 is the rich interface to the Sensirion SHT11&#10; temperature/humidity sensor. &#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:12 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="measureHumidityDone" ref="0x7f27d9d246a0" loc="84:../../../tos/chips/sht11/SensirionSht11.nc">
        <documentation loc="78:../../../tos/chips/sht11/SensirionSht11.nc">
          <short>&#10; Presents the result of a humidity measurement.</short>
          <long>&#10; Presents the result of a humidity measurement.&#10;&#10; @param result SUCCESS if the measurement was successful&#10; @param val the humidity reading&#10;</long>
        </documentation>
        <interfacedef-ref qname="SensirionSht11"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f27d9d240d0" loc="84:../../../tos/chips/sht11/SensirionSht11.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x7f27d9d24410" loc="84:../../../tos/chips/sht11/SensirionSht11.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="readStatusReg" ref="0x7f27d9d23020" loc="92:../../../tos/chips/sht11/SensirionSht11.nc">
        <documentation loc="86:../../../tos/chips/sht11/SensirionSht11.nc">
          <short>&#10; Reads the current contents of the SHT11 status and control&#10; register.</short>
          <long>&#10; Reads the current contents of the SHT11 status and control&#10; register. See the datasheet for interpretation of this register.&#10;&#10; @return SUCCESS if the read will be performed&#10;</long>
        </documentation>
        <interfacedef-ref qname="SensirionSht11"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="measureHumidity" ref="0x7f27d9d258b0" loc="76:../../../tos/chips/sht11/SensirionSht11.nc">
        <documentation loc="71:../../../tos/chips/sht11/SensirionSht11.nc">
          <short>&#10; Starts a humidity measurement.</short>
          <long>&#10; Starts a humidity measurement.&#10;&#10; @return SUCCESS if the measurement will be made&#10;</long>
        </documentation>
        <interfacedef-ref qname="SensirionSht11"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="measureTemperature" ref="0x7f27d9d27270" loc="61:../../../tos/chips/sht11/SensirionSht11.nc">
        <documentation loc="56:../../../tos/chips/sht11/SensirionSht11.nc">
          <short>&#10; Starts a temperature measurement.</short>
          <long>&#10; Starts a temperature measurement.&#10;&#10; @return SUCCESS if the measurement will be made&#10;</long>
        </documentation>
        <interfacedef-ref qname="SensirionSht11"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="writeStatusReg" ref="0x7f27d9d228e0" loc="109:../../../tos/chips/sht11/SensirionSht11.nc">
        <documentation loc="102:../../../tos/chips/sht11/SensirionSht11.nc">
          <short>&#10; Writes a new value to the SHT11 status and control register.</short>
          <long>&#10; Writes a new value to the SHT11 status and control register.&#10;&#10; @param val the new value to be written&#10;&#10; @return SUCCESS if the write will be performed&#10;</long>
        </documentation>
        <interfacedef-ref qname="SensirionSht11"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7f27d9d22660" loc="109:../../../tos/chips/sht11/SensirionSht11.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x7f27d9d28020" loc="47:../../../tos/chips/sht11/SensirionSht11.nc">
        <documentation loc="42:../../../tos/chips/sht11/SensirionSht11.nc">
          <short>&#10; Resets the sensor.</short>
          <long>&#10; Resets the sensor.&#10;&#10; @return SUCCESS if the sensor will be reset&#10;</long>
        </documentation>
        <interfacedef-ref qname="SensirionSht11"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="writeStatusRegDone" ref="0x7f27d9d203d0" loc="116:../../../tos/chips/sht11/SensirionSht11.nc">
        <documentation loc="111:../../../tos/chips/sht11/SensirionSht11.nc">
          <short>&#10; Signals the completion of the status register write.</short>
          <long>&#10; Signals the completion of the status register write.&#10;&#10; @param result SUCCESS if the write was successful&#10;</long>
        </documentation>
        <interfacedef-ref qname="SensirionSht11"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f27d9d20150" loc="116:../../../tos/chips/sht11/SensirionSht11.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="readStatusRegDone" ref="0x7f27d9d23e10" loc="100:../../../tos/chips/sht11/SensirionSht11.nc">
        <documentation loc="94:../../../tos/chips/sht11/SensirionSht11.nc">
          <short>&#10; Presents the value of the status register.</short>
          <long>&#10; Presents the value of the status register.&#10;&#10; @param result SUCCESS if the read succeeded&#10; @param val the value of the register&#10;</long>
        </documentation>
        <interfacedef-ref qname="SensirionSht11"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f27d9d23850" loc="100:../../../tos/chips/sht11/SensirionSht11.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x7f27d9d23b80" loc="100:../../../tos/chips/sht11/SensirionSht11.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="resetDone" ref="0x7f27d9d289f0" loc="54:../../../tos/chips/sht11/SensirionSht11.nc">
        <documentation loc="49:../../../tos/chips/sht11/SensirionSht11.nc">
          <short>&#10; Signals that the sensor has been reset.</short>
          <long>&#10; Signals that the sensor has been reset.&#10;&#10; @param result SUCCESS if the reset succeeded&#10;</long>
        </documentation>
        <interfacedef-ref qname="SensirionSht11"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f27d9d28770" loc="54:../../../tos/chips/sht11/SensirionSht11.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="measureTemperatureDone" ref="0x7f27d9d25050" loc="69:../../../tos/chips/sht11/SensirionSht11.nc">
        <documentation loc="63:../../../tos/chips/sht11/SensirionSht11.nc">
          <short>&#10; Presents the result of a temperature measurement.</short>
          <long>&#10; Presents the result of a temperature measurement.&#10;&#10; @param result SUCCESS if the measurement was successful&#10; @param val the temperature reading&#10;</long>
        </documentation>
        <interfacedef-ref qname="SensirionSht11"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f27d9d27a60" loc="69:../../../tos/chips/sht11/SensirionSht11.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x7f27d9d27da0" loc="69:../../../tos/chips/sht11/SensirionSht11.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GpioInterrupt" loc="43:../../../tos/interfaces/GpioInterrupt.nc">
      <documentation loc="34:../../../tos/interfaces/GpioInterrupt.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; Revision:  $Revision: 1.5 $&#10;&#10; Provides a microcontroller-independent presentation of interrupts&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f27d9cdfb10" loc="68:../../../tos/interfaces/GpioInterrupt.nc">
        <documentation loc="63:../../../tos/interfaces/GpioInterrupt.nc">
          <short>&#10; Fired when an edge interrupt occurs.</short>
          <long>&#10; Fired when an edge interrupt occurs.&#10;&#10; NOTE: Interrupts keep running until &#34;disable()&#34; is called&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x7f27d9cdf350" loc="61:../../../tos/interfaces/GpioInterrupt.nc">
        <documentation loc="56:../../../tos/interfaces/GpioInterrupt.nc">
          <short>  &#10; Diables an edge interrupt or capture interrupt&#10; &#10; </short>
          <long>  &#10; Diables an edge interrupt or capture interrupt&#10; &#10; @return SUCCESS if the interrupt has been disabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableFallingEdge" ref="0x7f27d9ce0b70" loc="54:../../../tos/interfaces/GpioInterrupt.nc">
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRisingEdge" ref="0x7f27d9ce02b0" loc="53:../../../tos/interfaces/GpioInterrupt.nc">
        <documentation loc="45:../../../tos/interfaces/GpioInterrupt.nc">
          <short> &#10; Enable an edge based interrupt.</short>
          <long> &#10; Enable an edge based interrupt. Calls to these functions are&#10; not cumulative: only the transition type of the last called function&#10; will be monitored for.&#10;&#10;&#10; @return SUCCESS if the interrupt has been enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:../../../tos/interfaces/SplitControl.nc">
      <documentation loc="72:../../../tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x7f27d9c43c90" loc="113:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="106:../../../tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f27d9c43a10" loc="113:../../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x7f27d9c412a0" loc="138:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="132:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f27d9c41020" loc="138:../../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f27d9c43030" loc="104:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="89:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f27d9c42520" loc="130:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="115:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430Interrupt" loc="37:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f27d9c217b0" loc="52:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="49:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Clears the MSP430 Interrupt Pending Flag for a particular port.</short>
          <long> &#10; Clears the MSP430 Interrupt Pending Flag for a particular port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f27d9c1f2b0" loc="72:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="69:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short>&#10; Signalled when an interrupt occurs on a port.</short>
          <long>&#10; Signalled when an interrupt occurs on a port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x7f27d9c21020" loc="47:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="44:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Disables MSP430 hardware interrupt on a particular port.</short>
          <long> &#10; Disables MSP430 hardware interrupt on a particular port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="edge" ref="0x7f27d9c20a60" loc="67:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="61:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Sets whether the edge should be high to low or low to high.</short>
          <long> &#10; Sets whether the edge should be high to low or low to high.&#10;&#10; @param TRUE if the interrupt should be triggered on a low to high&#10;        edge transition, false for interrupts on a high to low transition.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="low_to_high" ref="0x7f27d9c207e0" loc="67:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enable" ref="0x7f27d9c24820" loc="42:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="39:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Enables MSP430 hardware interrupt on a particular port.</short>
          <long> &#10; Enables MSP430 hardware interrupt on a particular port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getValue" ref="0x7f27d9c20020" loc="59:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="54:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Gets the current value of the input voltage of a port.</short>
          <long> &#10; Gets the current value of the input voltage of a port.&#10;&#10; @return TRUE if the pin is set high, FALSE if it is set low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReadStream" loc="57:../../../tos/interfaces/ReadStream.nc">
      <documentation loc="33:../../../tos/interfaces/ReadStream.nc">
        <short>&#10; The ReadStream interface is intended for buffered high data rate&#10; reading, usually from sensor devices.</short>
        <long>&#10; The ReadStream interface is intended for buffered high data rate&#10; reading, usually from sensor devices. The type of the values being&#10; read is given as a template argument. &#10;&#10; &#60;p> To use this interface, allocate one or more buffers in your own&#10; space. Then, call postBuffer to pass these buffers into the&#10; device. Call read() to begin the sampling process. The buffers will&#10; be filled in the order originally posted, and a bufferDone() event&#10; will be signaled once each buffer has been filled with data. At any&#10; time while the read() is running, you may post new buffers to be&#10; filled. If the lower layer finishes signaling readDone() and then&#10; finds that no more buffers have been posted, it will consider the&#10; read to be finished, and signal readDone(). &#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:31 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x7f27d9abdbf0" loc="57:../../../tos/interfaces/ReadStream.nc">
          <interfacedef-ref qname="ReadStream"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f27d9abdbf0"/></type-var>
        </typedef>
      </parameters>
      <function event="" provided="0" name="bufferDone" ref="0x7f27d9ab6020" loc="89:../../../tos/interfaces/ReadStream.nc">
        <documentation loc="80:../../../tos/interfaces/ReadStream.nc">
          <short>&#10; Signalled when a previously posted buffer has been filled by the&#10; device.</short>
          <long>&#10; Signalled when a previously posted buffer has been filled by the&#10; device. In the event of a read error, result will not equal&#10; SUCCESS, and the buffer will be filled with zeroes.&#10;&#10; @param result SUCCESS if the buffer was filled without errors&#10; @param 'val_t* COUNT(count) buf' a pointer to the buffer that has been filled&#10; @param count the number of values actually read&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f27d9abdbf0"/></type-var>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f27d9ab7650" loc="89:../../../tos/interfaces/ReadStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
            </type-int>
          </variable>
          <variable name="buf" ref="0x7f27d9ab79d0" loc="90:../../../tos/interfaces/ReadStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f27d9abdbf0"/></type-var>
            </type-pointer>
          </variable>
          <variable name="count" ref="0x7f27d9ab7d30" loc="90:../../../tos/interfaces/ReadStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="postBuffer" ref="0x7f27d9abab10" loc="68:../../../tos/interfaces/ReadStream.nc">
        <documentation loc="58:../../../tos/interfaces/ReadStream.nc">
          <short>&#10; Passes a buffer to the device, and indicates how many values&#10; should be placed into the buffer.</short>
          <long>&#10; Passes a buffer to the device, and indicates how many values&#10; should be placed into the buffer. Make sure your count doesn't&#10; overrun the buffer.&#10;&#10; @param 'val_t* COUNT(count) buf' a pointer to the buffer&#10; @param count the number of values the buffer should hold&#10;&#10; @return SUCCESS if the post was successful&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f27d9abdbf0"/></type-var>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f27d9aba520" loc="68:../../../tos/interfaces/ReadStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f27d9abdbf0"/></type-var>
            </type-pointer>
          </variable>
          <variable name="count" ref="0x7f27d9aba880" loc="68:../../../tos/interfaces/ReadStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="read" ref="0x7f27d9ab8d90" loc="78:../../../tos/interfaces/ReadStream.nc">
        <documentation loc="70:../../../tos/interfaces/ReadStream.nc">
          <short>&#10; Directs the device to start filling buffers by sampling with the&#10; specified period.</short>
          <long>&#10; Directs the device to start filling buffers by sampling with the&#10; specified period. &#10; &#10; @param usPeriod the between-sample period in microseconds&#10; &#10; @return SUCCESS if the reading process began&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f27db523920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="usPeriod" ref="0x7f27d9ab8b10" loc="78:../../../tos/interfaces/ReadStream.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f27db523920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x7f27d9ab5660" loc="102:../../../tos/interfaces/ReadStream.nc">
        <documentation loc="92:../../../tos/interfaces/ReadStream.nc">
          <short>&#10; Signalled when a buffer has been filled but no more buffers have&#10; been posted.</short>
          <long>&#10; Signalled when a buffer has been filled but no more buffers have&#10; been posted. In the event of a read error, all previously posted&#10; buffers will have their bufferDone() event signalled, and then&#10; this event will be signalled with a non-SUCCESS argument.&#10;&#10; @param result SUCCESS if all buffers were filled without errors&#10; @param usActualPeriod Actual sampling period used - may be different&#10;   from period requested at read time. Undefined if result != SUCCESS.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f27db523920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f27d9ab5020" loc="102:../../../tos/interfaces/ReadStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
            </type-int>
          </variable>
          <variable name="usActualPeriod" ref="0x7f27d9ab53d0" loc="102:../../../tos/interfaces/ReadStream.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f27db523920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AdcConfigure" loc="45:../../../tos/interfaces/AdcConfigure.nc">
      <documentation loc="36:../../../tos/interfaces/AdcConfigure.nc">
        <short> &#10; This interface is intended to be provided by an ADC client and used by the&#10; ADC subsystem to retrieve the client's ADC configuration.</short>
        <long> &#10; This interface is intended to be provided by an ADC client and used by the&#10; ADC subsystem to retrieve the client's ADC configuration. &#10; &#10; @author Jan Hauer &#10; @see  Please refer to TEP 101 for more information about this interface and&#10; its intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="adc_config_t" ref="0x7f27d9a95d20" loc="45:../../../tos/interfaces/AdcConfigure.nc">
          <interfacedef-ref qname="AdcConfigure"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="adc_config_t" scoped="" ref="0x7f27d9a95d20"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getConfiguration" ref="0x7f27d9a92730" loc="58:../../../tos/interfaces/AdcConfigure.nc">
        <documentation loc="48:../../../tos/interfaces/AdcConfigure.nc">
          <short> &#10; Returns the configuration of an ADC client.</short>
          <long> &#10; Returns the configuration of an ADC client.  &#60;code>adc_config_t&#60;/code> is&#10; a hardware specific data type that contains all information necessary to&#10; configure the respective ADC hardware for the client. A client MUST always&#10; return the same configuration and, if configuration data is passed as a&#10; pointer, the ADC subsystem (HIL component) MUST NOT reference it after the&#10; return of this command.&#10;  &#10; @return chip specific configuration.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AdcConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="adc_config_t" scoped="" ref="0x7f27d9a95d20"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReadNow" loc="52:../../../tos/interfaces/ReadNow.nc">
      <documentation loc="33:../../../tos/interfaces/ReadNow.nc">
        <short>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values.</short>
        <long>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values. The type of the value is given as a&#10; template argument. Because this interface is split-phase, these&#10; values may be backed by hardware. Providers of this interface&#10; should also provide a Resource interface, and this interface should&#10; only be used after the resource has been acquired. Otherwise, the&#10; low-latency requirement may be impossible to meet.&#10;&#10; &#60;p>&#10; This interface has the same calling semantics as the Read interface&#10; described in TEP 114, except that it is async.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-16 18:58:51 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x7f27d9a8a390" loc="52:../../../tos/interfaces/ReadNow.nc">
          <interfacedef-ref qname="ReadNow"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f27d9a8a390"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x7f27d9a8ac90" loc="58:../../../tos/interfaces/ReadNow.nc">
        <documentation loc="53:../../../tos/interfaces/ReadNow.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x7f27d9a88a20" loc="66:../../../tos/interfaces/ReadNow.nc">
        <documentation loc="60:../../../tos/interfaces/ReadNow.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f27d9a8a390"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f27d9a88470" loc="66:../../../tos/interfaces/ReadNow.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x7f27d9a88790" loc="66:../../../tos/interfaces/ReadNow.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f27d9a8a390"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Adc12SingleChannel" loc="69:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
      <documentation loc="36:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <short> &#10; &#10; This interface provides access to the ADC12 on the level of HAL.</short>
        <long> &#10; &#10; This interface provides access to the ADC12 on the level of HAL. It can be&#10; used to sample a single adc channel once or repeatedly (one event is&#10; signalled per conversion result) or perform multiple conversions for a&#10; single channel once or repeatedly (one event is signalled per multiple&#10; conversion results). It cannot be used to sample different adc channels with&#10; a single command (use the Msp430Adc12MultiChannel interface instead).&#10; Sampling a channel requires calling a sequence of two commands, configureX()&#10; and getData(), where X is either 'Single', 'SingleRepeat', 'Multiple' or&#10; 'MultipleRepeat'. Conversion results will be signalled by the&#10; dataReadySingle() or dataReadyMultiple() event, depending on the previous&#10; configuration, i.e. there are four possible sequences:&#10; &#10; &#60;p> configureSingle()          -> ( getData() -> singleDataReady() )*&#10; &#60;p> configureSingleRepeat()    -> ( getData() -> singleDataReady() )*&#10; &#60;p> configureMultiple()        -> ( getData() -> multipleDataReady() )*&#10; &#60;p> configureMultipleRepeat()  -> getData() -> multipleDataReady()&#10;&#10; &#60;p> where configureX() and getData() are commands called by the client and&#10; singleDataReady() and multipleDataReady() are events signalled back to the&#10; client by the adc subsystem. Note that a configuration is valid until the&#10; client reconfigures or releases the ADC (using the Resource interface),&#10; except for configureMultipleRepeat(), which is only valid for a single call&#10; to getData(). This means that after a successful configuration with, for&#10; example, configureSingle() the client may call getData() more than once&#10; without reconfiguring the ADC in between (if the client has not released the&#10; ADC via the Resource interface).&#10;&#10; @author Jan Hauer &#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x7f27d9a75df0" loc="189:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="180:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Starts sampling an adc channel using the configuration as specified by&#10; the last call to any of the four available configuration commands.</short>
          <long> &#10; Starts sampling an adc channel using the configuration as specified by&#10; the last call to any of the four available configuration commands.&#10;&#10; @return SUCCESS means that the conversion was started successfully and an&#10; event singleDataReady() or multipleDataReady() will be signalled&#10; (depending on the previous configuration). Otherwise no such event will be&#10; signalled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configureSingle" ref="0x7f27d9a7daa0" loc="84:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="72:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Configures the ADC to perform a single conversion.</short>
          <long> &#10; Configures the ADC to perform a single conversion. Any previous&#10; configuration will be overwritten.  If SUCCESS is returned calling&#10; &#60;code>getData()&#60;/code> will start the conversion immediately and a&#10; &#60;code>singleDataReady()&#60;/code> event will be signalled with the conversion&#10; result when the conversion has finished.&#10;&#10; @param config ADC12 configuration data.  &#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start the conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f27d9aad4e0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f27d9aaeb70"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f27d9a7d820" loc="84:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f27d9aad4e0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f27d9aaeb70"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="configureSingleRepeat" ref="0x7f27d9a7b020" loc="106:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="86:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Configures the ADC for repeated single channel conversion mode.</short>
          <long> &#10; Configures the ADC for repeated single channel conversion mode. Any&#10; previous configuration will be overwritten. If SUCCESS is returned calling&#10; &#60;code>getData()&#60;/code> will start sampling the adc channel periodically&#10; (the first conversion is started immediately).  The sampling period is&#10; specified by the &#60;code>jiffies&#60;/code> parameter, which defines the time&#10; between successive conversions in terms of clock ticks of clock source&#10; &#34;sampcon_ssel&#34; and clock input divider &#34;sampcon_id&#34; as specified in the&#10; &#60;code>config&#60;/code> parameter. If jiffies is zero successive conversions&#10; are performed as quickly as possible.  Conversion result are signalled&#10; until the client returns &#60;code>FAIL&#60;/code> in the&#10; &#60;code>singleDataReady()&#60;/code> event handler.&#10; &#10; @param config ADC12 configuration data.  &#10; @param jiffies Sampling period in terms of clock ticks of &#34;sampcon_ssel&#34; and&#10; input divider &#34;sampcon_id&#34;.&#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start with the first conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f27d9aad4e0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f27d9aaeb70"/></type-tag>
              </type-qualified>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f27d9a7c990" loc="106:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f27d9aad4e0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f27d9aaeb70"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="jiffies" ref="0x7f27d9a7cd00" loc="106:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="configureMultipleRepeat" ref="0x7f27d9a76a70" loc="177:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="140:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10;&#10; Configures the ADC for sampling a channel multiple times repeatedly.</short>
          <long> &#10;&#10; Configures the ADC for sampling a channel multiple times repeatedly.  Any&#10; previous configuration will be overwritten. In contrast to the&#10; &#60;code>configureSingleRepeat()&#60;/code> command this configuration means that&#10; an event with &#60;code>numSamples&#60;/code> conversion results will be&#10; signalled, where 0 &#60; &#60;code>numSamples&#60;/code> &#60;= 16. In contrast to the&#10; &#60;code>configureMultiple()&#60;/code> command, this configuration means that&#10; &#60;code>numSamples&#60;/code> conversion results will be signalled repeatedly&#10; until the client returns &#60;code>FAIL&#60;/code> in the&#10; &#60;code>multipleDataReady()&#60;/code> event handler. &#10;&#10; If &#60;code>configureMultipleRepeat()&#60;/code> returns SUCCESS calling&#10; &#60;code>getData()&#60;/code> will start the the first conversion immediately.&#10; The sampling period is specified by the &#60;code>jiffies&#60;/code> parameter,&#10; which defines the time between successive conversions in terms of clock&#10; ticks of clock source &#34;sampcon_ssel&#34; and clock input divider &#34;sampcon_id&#34;&#10; as specified in the &#60;code>config&#60;/code> parameter. If jiffies is zero&#10; successive conversions are performed as quickly as possible. After&#10; &#60;code>numSamples&#60;/code> conversions an event&#10; &#60;code>multipleDataReady()&#60;/code> is signalled with &#60;code>numSamples&#60;/code>&#10; conversion results. If the client returns &#60;code>SUCCESS&#60;/code> in the&#10; &#60;code>multipleDataReady()&#60;/code> event handler, &#60;code>numSamples&#60;/code>&#10; new conversions will be performed, otherwise not.&#10;&#10; @param config ADC12 configuration data.  &#10; @param jiffies Sampling period in terms of clock ticks of &#34;sampcon_ssel&#34;&#10; and input divider &#34;sampcon_id&#34;.&#10; @param buffer The user-allocated buffer in which the conversion results&#10; will be stored. It must have at least &#60;code>numSamples&#60;/code> entries,&#10; i.e. it must have a size of at least &#60;code>numSamples&#60;/code> * 2 byte.&#10; @param numSamples Number of adc samples to take, 0 &#60;&#10; &#60;code>numSamples&#60;/code> &#60;= 16&#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start with the first conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f27d9aad4e0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f27d9aaeb70"/></type-tag>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f27d9a777e0" loc="177:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f27d9aad4e0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f27d9aaeb70"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="buffer" ref="0x7f27d9a760d0" loc="177:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x7f27d9a76450" loc="177:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
            </type-int>
          </variable>
          <variable name="jiffies" ref="0x7f27d9a767c0" loc="177:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="multipleDataReady" ref="0x7f27d9a71770" loc="227:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="208:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Multiple ADC conversion results are ready.</short>
          <long> &#10; Multiple ADC conversion results are ready.  If the ADC was configured&#10; with the &#60;code>configureMultiple()&#60;/code> command, then the return value&#10; is ignored. If the ADC was configured with the&#10; &#60;code>configureMultipleRepeat()&#60;/code> command then the returned pointer&#10; defines where to store the next &#60;code>numSamples&#60;/code>&#10; conversion results (the client must make sure that the buffer is big&#10; enough!).  Returning a null pointer means that the repeated conversion&#10; mode will be stopped.&#10; &#10; @param buffer Conversion results (lower 12 bit are valid, respectively).&#10; @param numSamples Number of samples stored in &#60;code>buffer&#60;/code> &#10;&#10; @return&#10; A null pointer stops a repeated conversion mode. Any non-zero value is&#10; interpreted as the next buffer, which must have at least&#10; &#60;code>numSamples&#60;/code> entries. The return value is ignored if the ADC&#10; was configured with &#60;code>configureMultiple()&#60;/code>.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buffer" ref="0x7f27d9a710d0" loc="227:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x7f27d9a71460" loc="227:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="configureMultiple" ref="0x7f27d9a783c0" loc="138:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="109:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Configures the ADC for sampling a channel &#60;code>numSamples&#60;/code> times&#10; with a given sampling period.</short>
          <long> &#10; Configures the ADC for sampling a channel &#60;code>numSamples&#60;/code> times&#10; with a given sampling period. Any previous configuration will be&#10; overwritten.  In contrast to the &#60;code>configureSingleRepeat()&#60;/code>&#10; command, this configuration means that only one event will be signalled&#10; after all samples have been taken (which is useful for high-frequency&#10; sampling). If SUCCESS is returned calling &#60;code>getData()&#60;/code> will&#10; start sampling the adc channel &#60;code>numSamples&#60;/code> times and the first&#10; conversion is started immediately. Conversion results are stored in a&#10; buffer allocated by the client (the &#60;code>buffer&#60;/code>&#10; parameter). The sampling period is specified by the &#60;code>jiffies&#60;/code>&#10; parameter, which defines the time between successive conversions in terms&#10; of clock ticks of clock source &#34;sampcon_ssel&#34; and clock input divider&#10; &#34;sampcon_id&#34; as specified in the &#60;code>config&#60;/code> parameter. If jiffies&#10; is zero successive conversions are performed as quickly as possible. After&#10; &#60;code>numSamples&#60;/code> conversions an event&#10; &#60;code>multipleDataReady()&#60;/code> is signalled with the conversion results.&#10;&#10; @param config ADC12 configuration data.  &#10; @param jiffies Sampling period in terms of clock ticks of &#34;sampcon_ssel&#34;&#10; and input divider &#34;sampcon_id&#34;.&#10; @param buffer The user-allocated buffer in which the conversion results&#10; will be stored. It must have at least &#60;code>numSamples&#60;/code> entries,&#10; i.e. it must have a size of at least &#60;code>numSamples&#60;/code> * 2 byte.&#10; @param numSamples Number of adc samples&#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start with the first conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f27d9aad4e0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f27d9aaeb70"/></type-tag>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f27d9a7a150" loc="138:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f27d9aad4e0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f27d9aaeb70"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="buffer" ref="0x7f27d9a7a9f0" loc="138:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x7f27d9a7ad80" loc="138:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </variable>
          <variable name="jiffies" ref="0x7f27d9a78110" loc="138:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="singleDataReady" ref="0x7f27d9a74ad0" loc="206:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="191:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; A single ADC conversion result is ready.</short>
          <long> &#10; A single ADC conversion result is ready. If the ADC was configured with&#10; the &#60;code>configureSingle()&#60;/code> command, then the return value is&#10; ignored. If the ADC was configured with the&#10; &#60;code>configureSingleRepeat()&#60;/code> command then the return value tells&#10; whether another conversion should be performed (&#60;code>SUCCESS()&#60;/code>) or&#10; not (&#60;code>FAIL&#60;/code>).&#10; &#10; @param data Conversion result (lower 12 bit).  &#10;&#10; @return If this event is signalled as response to a call to&#10; &#60;code>configureSingleRepeat()&#60;/code> then &#60;code>SUCCESS&#60;/code> results in&#10; another sampling and &#60;code>FAIL&#60;/code> stops the repeated sampling.&#10; Otherwise the return value is ignored.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f27d9a74850" loc="206:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Adc12MultiChannel" loc="51:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
      <documentation loc="36:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
        <short> &#10; This interface provides access to the ADC12 on the level of HAL.</short>
        <long> &#10; This interface provides access to the ADC12 on the level of HAL. It can be&#10; used to sample up to 16 (different) ADC channels. It separates between&#10; configuration and data collection: every time a client has been granted&#10; access to the ADC subsystem (via the Resource interface), it first has to&#10; configure the ADC.  Afterwards the client may call getData() more than once&#10; without reconfiguring the ADC in between (if the client has not released the&#10; ADC via the Resource interface), i.e.&#60;p>&#10; &#10;    configure() -> ( getData() -> dataReady() )*&#10;&#10; @author Jan Hauer &#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x7f27d9a22ce0" loc="97:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
        <documentation loc="90:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
          <short> &#10; Starts sampling the adc channels using the configuration as specified by&#10; the last call to &#60;code>configure()&#60;/code>.</short>
          <long> &#10; Starts sampling the adc channels using the configuration as specified by&#10; the last call to &#60;code>configure()&#60;/code>.&#10;&#10; @return SUCCESS means that the conversion was started successfully and an&#10; event dataReady() will be signalled. Otherwise no event will be signalled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7f27d9a22020" loc="86:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
        <documentation loc="54:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
          <short> &#10; Configures the ADC to perform conversion(s) on multiple channels.</short>
          <long> &#10; Configures the ADC to perform conversion(s) on multiple channels.  Any&#10; previous configuration will be overwritten.  If SUCCESS is returned&#10; calling &#60;code>getData()&#60;/code> will start the conversion immediately and a&#10; &#60;code>dataReady()&#60;/code> event will be signalled with the conversion&#10; result when the conversion has finished.&#10;&#10; @param config Main ADC12 configuration and configuration of the first&#10; channel &#10;&#10; @param memctl List of additional channels and respective reference&#10; voltages&#10;&#10; @param numMemctl Number of entries in the list&#10; &#10; @param buffer Buffer to store the conversion results, it must have&#10; numSamples entries. Results will be stored in the order the channels where&#10; specified.&#10;&#10; @param numSamples Total number of samples. Note: numSamples %&#10; (numMemctl+1) must be zero. For example, to sample every channel twice use&#10; numSamples = (numMemctl+1) * 2&#10;&#10; @param jiffies Sampling period in terms of clock ticks of &#34;sampcon_ssel&#34;&#10; and input divider &#34;sampcon_id&#34;. Samples are taken equally-spaced in&#10; time iterating round-robin over the channels (different channels are  &#10; not sampled simultaneously but one after another).&#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start the conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f27daad5c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f27d9aad4e0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f27d9aaeb70"/></type-tag>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f27d9aab110"/>
                <typename><typedef-ref name="adc12memctl_t" ref="0x7f27d9aab5e0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f27d9a24970" loc="86:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f27d9aad4e0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f27d9aaeb70"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="memctl" ref="0x7f27d9a24d60" loc="87:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f27d9aab110"/>
                <typename><typedef-ref name="adc12memctl_t" ref="0x7f27d9aab5e0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="numMemctl" ref="0x7f27d9a23110" loc="87:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
            </type-int>
          </variable>
          <variable name="buffer" ref="0x7f27d9a234b0" loc="87:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x7f27d9a23860" loc="88:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </variable>
          <variable name="jiffies" ref="0x7f27d9a23bd0" loc="88:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x7f27d9a21d40" loc="107:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
        <documentation loc="99:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
          <short> &#10; Conversion results are ready.</short>
          <long> &#10; Conversion results are ready. Results are stored in the buffer in the&#10; order the channels where specified in the &#60;code>configure()&#60;/code>&#10; command, i.e. every (numMemctl+1)-th entry maps to the same channel. &#10; &#10; @param buffer Conversion results (lower 12 bit are valid, respectively).&#10; @param numSamples Number of results stored in &#60;code>buffer&#60;/code> &#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buffer" ref="0x7f27d9a21720" loc="107:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x7f27d9a21ab0" loc="107:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Adc12Overflow" loc="44:../../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
      <documentation loc="36:../../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
        <short> &#10; Signals an ADC12MEMx overflow or conversion time overflow condition to the&#10; client.</short>
        <long> &#10; Signals an ADC12MEMx overflow or conversion time overflow condition to the&#10; client.&#10;&#10; @author Jan Hauer &#10;</long>
      </documentation>
      <function event="" provided="0" name="memOverflow" ref="0x7f27d9a1e780" loc="49:../../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
        <documentation loc="46:../../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
          <short> &#10; An ADC12MEMx overflow condition has occured.</short>
          <long> &#10; An ADC12MEMx overflow condition has occured.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="conversionTimeOverflow" ref="0x7f27d9a1d020" loc="54:../../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
        <documentation loc="51:../../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
          <short> &#10; A conversion time overflow condition has occured.</short>
          <long> &#10; A conversion time overflow condition has occured.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAdc12" loc="45:../../../tos/chips/msp430/adc12/HplAdc12.nc">
      <documentation loc="36:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <short>&#10; The HplAdc12 interface exports low-level access to the ADC12 registers&#10; of the MSP430 MCU.</short>
        <long>&#10; The HplAdc12 interface exports low-level access to the ADC12 registers&#10; of the MSP430 MCU.&#10;&#10; @author Jan Hauer&#10; @see  Please refer to TEP 101 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <function command="" provided="0" name="getCtl0" ref="0x7f27d9a06120" loc="63:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="59:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 control register ADC12CTL0.</short>
          <long> &#10; Returns the ADC12 control register ADC12CTL0.&#10; @return ADC12CTL0&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27d9a9bce0"/>
            <typename><typedef-ref name="adc12ctl0_t" ref="0x7f27d9a9a7a0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMCtl" ref="0x7f27d9a042a0" loc="82:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="77:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 conversion memory control register ADC12MCTLx.</short>
          <long> &#10; Returns the ADC12 conversion memory control register ADC12MCTLx.&#10; @param idx The register index (the 'x' in ADC12MCTLx) [0..15] &#10; @return memControl ADC12MCTLx register data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f27d9aab110"/>
            <typename><typedef-ref name="adc12memctl_t" ref="0x7f27d9aab5e0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f27d9a04020" loc="82:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetIFGs" ref="0x7f27d9a018a0" loc="106:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="103:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Resets the ADC12 interrupt flag register, ADC12IFG.</short>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isBusy" ref="0x7f27d9a00aa0" loc="118:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="114:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 BUSY flag.</short>
          <long> &#10; Returns the ADC12 BUSY flag.&#10; @return ADC12BUSY &#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f27daade090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="conversionDone" ref="0x7f27d9a002e0" loc="112:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="108:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Signals a conversion result.</short>
          <long> &#10; Signals a conversion result. &#10; @param iv ADC12 interrupt vector value 0x6, 0x8, ... , 0x24&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="iv" ref="0x7f27d9a00060" loc="112:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getCtl1" ref="0x7f27d9a06940" loc="68:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="65:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> Returns the ADC12 control register ADC12CTL1.</short>
          <long> Returns the ADC12 control register ADC12CTL1. &#10;  @return ADC12CTL1&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27d9a99e20"/>
            <typename><typedef-ref name="adc12ctl1_t" ref="0x7f27d9a98770"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMCtl" ref="0x7f27d9a05760" loc="75:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="70:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 conversion memory control register ADC12MCTLx.</short>
          <long> &#10; Sets the ADC12 conversion memory control register ADC12MCTLx.&#10; @param idx The register index (the 'x' in ADC12MCTLx) [0..15] &#10; @param memControl ADC12MCTLx register data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
            </type-int>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f27d9aab110"/>
              <typename><typedef-ref name="adc12memctl_t" ref="0x7f27d9aab5e0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f27d9a05110" loc="75:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
            </type-int>
          </variable>
          <variable name="memControl" ref="0x7f27d9a054d0" loc="75:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f27d9aab110"/>
              <typename><typedef-ref name="adc12memctl_t" ref="0x7f27d9aab5e0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startConversion" ref="0x7f27d99ffb40" loc="128:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="125:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short>&#10; Starts a conversion.</short>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setCtl0" ref="0x7f27d9a0ae40" loc="51:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="47:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 control register ADC12CTL0.</short>
          <long> &#10; Sets the ADC12 control register ADC12CTL0.&#10; @param control0 ADC12CTL0 register data.&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27d9a9bce0"/>
              <typename><typedef-ref name="adc12ctl0_t" ref="0x7f27d9a9a7a0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control0" ref="0x7f27d9a0abc0" loc="51:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27d9a9bce0"/>
              <typename><typedef-ref name="adc12ctl0_t" ref="0x7f27d9a9a7a0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getMem" ref="0x7f27d9a04d70" loc="89:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="84:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 conversion memory register ADC12MEMx.</short>
          <long> &#10; Returns the ADC12 conversion memory register ADC12MEMx.&#10; @param idx The register index (the 'x' in ADC12MEMx) [0..15] &#10; @return ADC12MEMx &#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f27d9a04af0" loc="89:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f27db523160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setIEFlags" ref="0x7f27d9a02840" loc="95:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="91:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 interrupt enable register, ADC12IE.</short>
          <long> &#10; Sets the ADC12 interrupt enable register, ADC12IE.&#10; @param mask Bitmask (0 means interrupt disabled, 1 menas interrupt enabled) &#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x7f27d9a025c0" loc="95:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getIEFlags" ref="0x7f27d9a010e0" loc="101:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="97:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 interrupt enable register, ADC12IE.</short>
          <long> &#10; Returns the ADC12 interrupt enable register, ADC12IE.&#10; @return ADC12IE&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f27db523520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stopConversion" ref="0x7f27d99ff2b0" loc="123:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="120:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short>&#10; Stops a conversion.</short>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableConversion" ref="0x7f27d99fd350" loc="133:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="130:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short>&#10; Enables conversion (sets the ENC bit).</short>
          <long>&#10; Enables conversion (sets the ENC bit).&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setCtl1" ref="0x7f27d9a078c0" loc="57:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="53:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 control register ADC12CTL1.</short>
          <long> &#10; Sets the ADC12 control register ADC12CTL1. &#10; @param control1 ADC12CTL1 register data.&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27d9a99e20"/>
              <typename><typedef-ref name="adc12ctl1_t" ref="0x7f27d9a98770"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control1" ref="0x7f27d9a07640" loc="57:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f27d9a99e20"/>
              <typename><typedef-ref name="adc12ctl1_t" ref="0x7f27d9a98770"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
